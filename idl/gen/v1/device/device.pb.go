// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: device.proto

package device

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetVisitsChartDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval string `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"` // 时间间隔
}

func (x *GetVisitsChartDataRequest) Reset() {
	*x = GetVisitsChartDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVisitsChartDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVisitsChartDataRequest) ProtoMessage() {}

func (x *GetVisitsChartDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVisitsChartDataRequest.ProtoReflect.Descriptor instead.
func (*GetVisitsChartDataRequest) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{0}
}

func (x *GetVisitsChartDataRequest) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

type GetVisitsChartDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // 200 代表正常
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 消息
	Data    *VisitsChartData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`       // 执行成功返回数据
}

func (x *GetVisitsChartDataResponse) Reset() {
	*x = GetVisitsChartDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVisitsChartDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVisitsChartDataResponse) ProtoMessage() {}

func (x *GetVisitsChartDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVisitsChartDataResponse.ProtoReflect.Descriptor instead.
func (*GetVisitsChartDataResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{1}
}

func (x *GetVisitsChartDataResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetVisitsChartDataResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetVisitsChartDataResponse) GetData() *VisitsChartData {
	if x != nil {
		return x.Data
	}
	return nil
}

type VisitsChartData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PvList []int32  `protobuf:"varint,1,rep,packed,name=pvList,proto3" json:"pvList,omitempty"` // 使用 repeated 表示数组
	PvDate []string `protobuf:"bytes,2,rep,name=pvDate,proto3" json:"pvDate,omitempty"`         // 使用 repeated 表示数组
}

func (x *VisitsChartData) Reset() {
	*x = VisitsChartData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisitsChartData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisitsChartData) ProtoMessage() {}

func (x *VisitsChartData) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisitsChartData.ProtoReflect.Descriptor instead.
func (*VisitsChartData) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{2}
}

func (x *VisitsChartData) GetPvList() []int32 {
	if x != nil {
		return x.PvList
	}
	return nil
}

func (x *VisitsChartData) GetPvDate() []string {
	if x != nil {
		return x.PvDate
	}
	return nil
}

// 获取 BmxServer ID 列表请求对象
type GetBmxServerIdListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBmxServerIdListRequest) Reset() {
	*x = GetBmxServerIdListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBmxServerIdListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBmxServerIdListRequest) ProtoMessage() {}

func (x *GetBmxServerIdListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBmxServerIdListRequest.ProtoReflect.Descriptor instead.
func (*GetBmxServerIdListRequest) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{3}
}

// 获取 BmxServer ID 列表响应对象
type GetBmxServerIdListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 200 代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 执行成功返回数据
	Data *BmxServerIdList `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetBmxServerIdListResponse) Reset() {
	*x = GetBmxServerIdListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBmxServerIdListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBmxServerIdListResponse) ProtoMessage() {}

func (x *GetBmxServerIdListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBmxServerIdListResponse.ProtoReflect.Descriptor instead.
func (*GetBmxServerIdListResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{4}
}

func (x *GetBmxServerIdListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetBmxServerIdListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetBmxServerIdListResponse) GetData() *BmxServerIdList {
	if x != nil {
		return x.Data
	}
	return nil
}

// BmxServer ID 列表
type BmxServerIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"` // 使用 repeated 关键字表示这是一个字符串数组
}

func (x *BmxServerIdList) Reset() {
	*x = BmxServerIdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BmxServerIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BmxServerIdList) ProtoMessage() {}

func (x *BmxServerIdList) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BmxServerIdList.ProtoReflect.Descriptor instead.
func (*BmxServerIdList) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{5}
}

func (x *BmxServerIdList) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 获取 BmxChart 数据请求对象
type GetBmxChartDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId string `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"` // 服务器ID
	Interval string `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"` // 时间间隔
}

func (x *GetBmxChartDataRequest) Reset() {
	*x = GetBmxChartDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBmxChartDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBmxChartDataRequest) ProtoMessage() {}

func (x *GetBmxChartDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBmxChartDataRequest.ProtoReflect.Descriptor instead.
func (*GetBmxChartDataRequest) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{6}
}

func (x *GetBmxChartDataRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *GetBmxChartDataRequest) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

// 获取 BmxChart 数据响应对象
type GetBmxChartDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 200 代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *BmxChartData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"` // 执行成功返回数据
}

func (x *GetBmxChartDataResponse) Reset() {
	*x = GetBmxChartDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBmxChartDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBmxChartDataResponse) ProtoMessage() {}

func (x *GetBmxChartDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBmxChartDataResponse.ProtoReflect.Descriptor instead.
func (*GetBmxChartDataResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{7}
}

func (x *GetBmxChartDataResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetBmxChartDataResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetBmxChartDataResponse) GetData() *BmxChartData {
	if x != nil {
		return x.Data
	}
	return nil
}

// BmxChart 数据
type BmxChartData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备数量列表
	DeviceNumList []int32 `protobuf:"varint,1,rep,packed,name=deviceNumList,proto3" json:"deviceNumList,omitempty"`
	// 设备就绪数量列表
	DeviceReadyNumList []int32 `protobuf:"varint,2,rep,packed,name=deviceReadyNumList,proto3" json:"deviceReadyNumList,omitempty"`
	// 创建时间列表
	CreateTimeList          []string `protobuf:"bytes,3,rep,name=createTimeList,proto3" json:"createTimeList,omitempty"`
	TotalDeviceNumList      []int32  `protobuf:"varint,4,rep,packed,name=totalDeviceNumList,proto3" json:"totalDeviceNumList,omitempty"`
	TotalDeviceReadyNumList []int32  `protobuf:"varint,5,rep,packed,name=totalDeviceReadyNumList,proto3" json:"totalDeviceReadyNumList,omitempty"`
}

func (x *BmxChartData) Reset() {
	*x = BmxChartData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BmxChartData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BmxChartData) ProtoMessage() {}

func (x *BmxChartData) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BmxChartData.ProtoReflect.Descriptor instead.
func (*BmxChartData) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{8}
}

func (x *BmxChartData) GetDeviceNumList() []int32 {
	if x != nil {
		return x.DeviceNumList
	}
	return nil
}

func (x *BmxChartData) GetDeviceReadyNumList() []int32 {
	if x != nil {
		return x.DeviceReadyNumList
	}
	return nil
}

func (x *BmxChartData) GetCreateTimeList() []string {
	if x != nil {
		return x.CreateTimeList
	}
	return nil
}

func (x *BmxChartData) GetTotalDeviceNumList() []int32 {
	if x != nil {
		return x.TotalDeviceNumList
	}
	return nil
}

func (x *BmxChartData) GetTotalDeviceReadyNumList() []int32 {
	if x != nil {
		return x.TotalDeviceReadyNumList
	}
	return nil
}

type SetInstanceNameResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SetInstanceNameResp) Reset() {
	*x = SetInstanceNameResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetInstanceNameResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetInstanceNameResp) ProtoMessage() {}

func (x *SetInstanceNameResp) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetInstanceNameResp.ProtoReflect.Descriptor instead.
func (*SetInstanceNameResp) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{9}
}

func (x *SetInstanceNameResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SetInstanceNameResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 设置实例名称
type SetInstanceNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//实例名称
	InstanceName string `protobuf:"bytes,1,opt,name=instanceName,proto3" json:"instanceName,omitempty"`
	//实例id
	InstanceId string `protobuf:"bytes,2,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
}

func (x *SetInstanceNameReq) Reset() {
	*x = SetInstanceNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetInstanceNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetInstanceNameReq) ProtoMessage() {}

func (x *SetInstanceNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetInstanceNameReq.ProtoReflect.Descriptor instead.
func (*SetInstanceNameReq) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{10}
}

func (x *SetInstanceNameReq) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *SetInstanceNameReq) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type AddBmxServerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//新添加的服务器
	Data *BmxServer `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AddBmxServerResp) Reset() {
	*x = AddBmxServerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBmxServerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBmxServerResp) ProtoMessage() {}

func (x *AddBmxServerResp) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBmxServerResp.ProtoReflect.Descriptor instead.
func (*AddBmxServerResp) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{11}
}

func (x *AddBmxServerResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddBmxServerResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddBmxServerResp) GetData() *BmxServer {
	if x != nil {
		return x.Data
	}
	return nil
}

// 查看实例列表响应对象
type QueryInstancePageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//实例列表响应对象
	Data *InstancePageResp `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryInstancePageResp) Reset() {
	*x = QueryInstancePageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryInstancePageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInstancePageResp) ProtoMessage() {}

func (x *QueryInstancePageResp) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInstancePageResp.ProtoReflect.Descriptor instead.
func (*QueryInstancePageResp) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{12}
}

func (x *QueryInstancePageResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryInstancePageResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryInstancePageResp) GetData() *InstancePageResp {
	if x != nil {
		return x.Data
	}
	return nil
}

// 更新实例响应对象
type UpdateInstanceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateInstanceResp) Reset() {
	*x = UpdateInstanceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceResp) ProtoMessage() {}

func (x *UpdateInstanceResp) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceResp.ProtoReflect.Descriptor instead.
func (*UpdateInstanceResp) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateInstanceResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateInstanceResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 实例分页响应对象
type InstancePageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总的记录数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 每页显示的大小
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// 当前页
	Current int64 `protobuf:"varint,3,opt,name=current,proto3" json:"current,omitempty"`
	//执行成功返回数据
	Rows []*Instance `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *InstancePageResp) Reset() {
	*x = InstancePageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstancePageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstancePageResp) ProtoMessage() {}

func (x *InstancePageResp) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstancePageResp.ProtoReflect.Descriptor instead.
func (*InstancePageResp) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{14}
}

func (x *InstancePageResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *InstancePageResp) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *InstancePageResp) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *InstancePageResp) GetRows() []*Instance {
	if x != nil {
		return x.Rows
	}
	return nil
}

// 实例对象
type Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户实例ID
	InstanceId string `protobuf:"bytes,2,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	// 节点ID
	NodeId string `protobuf:"bytes,3,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	// 产品ID
	ProductId string `protobuf:"bytes,4,opt,name=productId,proto3" json:"productId,omitempty"`
	// 镜像名称
	ImageName string `protobuf:"bytes,5,opt,name=imageName,proto3" json:"imageName,omitempty"`
	// 实例运行状态: On, Off, invalid, Re-Create, Fail
	InstanceStatus string `protobuf:"bytes,6,opt,name=instanceStatus,proto3" json:"instanceStatus,omitempty"`
	// 实例配置Yaml路径
	YamlPath string `protobuf:"bytes,7,opt,name=yamlPath,proto3" json:"yamlPath,omitempty"`
	// 系统盘挂载路径
	SysdiskPath string `protobuf:"bytes,8,opt,name=sysdiskPath,proto3" json:"sysdiskPath,omitempty"`
	// 数据盘挂载路径
	DatadiskPath string `protobuf:"bytes,9,opt,name=datadiskPath,proto3" json:"datadiskPath,omitempty"`
	// 系统盘大小
	SysdiskSize string `protobuf:"bytes,10,opt,name=sysdiskSize,proto3" json:"sysdiskSize,omitempty"`
	// 数据盘大小
	DatadiskSize string `protobuf:"bytes,11,opt,name=datadiskSize,proto3" json:"datadiskSize,omitempty"`
	// 系统盘ID
	SysvolumeId string `protobuf:"bytes,12,opt,name=sysvolumeId,proto3" json:"sysvolumeId,omitempty"`
	// 用户实例访问密码
	Password string `protobuf:"bytes,13,opt,name=password,proto3" json:"password,omitempty"`
	// FRP服务器
	FrpServer string `protobuf:"bytes,14,opt,name=frpServer,proto3" json:"frpServer,omitempty"`
	// FRP服务器的UUID
	FrpUuid string `protobuf:"bytes,15,opt,name=frpUuid,proto3" json:"frpUuid,omitempty"`
	// SSH访问实例的端口
	SshPort string `protobuf:"bytes,16,opt,name=sshPort,proto3" json:"sshPort,omitempty"`
	// Jupyter端口号
	JupyterPort string `protobuf:"bytes,17,opt,name=jupyterPort,proto3" json:"jupyterPort,omitempty"`
	// 系统盘信息
	SysAttachment string `protobuf:"bytes,18,opt,name=sysAttachment,proto3" json:"sysAttachment,omitempty"`
	// 数据盘ID
	DatavolumeId string `protobuf:"bytes,19,opt,name=datavolumeId,proto3" json:"datavolumeId,omitempty"`
	// 数据盘信息
	DataAttachment string `protobuf:"bytes,20,opt,name=dataAttachment,proto3" json:"dataAttachment,omitempty"`
	// 用户实例访问令牌
	Token string `protobuf:"bytes,21,opt,name=token,proto3" json:"token,omitempty"`
	// 启动时间
	StartTime string `protobuf:"bytes,22,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// 停止时间
	StopTime string `protobuf:"bytes,23,opt,name=stopTime,proto3" json:"stopTime,omitempty"`
	// 理由
	Reason string `protobuf:"bytes,24,opt,name=reason,proto3" json:"reason,omitempty"`
	// 自动释放时间
	AutoReleaseTime string `protobuf:"bytes,25,opt,name=autoReleaseTime,proto3" json:"autoReleaseTime,omitempty"`
	// 用户ID
	UserId int64 `protobuf:"varint,26,opt,name=userId,proto3" json:"userId,omitempty"`
	// 使用时常
	UseTime int64 `protobuf:"varint,27,opt,name=useTime,proto3" json:"useTime,omitempty"`
	// 产品名
	ProductName string `protobuf:"bytes,28,opt,name=productName,proto3" json:"productName,omitempty"`
	//mac地址
	MacAddr string `protobuf:"bytes,29,opt,name=macAddr,proto3" json:"macAddr,omitempty"`
	//页号
	PageNum int64 `protobuf:"varint,30,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	//页大小
	PageSize int64 `protobuf:"varint,31,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *Instance) Reset() {
	*x = Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance) ProtoMessage() {}

func (x *Instance) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance.ProtoReflect.Descriptor instead.
func (*Instance) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{15}
}

func (x *Instance) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *Instance) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Instance) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *Instance) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *Instance) GetInstanceStatus() string {
	if x != nil {
		return x.InstanceStatus
	}
	return ""
}

func (x *Instance) GetYamlPath() string {
	if x != nil {
		return x.YamlPath
	}
	return ""
}

func (x *Instance) GetSysdiskPath() string {
	if x != nil {
		return x.SysdiskPath
	}
	return ""
}

func (x *Instance) GetDatadiskPath() string {
	if x != nil {
		return x.DatadiskPath
	}
	return ""
}

func (x *Instance) GetSysdiskSize() string {
	if x != nil {
		return x.SysdiskSize
	}
	return ""
}

func (x *Instance) GetDatadiskSize() string {
	if x != nil {
		return x.DatadiskSize
	}
	return ""
}

func (x *Instance) GetSysvolumeId() string {
	if x != nil {
		return x.SysvolumeId
	}
	return ""
}

func (x *Instance) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Instance) GetFrpServer() string {
	if x != nil {
		return x.FrpServer
	}
	return ""
}

func (x *Instance) GetFrpUuid() string {
	if x != nil {
		return x.FrpUuid
	}
	return ""
}

func (x *Instance) GetSshPort() string {
	if x != nil {
		return x.SshPort
	}
	return ""
}

func (x *Instance) GetJupyterPort() string {
	if x != nil {
		return x.JupyterPort
	}
	return ""
}

func (x *Instance) GetSysAttachment() string {
	if x != nil {
		return x.SysAttachment
	}
	return ""
}

func (x *Instance) GetDatavolumeId() string {
	if x != nil {
		return x.DatavolumeId
	}
	return ""
}

func (x *Instance) GetDataAttachment() string {
	if x != nil {
		return x.DataAttachment
	}
	return ""
}

func (x *Instance) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Instance) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *Instance) GetStopTime() string {
	if x != nil {
		return x.StopTime
	}
	return ""
}

func (x *Instance) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Instance) GetAutoReleaseTime() string {
	if x != nil {
		return x.AutoReleaseTime
	}
	return ""
}

func (x *Instance) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Instance) GetUseTime() int64 {
	if x != nil {
		return x.UseTime
	}
	return 0
}

func (x *Instance) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *Instance) GetMacAddr() string {
	if x != nil {
		return x.MacAddr
	}
	return ""
}

func (x *Instance) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *Instance) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 查询pid是否存在请求对象
type QueryPidExistsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid string `protobuf:"bytes,1,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (x *QueryPidExistsReq) Reset() {
	*x = QueryPidExistsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPidExistsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPidExistsReq) ProtoMessage() {}

func (x *QueryPidExistsReq) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPidExistsReq.ProtoReflect.Descriptor instead.
func (*QueryPidExistsReq) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{16}
}

func (x *QueryPidExistsReq) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

// 查询pid是否存在响应对象
type QueryPidExistsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *QueryPidExistsResp) Reset() {
	*x = QueryPidExistsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPidExistsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPidExistsResp) ProtoMessage() {}

func (x *QueryPidExistsResp) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPidExistsResp.ProtoReflect.Descriptor instead.
func (*QueryPidExistsResp) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{17}
}

func (x *QueryPidExistsResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryPidExistsResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 实例续费请求对象
type RenewalInstanceDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//实例id
	InstanceId string `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	//续费类型
	BillingType string `protobuf:"bytes,2,opt,name=billingType,proto3" json:"billingType,omitempty"`
	//到期时间
	ExpirationDate string `protobuf:"bytes,3,opt,name=expirationDate,proto3" json:"expirationDate,omitempty"`
}

func (x *RenewalInstanceDetailsRequest) Reset() {
	*x = RenewalInstanceDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewalInstanceDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewalInstanceDetailsRequest) ProtoMessage() {}

func (x *RenewalInstanceDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewalInstanceDetailsRequest.ProtoReflect.Descriptor instead.
func (*RenewalInstanceDetailsRequest) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{18}
}

func (x *RenewalInstanceDetailsRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *RenewalInstanceDetailsRequest) GetBillingType() string {
	if x != nil {
		return x.BillingType
	}
	return ""
}

func (x *RenewalInstanceDetailsRequest) GetExpirationDate() string {
	if x != nil {
		return x.ExpirationDate
	}
	return ""
}

// 实例续费响应对象
type RenewalInstanceDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//续费实例
	Data *RenewalInstanceDetails `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RenewalInstanceDetailsResponse) Reset() {
	*x = RenewalInstanceDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewalInstanceDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewalInstanceDetailsResponse) ProtoMessage() {}

func (x *RenewalInstanceDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewalInstanceDetailsResponse.ProtoReflect.Descriptor instead.
func (*RenewalInstanceDetailsResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{19}
}

func (x *RenewalInstanceDetailsResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RenewalInstanceDetailsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RenewalInstanceDetailsResponse) GetData() *RenewalInstanceDetails {
	if x != nil {
		return x.Data
	}
	return nil
}

// 实例续费详细
type RenewalInstanceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//实例id
	InstanceId string `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	//规格详情
	SpecificationDetails string `protobuf:"bytes,2,opt,name=specificationDetails,proto3" json:"specificationDetails,omitempty"`
	//到期时间
	ExpirationDate string `protobuf:"bytes,3,opt,name=expirationDate,proto3" json:"expirationDate,omitempty"`
	//续费后到期时间
	ExpirationDateAfterRenewal string `protobuf:"bytes,4,opt,name=expirationDateAfterRenewal,proto3" json:"expirationDateAfterRenewal,omitempty"`
	//金额
	AmountMoney string `protobuf:"bytes,5,opt,name=amountMoney,proto3" json:"amountMoney,omitempty"`
	//产品id
	ProductId string `protobuf:"bytes,6,opt,name=productId,proto3" json:"productId,omitempty"`
}

func (x *RenewalInstanceDetails) Reset() {
	*x = RenewalInstanceDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewalInstanceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewalInstanceDetails) ProtoMessage() {}

func (x *RenewalInstanceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewalInstanceDetails.ProtoReflect.Descriptor instead.
func (*RenewalInstanceDetails) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{20}
}

func (x *RenewalInstanceDetails) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *RenewalInstanceDetails) GetSpecificationDetails() string {
	if x != nil {
		return x.SpecificationDetails
	}
	return ""
}

func (x *RenewalInstanceDetails) GetExpirationDate() string {
	if x != nil {
		return x.ExpirationDate
	}
	return ""
}

func (x *RenewalInstanceDetails) GetExpirationDateAfterRenewal() string {
	if x != nil {
		return x.ExpirationDateAfterRenewal
	}
	return ""
}

func (x *RenewalInstanceDetails) GetAmountMoney() string {
	if x != nil {
		return x.AmountMoney
	}
	return ""
}

func (x *RenewalInstanceDetails) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

// 查询磁盘历史记录响应对象
type QueryDiskHistoryBasedOnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string                     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*QueryDiskHistoryBasedOn `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryDiskHistoryBasedOnResponse) Reset() {
	*x = QueryDiskHistoryBasedOnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDiskHistoryBasedOnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDiskHistoryBasedOnResponse) ProtoMessage() {}

func (x *QueryDiskHistoryBasedOnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDiskHistoryBasedOnResponse.ProtoReflect.Descriptor instead.
func (*QueryDiskHistoryBasedOnResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{21}
}

func (x *QueryDiskHistoryBasedOnResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryDiskHistoryBasedOnResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryDiskHistoryBasedOnResponse) GetData() []*QueryDiskHistoryBasedOn {
	if x != nil {
		return x.Data
	}
	return nil
}

// 磁盘历史查询
type QueryDiskHistoryBasedOn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//id
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	//pid
	Pid string `protobuf:"bytes,3,opt,name=pid,proto3" json:"pid,omitempty"`
	//    //磁盘记录
	//    repeated DiskTableRecords data = 4;
	// 磁盘镜像ID
	DiskID string `protobuf:"bytes,21,opt,name=diskID,proto3" json:"diskID,omitempty"`
	// 磁盘类型
	Type string `protobuf:"bytes,22,opt,name=type,proto3" json:"type,omitempty"`
	// 镜像快照ID
	SnapshotID string `protobuf:"bytes,23,opt,name=snapshotID,proto3" json:"snapshotID,omitempty"`
	// 磁盘镜像版本
	Version string `protobuf:"bytes,24,opt,name=version,proto3" json:"version,omitempty"`
	// 机器启动类型
	MachineType string `protobuf:"bytes,25,opt,name=machineType,proto3" json:"machineType,omitempty"`
	//
	Initiator string `protobuf:"bytes,6,opt,name=initiator,proto3" json:"initiator,omitempty"`
	//修改内容
	UpdateContent string `protobuf:"bytes,7,opt,name=updateContent,proto3" json:"updateContent,omitempty"`
	//上级id
	ParentID string `protobuf:"bytes,8,opt,name=parentID,proto3" json:"parentID,omitempty"`
	//磁盘说明
	Description string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	//更新时间
	UpdateTime string `protobuf:"bytes,10,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	//创建时间
	CreateTime string `protobuf:"bytes,11,opt,name=createTime,proto3" json:"createTime,omitempty"`
	//记录主键
	DiskTableRecordsId int64 `protobuf:"varint,12,opt,name=diskTableRecordsId,proto3" json:"diskTableRecordsId,omitempty"`
	//磁盘子记录
	Children []*QueryDiskHistoryBasedOn `protobuf:"bytes,5,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *QueryDiskHistoryBasedOn) Reset() {
	*x = QueryDiskHistoryBasedOn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDiskHistoryBasedOn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDiskHistoryBasedOn) ProtoMessage() {}

func (x *QueryDiskHistoryBasedOn) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDiskHistoryBasedOn.ProtoReflect.Descriptor instead.
func (*QueryDiskHistoryBasedOn) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{22}
}

func (x *QueryDiskHistoryBasedOn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryDiskHistoryBasedOn) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryDiskHistoryBasedOn) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *QueryDiskHistoryBasedOn) GetDiskID() string {
	if x != nil {
		return x.DiskID
	}
	return ""
}

func (x *QueryDiskHistoryBasedOn) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *QueryDiskHistoryBasedOn) GetSnapshotID() string {
	if x != nil {
		return x.SnapshotID
	}
	return ""
}

func (x *QueryDiskHistoryBasedOn) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *QueryDiskHistoryBasedOn) GetMachineType() string {
	if x != nil {
		return x.MachineType
	}
	return ""
}

func (x *QueryDiskHistoryBasedOn) GetInitiator() string {
	if x != nil {
		return x.Initiator
	}
	return ""
}

func (x *QueryDiskHistoryBasedOn) GetUpdateContent() string {
	if x != nil {
		return x.UpdateContent
	}
	return ""
}

func (x *QueryDiskHistoryBasedOn) GetParentID() string {
	if x != nil {
		return x.ParentID
	}
	return ""
}

func (x *QueryDiskHistoryBasedOn) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *QueryDiskHistoryBasedOn) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *QueryDiskHistoryBasedOn) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *QueryDiskHistoryBasedOn) GetDiskTableRecordsId() int64 {
	if x != nil {
		return x.DiskTableRecordsId
	}
	return 0
}

func (x *QueryDiskHistoryBasedOn) GetChildren() []*QueryDiskHistoryBasedOn {
	if x != nil {
		return x.Children
	}
	return nil
}

type DiskTableRecords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 磁盘镜像ID
	DiskID string `protobuf:"bytes,1,opt,name=diskID,proto3" json:"diskID,omitempty"`
	// 磁盘类型
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// 镜像快照ID
	SnapshotID string `protobuf:"bytes,3,opt,name=snapshotID,proto3" json:"snapshotID,omitempty"`
	// 磁盘镜像版本
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// 机器启动类型
	MachineType string `protobuf:"bytes,5,opt,name=machineType,proto3" json:"machineType,omitempty"`
	//
	Initiator string `protobuf:"bytes,6,opt,name=initiator,proto3" json:"initiator,omitempty"`
	//修改内容
	UpdateContent string `protobuf:"bytes,7,opt,name=updateContent,proto3" json:"updateContent,omitempty"`
	//上级id
	ParentID string `protobuf:"bytes,8,opt,name=parentID,proto3" json:"parentID,omitempty"`
	//磁盘说明
	Description string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	//更新时间
	UpdateTime string `protobuf:"bytes,10,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	//创建时间
	CreateTime string `protobuf:"bytes,11,opt,name=createTime,proto3" json:"createTime,omitempty"`
	//记录主键
	Id int64 `protobuf:"varint,12,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DiskTableRecords) Reset() {
	*x = DiskTableRecords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskTableRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskTableRecords) ProtoMessage() {}

func (x *DiskTableRecords) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskTableRecords.ProtoReflect.Descriptor instead.
func (*DiskTableRecords) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{23}
}

func (x *DiskTableRecords) GetDiskID() string {
	if x != nil {
		return x.DiskID
	}
	return ""
}

func (x *DiskTableRecords) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DiskTableRecords) GetSnapshotID() string {
	if x != nil {
		return x.SnapshotID
	}
	return ""
}

func (x *DiskTableRecords) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DiskTableRecords) GetMachineType() string {
	if x != nil {
		return x.MachineType
	}
	return ""
}

func (x *DiskTableRecords) GetInitiator() string {
	if x != nil {
		return x.Initiator
	}
	return ""
}

func (x *DiskTableRecords) GetUpdateContent() string {
	if x != nil {
		return x.UpdateContent
	}
	return ""
}

func (x *DiskTableRecords) GetParentID() string {
	if x != nil {
		return x.ParentID
	}
	return ""
}

func (x *DiskTableRecords) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DiskTableRecords) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *DiskTableRecords) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *DiskTableRecords) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 查询磁盘历史记录请求对象
type QueryDiskHistoryBasedOnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//磁盘镜像id
	DiskId string `protobuf:"bytes,2,opt,name=diskId,proto3" json:"diskId,omitempty"`
	//镜像快照id
	SnapshotId string `protobuf:"bytes,3,opt,name=snapshotId,proto3" json:"snapshotId,omitempty"`
}

func (x *QueryDiskHistoryBasedOnRequest) Reset() {
	*x = QueryDiskHistoryBasedOnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDiskHistoryBasedOnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDiskHistoryBasedOnRequest) ProtoMessage() {}

func (x *QueryDiskHistoryBasedOnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDiskHistoryBasedOnRequest.ProtoReflect.Descriptor instead.
func (*QueryDiskHistoryBasedOnRequest) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{24}
}

func (x *QueryDiskHistoryBasedOnRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *QueryDiskHistoryBasedOnRequest) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

// 批量更新BmxServer的磁盘id请求对象
type BatchUpdateBmxServerDiskIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//磁盘id
	DiskId string `protobuf:"bytes,1,opt,name=diskId,proto3" json:"diskId,omitempty"`
	//bmxserverId列表
	BmxServerId []string `protobuf:"bytes,2,rep,name=bmxServerId,proto3" json:"bmxServerId,omitempty"`
}

func (x *BatchUpdateBmxServerDiskIdRequest) Reset() {
	*x = BatchUpdateBmxServerDiskIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateBmxServerDiskIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateBmxServerDiskIdRequest) ProtoMessage() {}

func (x *BatchUpdateBmxServerDiskIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateBmxServerDiskIdRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateBmxServerDiskIdRequest) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{25}
}

func (x *BatchUpdateBmxServerDiskIdRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *BatchUpdateBmxServerDiskIdRequest) GetBmxServerId() []string {
	if x != nil {
		return x.BmxServerId
	}
	return nil
}

// 批量更新BmxServer的磁盘id响应对象
type BatchUpdateBmxServerDiskIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BatchUpdateBmxServerDiskIdResponse) Reset() {
	*x = BatchUpdateBmxServerDiskIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateBmxServerDiskIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateBmxServerDiskIdResponse) ProtoMessage() {}

func (x *BatchUpdateBmxServerDiskIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateBmxServerDiskIdResponse.ProtoReflect.Descriptor instead.
func (*BatchUpdateBmxServerDiskIdResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{26}
}

func (x *BatchUpdateBmxServerDiskIdResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BatchUpdateBmxServerDiskIdResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 查询磁盘对应的bmxServer列表请求对象
type QueryBmxServerByDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//磁盘id
	DiskId string `protobuf:"bytes,1,opt,name=diskId,proto3" json:"diskId,omitempty"`
}

func (x *QueryBmxServerByDiskRequest) Reset() {
	*x = QueryBmxServerByDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBmxServerByDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBmxServerByDiskRequest) ProtoMessage() {}

func (x *QueryBmxServerByDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBmxServerByDiskRequest.ProtoReflect.Descriptor instead.
func (*QueryBmxServerByDiskRequest) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{27}
}

func (x *QueryBmxServerByDiskRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

// 查询磁盘对应的bmxServer列表响应对象
type QueryBmxServerByDiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//bmxServer列表
	BmxServerId []string `protobuf:"bytes,3,rep,name=bmxServerId,proto3" json:"bmxServerId,omitempty"`
}

func (x *QueryBmxServerByDiskResponse) Reset() {
	*x = QueryBmxServerByDiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBmxServerByDiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBmxServerByDiskResponse) ProtoMessage() {}

func (x *QueryBmxServerByDiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBmxServerByDiskResponse.ProtoReflect.Descriptor instead.
func (*QueryBmxServerByDiskResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{28}
}

func (x *QueryBmxServerByDiskResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryBmxServerByDiskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryBmxServerByDiskResponse) GetBmxServerId() []string {
	if x != nil {
		return x.BmxServerId
	}
	return nil
}

// 实例开关机记录请求对象
type InstancePowerOnOffRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主键
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 用户实例ID
	InstanceId string `protobuf:"bytes,2,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	// 节点ID
	NodeId string `protobuf:"bytes,3,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	// 产品ID
	ProductId string `protobuf:"bytes,4,opt,name=productId,proto3" json:"productId,omitempty"`
	// 实例运行状态: On, Off, invalid, Re-Create, Fail
	InstanceStatus string `protobuf:"bytes,6,opt,name=instanceStatus,proto3" json:"instanceStatus,omitempty"`
	// 系统盘ID
	SysvolumeId string `protobuf:"bytes,12,opt,name=sysvolumeId,proto3" json:"sysvolumeId,omitempty"`
	// 用户ID
	UserId int64 `protobuf:"varint,26,opt,name=userId,proto3" json:"userId,omitempty"`
	// 使用时常
	UseTime int64 `protobuf:"varint,27,opt,name=useTime,proto3" json:"useTime,omitempty"`
	// 产品名
	ProductName string `protobuf:"bytes,28,opt,name=productName,proto3" json:"productName,omitempty"`
	//页号
	PageNum int64 `protobuf:"varint,29,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	//页大小
	PageSize int64 `protobuf:"varint,30,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *InstancePowerOnOffRecordRequest) Reset() {
	*x = InstancePowerOnOffRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstancePowerOnOffRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstancePowerOnOffRecordRequest) ProtoMessage() {}

func (x *InstancePowerOnOffRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstancePowerOnOffRecordRequest.ProtoReflect.Descriptor instead.
func (*InstancePowerOnOffRecordRequest) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{29}
}

func (x *InstancePowerOnOffRecordRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InstancePowerOnOffRecordRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *InstancePowerOnOffRecordRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *InstancePowerOnOffRecordRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *InstancePowerOnOffRecordRequest) GetInstanceStatus() string {
	if x != nil {
		return x.InstanceStatus
	}
	return ""
}

func (x *InstancePowerOnOffRecordRequest) GetSysvolumeId() string {
	if x != nil {
		return x.SysvolumeId
	}
	return ""
}

func (x *InstancePowerOnOffRecordRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *InstancePowerOnOffRecordRequest) GetUseTime() int64 {
	if x != nil {
		return x.UseTime
	}
	return 0
}

func (x *InstancePowerOnOffRecordRequest) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *InstancePowerOnOffRecordRequest) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *InstancePowerOnOffRecordRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 实例开关机记录响应对象
type InstancePowerOnOffRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//实例开关机page对象
	Data *InstanceTableRecordPage `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *InstancePowerOnOffRecordResponse) Reset() {
	*x = InstancePowerOnOffRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstancePowerOnOffRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstancePowerOnOffRecordResponse) ProtoMessage() {}

func (x *InstancePowerOnOffRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstancePowerOnOffRecordResponse.ProtoReflect.Descriptor instead.
func (*InstancePowerOnOffRecordResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{30}
}

func (x *InstancePowerOnOffRecordResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *InstancePowerOnOffRecordResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InstancePowerOnOffRecordResponse) GetData() *InstanceTableRecordPage {
	if x != nil {
		return x.Data
	}
	return nil
}

// 实例记录page对象
type InstanceTableRecordPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总的记录数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 每页显示的大小
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// 当前页
	Current int64 `protobuf:"varint,3,opt,name=current,proto3" json:"current,omitempty"`
	//执行成功返回数据
	Rows []*InstanceTableRecord `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *InstanceTableRecordPage) Reset() {
	*x = InstanceTableRecordPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTableRecordPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTableRecordPage) ProtoMessage() {}

func (x *InstanceTableRecordPage) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTableRecordPage.ProtoReflect.Descriptor instead.
func (*InstanceTableRecordPage) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{31}
}

func (x *InstanceTableRecordPage) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *InstanceTableRecordPage) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *InstanceTableRecordPage) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *InstanceTableRecordPage) GetRows() []*InstanceTableRecord {
	if x != nil {
		return x.Rows
	}
	return nil
}

// 实例记录对象
type InstanceTableRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主键
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 用户实例ID
	InstanceId string `protobuf:"bytes,2,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	// 节点ID
	NodeId string `protobuf:"bytes,3,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	// 产品ID
	ProductId string `protobuf:"bytes,4,opt,name=productId,proto3" json:"productId,omitempty"`
	// 镜像名称
	ImageName string `protobuf:"bytes,5,opt,name=imageName,proto3" json:"imageName,omitempty"`
	// 实例运行状态: On, Off, invalid, Re-Create, Fail
	InstanceStatus string `protobuf:"bytes,6,opt,name=instanceStatus,proto3" json:"instanceStatus,omitempty"`
	// 实例配置Yaml路径
	YamlPath string `protobuf:"bytes,7,opt,name=yamlPath,proto3" json:"yamlPath,omitempty"`
	// 系统盘挂载路径
	SysdiskPath string `protobuf:"bytes,8,opt,name=sysdiskPath,proto3" json:"sysdiskPath,omitempty"`
	// 数据盘挂载路径
	DatadiskPath string `protobuf:"bytes,9,opt,name=datadiskPath,proto3" json:"datadiskPath,omitempty"`
	// 系统盘大小
	SysdiskSize string `protobuf:"bytes,10,opt,name=sysdiskSize,proto3" json:"sysdiskSize,omitempty"`
	// 数据盘大小
	DatadiskSize string `protobuf:"bytes,11,opt,name=datadiskSize,proto3" json:"datadiskSize,omitempty"`
	// 系统盘ID
	SysvolumeId string `protobuf:"bytes,12,opt,name=sysvolumeId,proto3" json:"sysvolumeId,omitempty"`
	// 用户实例访问密码
	Password string `protobuf:"bytes,13,opt,name=password,proto3" json:"password,omitempty"`
	// FRP服务器
	FrpServer string `protobuf:"bytes,14,opt,name=frpServer,proto3" json:"frpServer,omitempty"`
	// FRP服务器的UUID
	FrpUuid string `protobuf:"bytes,15,opt,name=frpUuid,proto3" json:"frpUuid,omitempty"`
	// SSH访问实例的端口
	SshPort string `protobuf:"bytes,16,opt,name=sshPort,proto3" json:"sshPort,omitempty"`
	// Jupyter端口号
	JupyterPort string `protobuf:"bytes,17,opt,name=jupyterPort,proto3" json:"jupyterPort,omitempty"`
	// 系统盘信息
	SysAttachment string `protobuf:"bytes,18,opt,name=sysAttachment,proto3" json:"sysAttachment,omitempty"`
	// 数据盘ID
	DatavolumeId string `protobuf:"bytes,19,opt,name=datavolumeId,proto3" json:"datavolumeId,omitempty"`
	// 数据盘信息
	DataAttachment string `protobuf:"bytes,20,opt,name=dataAttachment,proto3" json:"dataAttachment,omitempty"`
	// 用户实例访问令牌
	Token string `protobuf:"bytes,21,opt,name=token,proto3" json:"token,omitempty"`
	// 启动时间
	StartTime string `protobuf:"bytes,22,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// 停止时间
	StopTime string `protobuf:"bytes,23,opt,name=stopTime,proto3" json:"stopTime,omitempty"`
	// 理由
	Reason string `protobuf:"bytes,24,opt,name=reason,proto3" json:"reason,omitempty"`
	// 自动释放时间
	AutoReleaseTime string `protobuf:"bytes,25,opt,name=autoReleaseTime,proto3" json:"autoReleaseTime,omitempty"`
	// 用户ID
	UserId int64 `protobuf:"varint,26,opt,name=userId,proto3" json:"userId,omitempty"`
	// 使用时常
	UseTime int64 `protobuf:"varint,27,opt,name=useTime,proto3" json:"useTime,omitempty"`
	// 产品名
	ProductName string `protobuf:"bytes,28,opt,name=productName,proto3" json:"productName,omitempty"`
	//mac地址
	MacAddr string `protobuf:"bytes,29,opt,name=macAddr,proto3" json:"macAddr,omitempty"`
}

func (x *InstanceTableRecord) Reset() {
	*x = InstanceTableRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTableRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTableRecord) ProtoMessage() {}

func (x *InstanceTableRecord) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTableRecord.ProtoReflect.Descriptor instead.
func (*InstanceTableRecord) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{32}
}

func (x *InstanceTableRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InstanceTableRecord) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *InstanceTableRecord) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *InstanceTableRecord) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *InstanceTableRecord) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *InstanceTableRecord) GetInstanceStatus() string {
	if x != nil {
		return x.InstanceStatus
	}
	return ""
}

func (x *InstanceTableRecord) GetYamlPath() string {
	if x != nil {
		return x.YamlPath
	}
	return ""
}

func (x *InstanceTableRecord) GetSysdiskPath() string {
	if x != nil {
		return x.SysdiskPath
	}
	return ""
}

func (x *InstanceTableRecord) GetDatadiskPath() string {
	if x != nil {
		return x.DatadiskPath
	}
	return ""
}

func (x *InstanceTableRecord) GetSysdiskSize() string {
	if x != nil {
		return x.SysdiskSize
	}
	return ""
}

func (x *InstanceTableRecord) GetDatadiskSize() string {
	if x != nil {
		return x.DatadiskSize
	}
	return ""
}

func (x *InstanceTableRecord) GetSysvolumeId() string {
	if x != nil {
		return x.SysvolumeId
	}
	return ""
}

func (x *InstanceTableRecord) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *InstanceTableRecord) GetFrpServer() string {
	if x != nil {
		return x.FrpServer
	}
	return ""
}

func (x *InstanceTableRecord) GetFrpUuid() string {
	if x != nil {
		return x.FrpUuid
	}
	return ""
}

func (x *InstanceTableRecord) GetSshPort() string {
	if x != nil {
		return x.SshPort
	}
	return ""
}

func (x *InstanceTableRecord) GetJupyterPort() string {
	if x != nil {
		return x.JupyterPort
	}
	return ""
}

func (x *InstanceTableRecord) GetSysAttachment() string {
	if x != nil {
		return x.SysAttachment
	}
	return ""
}

func (x *InstanceTableRecord) GetDatavolumeId() string {
	if x != nil {
		return x.DatavolumeId
	}
	return ""
}

func (x *InstanceTableRecord) GetDataAttachment() string {
	if x != nil {
		return x.DataAttachment
	}
	return ""
}

func (x *InstanceTableRecord) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *InstanceTableRecord) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *InstanceTableRecord) GetStopTime() string {
	if x != nil {
		return x.StopTime
	}
	return ""
}

func (x *InstanceTableRecord) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *InstanceTableRecord) GetAutoReleaseTime() string {
	if x != nil {
		return x.AutoReleaseTime
	}
	return ""
}

func (x *InstanceTableRecord) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *InstanceTableRecord) GetUseTime() int64 {
	if x != nil {
		return x.UseTime
	}
	return 0
}

func (x *InstanceTableRecord) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *InstanceTableRecord) GetMacAddr() string {
	if x != nil {
		return x.MacAddr
	}
	return ""
}

// 更新BmxServer的磁盘id请求对象
type UpdateBmxServerDiskIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bmx服务器ID，主键
	ServerID string `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
	// 系统母盘ID
	SysDiskID string `protobuf:"bytes,2,opt,name=sysDiskID,proto3" json:"sysDiskID,omitempty"`
	// 数据母盘ID
	DataDiskID string `protobuf:"bytes,3,opt,name=dataDiskID,proto3" json:"dataDiskID,omitempty"`
	//备注
	Comment string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *UpdateBmxServerDiskIdRequest) Reset() {
	*x = UpdateBmxServerDiskIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBmxServerDiskIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBmxServerDiskIdRequest) ProtoMessage() {}

func (x *UpdateBmxServerDiskIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBmxServerDiskIdRequest.ProtoReflect.Descriptor instead.
func (*UpdateBmxServerDiskIdRequest) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateBmxServerDiskIdRequest) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *UpdateBmxServerDiskIdRequest) GetSysDiskID() string {
	if x != nil {
		return x.SysDiskID
	}
	return ""
}

func (x *UpdateBmxServerDiskIdRequest) GetDataDiskID() string {
	if x != nil {
		return x.DataDiskID
	}
	return ""
}

func (x *UpdateBmxServerDiskIdRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

// 更新BmxServer的磁盘id响应对象
type UpdateBmxServerDiskIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateBmxServerDiskIdResponse) Reset() {
	*x = UpdateBmxServerDiskIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBmxServerDiskIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBmxServerDiskIdResponse) ProtoMessage() {}

func (x *UpdateBmxServerDiskIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBmxServerDiskIdResponse.ProtoReflect.Descriptor instead.
func (*UpdateBmxServerDiskIdResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateBmxServerDiskIdResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateBmxServerDiskIdResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 添加磁盘信息请求对象
type AddDiskInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//磁盘信息
	Data *DiskInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AddDiskInfoRequest) Reset() {
	*x = AddDiskInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDiskInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDiskInfoRequest) ProtoMessage() {}

func (x *AddDiskInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDiskInfoRequest.ProtoReflect.Descriptor instead.
func (*AddDiskInfoRequest) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{35}
}

func (x *AddDiskInfoRequest) GetData() *DiskInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

// 添加磁盘信息响应对象
type AddDiskInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AddDiskInfoResponse) Reset() {
	*x = AddDiskInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDiskInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDiskInfoResponse) ProtoMessage() {}

func (x *AddDiskInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDiskInfoResponse.ProtoReflect.Descriptor instead.
func (*AddDiskInfoResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{36}
}

func (x *AddDiskInfoResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddDiskInfoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 删除磁盘信息请求对象
type DeleteDiskInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 磁盘镜像ID
	DiskID string `protobuf:"bytes,1,opt,name=diskID,proto3" json:"diskID,omitempty"`
}

func (x *DeleteDiskInfoRequest) Reset() {
	*x = DeleteDiskInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDiskInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDiskInfoRequest) ProtoMessage() {}

func (x *DeleteDiskInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDiskInfoRequest.ProtoReflect.Descriptor instead.
func (*DeleteDiskInfoRequest) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{37}
}

func (x *DeleteDiskInfoRequest) GetDiskID() string {
	if x != nil {
		return x.DiskID
	}
	return ""
}

// 删除磁盘信息响应对象
type DeleteDiskInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteDiskInfoResponse) Reset() {
	*x = DeleteDiskInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDiskInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDiskInfoResponse) ProtoMessage() {}

func (x *DeleteDiskInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDiskInfoResponse.ProtoReflect.Descriptor instead.
func (*DeleteDiskInfoResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{38}
}

func (x *DeleteDiskInfoResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteDiskInfoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 更新磁盘信息请求对象
type UpdateDiskInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//磁盘信息
	Data *DiskInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateDiskInfoRequest) Reset() {
	*x = UpdateDiskInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDiskInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDiskInfoRequest) ProtoMessage() {}

func (x *UpdateDiskInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDiskInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdateDiskInfoRequest) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateDiskInfoRequest) GetData() *DiskInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

// 更新磁盘信息响应对象
type UpdateDiskInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateDiskInfoResponse) Reset() {
	*x = UpdateDiskInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDiskInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDiskInfoResponse) ProtoMessage() {}

func (x *UpdateDiskInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDiskInfoResponse.ProtoReflect.Descriptor instead.
func (*UpdateDiskInfoResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateDiskInfoResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateDiskInfoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 查询磁盘信息请求对象
type QueryDiskInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//页号
	PageNum int64 `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	//页大小
	PageSize int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	//磁盘id
	DiskId string `protobuf:"bytes,3,opt,name=diskId,proto3" json:"diskId,omitempty"`
	//磁盘类型
	DiskType string `protobuf:"bytes,4,opt,name=diskType,proto3" json:"diskType,omitempty"`
}

func (x *QueryDiskInfoRequest) Reset() {
	*x = QueryDiskInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDiskInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDiskInfoRequest) ProtoMessage() {}

func (x *QueryDiskInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDiskInfoRequest.ProtoReflect.Descriptor instead.
func (*QueryDiskInfoRequest) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{41}
}

func (x *QueryDiskInfoRequest) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryDiskInfoRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryDiskInfoRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *QueryDiskInfoRequest) GetDiskType() string {
	if x != nil {
		return x.DiskType
	}
	return ""
}

// 查询磁盘信息响应对象
type QueryDiskInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//执行成功返回数据
	Data *QueryDiskInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryDiskInfoResponse) Reset() {
	*x = QueryDiskInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDiskInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDiskInfoResponse) ProtoMessage() {}

func (x *QueryDiskInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDiskInfoResponse.ProtoReflect.Descriptor instead.
func (*QueryDiskInfoResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{42}
}

func (x *QueryDiskInfoResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryDiskInfoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryDiskInfoResponse) GetData() *QueryDiskInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryDiskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总的记录数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 每页显示的大小
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// 当前页
	Current int64 `protobuf:"varint,3,opt,name=current,proto3" json:"current,omitempty"`
	//执行成功返回数据
	Rows []*DiskInfo `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *QueryDiskInfo) Reset() {
	*x = QueryDiskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDiskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDiskInfo) ProtoMessage() {}

func (x *QueryDiskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDiskInfo.ProtoReflect.Descriptor instead.
func (*QueryDiskInfo) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{43}
}

func (x *QueryDiskInfo) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryDiskInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *QueryDiskInfo) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *QueryDiskInfo) GetRows() []*DiskInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

type DiskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 磁盘镜像ID
	DiskID string `protobuf:"bytes,1,opt,name=diskID,proto3" json:"diskID,omitempty"`
	// 磁盘类型
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// 镜像快照ID
	SnapshotID string `protobuf:"bytes,3,opt,name=snapshotID,proto3" json:"snapshotID,omitempty"`
	// 磁盘镜像版本
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// 机器启动类型
	MachineType string `protobuf:"bytes,5,opt,name=machineType,proto3" json:"machineType,omitempty"`
	//
	Initiator string `protobuf:"bytes,6,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// 修改内容 仅克隆: CLONE_ONLY  克隆后修改: CLONE_AND_MODIFY
	UpdateContent string `protobuf:"bytes,7,opt,name=updateContent,proto3" json:"updateContent,omitempty"`
	//上级id
	ParentID string `protobuf:"bytes,8,opt,name=parentID,proto3" json:"parentID,omitempty"`
	//磁盘说明
	Description string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	//更新时间
	UpdateTime string `protobuf:"bytes,10,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	//创建时间
	CreateTime string `protobuf:"bytes,11,opt,name=createTime,proto3" json:"createTime,omitempty"`
	//gpu驱动版本
	GpuDriveVer string `protobuf:"bytes,12,opt,name=gpuDriveVer,proto3" json:"gpuDriveVer,omitempty"`
	//数据盘大小
	DatadiskSize string `protobuf:"bytes,13,opt,name=datadiskSize,proto3" json:"datadiskSize,omitempty"`
}

func (x *DiskInfo) Reset() {
	*x = DiskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskInfo) ProtoMessage() {}

func (x *DiskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskInfo.ProtoReflect.Descriptor instead.
func (*DiskInfo) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{44}
}

func (x *DiskInfo) GetDiskID() string {
	if x != nil {
		return x.DiskID
	}
	return ""
}

func (x *DiskInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DiskInfo) GetSnapshotID() string {
	if x != nil {
		return x.SnapshotID
	}
	return ""
}

func (x *DiskInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DiskInfo) GetMachineType() string {
	if x != nil {
		return x.MachineType
	}
	return ""
}

func (x *DiskInfo) GetInitiator() string {
	if x != nil {
		return x.Initiator
	}
	return ""
}

func (x *DiskInfo) GetUpdateContent() string {
	if x != nil {
		return x.UpdateContent
	}
	return ""
}

func (x *DiskInfo) GetParentID() string {
	if x != nil {
		return x.ParentID
	}
	return ""
}

func (x *DiskInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DiskInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *DiskInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *DiskInfo) GetGpuDriveVer() string {
	if x != nil {
		return x.GpuDriveVer
	}
	return ""
}

func (x *DiskInfo) GetDatadiskSize() string {
	if x != nil {
		return x.DatadiskSize
	}
	return ""
}

// 查询客户标签请求对象
type QueryClientLabelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//页号
	PageNum int64 `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	//页大小
	PageSize int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *QueryClientLabelRequest) Reset() {
	*x = QueryClientLabelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryClientLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryClientLabelRequest) ProtoMessage() {}

func (x *QueryClientLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryClientLabelRequest.ProtoReflect.Descriptor instead.
func (*QueryClientLabelRequest) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{45}
}

func (x *QueryClientLabelRequest) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryClientLabelRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 查询客户标签响应对象
type QueryClientLabelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//执行成功返回数据
	Data *QueryClientLabel `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryClientLabelResponse) Reset() {
	*x = QueryClientLabelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryClientLabelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryClientLabelResponse) ProtoMessage() {}

func (x *QueryClientLabelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryClientLabelResponse.ProtoReflect.Descriptor instead.
func (*QueryClientLabelResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{46}
}

func (x *QueryClientLabelResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryClientLabelResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryClientLabelResponse) GetData() *QueryClientLabel {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryClientLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总的记录数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 每页显示的大小
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// 当前页
	Current int64 `protobuf:"varint,3,opt,name=current,proto3" json:"current,omitempty"`
	//执行成功返回数据
	Rows []*LabelPage `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"`
	//客户标签
	Label string `protobuf:"bytes,5,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *QueryClientLabel) Reset() {
	*x = QueryClientLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryClientLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryClientLabel) ProtoMessage() {}

func (x *QueryClientLabel) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryClientLabel.ProtoReflect.Descriptor instead.
func (*QueryClientLabel) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{47}
}

func (x *QueryClientLabel) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryClientLabel) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *QueryClientLabel) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *QueryClientLabel) GetRows() []*LabelPage {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *QueryClientLabel) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type LabelPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//客户标签
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	//bmx服务器数量
	BmxServerNum int32 `protobuf:"varint,2,opt,name=bmxServerNum,proto3" json:"bmxServerNum,omitempty"`
	//设备数量
	DeviceNum int32 `protobuf:"varint,3,opt,name=deviceNum,proto3" json:"deviceNum,omitempty"`
	//总价格
	TotalPrice string `protobuf:"bytes,4,opt,name=totalPrice,proto3" json:"totalPrice,omitempty"`
	//比例价格
	SharingRatio string `protobuf:"bytes,5,opt,name=sharingRatio,proto3" json:"sharingRatio,omitempty"`
	//总收益
	Profit string `protobuf:"bytes,6,opt,name=profit,proto3" json:"profit,omitempty"`
	//已结算金额
	SettledAmount string `protobuf:"bytes,7,opt,name=settledAmount,proto3" json:"settledAmount,omitempty"`
	//未结算金额
	UnsettledAmount string `protobuf:"bytes,8,opt,name=unsettledAmount,proto3" json:"unsettledAmount,omitempty"`
	//结算申请数量
	SettlementCount int64 `protobuf:"varint,11,opt,name=settlementCount,proto3" json:"settlementCount,omitempty"`
}

func (x *LabelPage) Reset() {
	*x = LabelPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelPage) ProtoMessage() {}

func (x *LabelPage) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelPage.ProtoReflect.Descriptor instead.
func (*LabelPage) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{48}
}

func (x *LabelPage) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *LabelPage) GetBmxServerNum() int32 {
	if x != nil {
		return x.BmxServerNum
	}
	return 0
}

func (x *LabelPage) GetDeviceNum() int32 {
	if x != nil {
		return x.DeviceNum
	}
	return 0
}

func (x *LabelPage) GetTotalPrice() string {
	if x != nil {
		return x.TotalPrice
	}
	return ""
}

func (x *LabelPage) GetSharingRatio() string {
	if x != nil {
		return x.SharingRatio
	}
	return ""
}

func (x *LabelPage) GetProfit() string {
	if x != nil {
		return x.Profit
	}
	return ""
}

func (x *LabelPage) GetSettledAmount() string {
	if x != nil {
		return x.SettledAmount
	}
	return ""
}

func (x *LabelPage) GetUnsettledAmount() string {
	if x != nil {
		return x.UnsettledAmount
	}
	return ""
}

func (x *LabelPage) GetSettlementCount() int64 {
	if x != nil {
		return x.SettlementCount
	}
	return 0
}

// 查询Device请求对象
type QueryDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//页号
	PageNum int64 `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	//页大小
	PageSize int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	//筛选参数
	Data *Device `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryDeviceRequest) Reset() {
	*x = QueryDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDeviceRequest) ProtoMessage() {}

func (x *QueryDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDeviceRequest.ProtoReflect.Descriptor instead.
func (*QueryDeviceRequest) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{49}
}

func (x *QueryDeviceRequest) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryDeviceRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryDeviceRequest) GetData() *Device {
	if x != nil {
		return x.Data
	}
	return nil
}

// 查询Device响应对象
type QueryDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//执行成功返回数据
	Data *QueryDevice `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryDeviceResponse) Reset() {
	*x = QueryDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDeviceResponse) ProtoMessage() {}

func (x *QueryDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDeviceResponse.ProtoReflect.Descriptor instead.
func (*QueryDeviceResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{50}
}

func (x *QueryDeviceResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryDeviceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryDeviceResponse) GetData() *QueryDevice {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总的记录数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 每页显示的大小
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// 当前页
	Current int64 `protobuf:"varint,3,opt,name=current,proto3" json:"current,omitempty"`
	//执行成功返回数据
	Rows []*DeviceResponse `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *QueryDevice) Reset() {
	*x = QueryDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDevice) ProtoMessage() {}

func (x *QueryDevice) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDevice.ProtoReflect.Descriptor instead.
func (*QueryDevice) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{51}
}

func (x *QueryDevice) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryDevice) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *QueryDevice) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *QueryDevice) GetRows() []*DeviceResponse {
	if x != nil {
		return x.Rows
	}
	return nil
}

type DeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备ID，主键
	DeviceID string `protobuf:"bytes,1,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	// Bmx服务器ID
	ServerID string `protobuf:"bytes,2,opt,name=serverID,proto3" json:"serverID,omitempty"`
	// Mac地址
	MacAddr string `protobuf:"bytes,3,opt,name=macAddr,proto3" json:"macAddr,omitempty"`
	// GPU类型
	GpuType string `protobuf:"bytes,4,opt,name=gpuType,proto3" json:"gpuType,omitempty"`
	// GPU个数
	GpuNum string `protobuf:"bytes,5,opt,name=gpuNum,proto3" json:"gpuNum,omitempty"`
	// GPU内存
	GpuMem string `protobuf:"bytes,6,opt,name=gpuMem,proto3" json:"gpuMem,omitempty"`
	// Cuda版本
	CudaVer string `protobuf:"bytes,7,opt,name=cudaVer,proto3" json:"cudaVer,omitempty"`
	// CPU类型
	CpuType string `protobuf:"bytes,8,opt,name=cpuType,proto3" json:"cpuType,omitempty"`
	// CPU频率
	CpuFreq string `protobuf:"bytes,9,opt,name=cpuFreq,proto3" json:"cpuFreq,omitempty"`
	// CPU个数
	CpuNum string `protobuf:"bytes,10,opt,name=cpuNum,proto3" json:"cpuNum,omitempty"`
	// CPU内存
	CpuMem string `protobuf:"bytes,11,opt,name=cpuMem,proto3" json:"cpuMem,omitempty"`
	// 设备状态
	DeviceStatus string `protobuf:"bytes,12,opt,name=deviceStatus,proto3" json:"deviceStatus,omitempty"`
	// 产品ID
	ProductID string `protobuf:"bytes,13,opt,name=productID,proto3" json:"productID,omitempty"`
	// 使用时间
	TimeOfUsed string `protobuf:"bytes,14,opt,name=timeOfUsed,proto3" json:"timeOfUsed,omitempty"`
	// 价格
	Price string `protobuf:"bytes,15,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *DeviceResponse) Reset() {
	*x = DeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceResponse) ProtoMessage() {}

func (x *DeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceResponse.ProtoReflect.Descriptor instead.
func (*DeviceResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{52}
}

func (x *DeviceResponse) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *DeviceResponse) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *DeviceResponse) GetMacAddr() string {
	if x != nil {
		return x.MacAddr
	}
	return ""
}

func (x *DeviceResponse) GetGpuType() string {
	if x != nil {
		return x.GpuType
	}
	return ""
}

func (x *DeviceResponse) GetGpuNum() string {
	if x != nil {
		return x.GpuNum
	}
	return ""
}

func (x *DeviceResponse) GetGpuMem() string {
	if x != nil {
		return x.GpuMem
	}
	return ""
}

func (x *DeviceResponse) GetCudaVer() string {
	if x != nil {
		return x.CudaVer
	}
	return ""
}

func (x *DeviceResponse) GetCpuType() string {
	if x != nil {
		return x.CpuType
	}
	return ""
}

func (x *DeviceResponse) GetCpuFreq() string {
	if x != nil {
		return x.CpuFreq
	}
	return ""
}

func (x *DeviceResponse) GetCpuNum() string {
	if x != nil {
		return x.CpuNum
	}
	return ""
}

func (x *DeviceResponse) GetCpuMem() string {
	if x != nil {
		return x.CpuMem
	}
	return ""
}

func (x *DeviceResponse) GetDeviceStatus() string {
	if x != nil {
		return x.DeviceStatus
	}
	return ""
}

func (x *DeviceResponse) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceResponse) GetTimeOfUsed() string {
	if x != nil {
		return x.TimeOfUsed
	}
	return ""
}

func (x *DeviceResponse) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备ID，主键
	DeviceID string `protobuf:"bytes,1,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	// Bmx服务器ID
	ServerID string `protobuf:"bytes,2,opt,name=serverID,proto3" json:"serverID,omitempty"`
	// Mac地址
	MacAddr string `protobuf:"bytes,3,opt,name=macAddr,proto3" json:"macAddr,omitempty"`
	// GPU类型
	GpuType string `protobuf:"bytes,4,opt,name=gpuType,proto3" json:"gpuType,omitempty"`
	// GPU个数
	GpuNum string `protobuf:"bytes,5,opt,name=gpuNum,proto3" json:"gpuNum,omitempty"`
	// GPU内存
	GpuMem string `protobuf:"bytes,6,opt,name=gpuMem,proto3" json:"gpuMem,omitempty"`
	// Cuda版本
	CudaVer string `protobuf:"bytes,7,opt,name=cudaVer,proto3" json:"cudaVer,omitempty"`
	// CPU类型
	CpuType string `protobuf:"bytes,8,opt,name=cpuType,proto3" json:"cpuType,omitempty"`
	// CPU频率
	CpuFreq string `protobuf:"bytes,9,opt,name=cpuFreq,proto3" json:"cpuFreq,omitempty"`
	// CPU个数
	CpuNum string `protobuf:"bytes,10,opt,name=cpuNum,proto3" json:"cpuNum,omitempty"`
	// CPU内存
	CpuMem string `protobuf:"bytes,11,opt,name=cpuMem,proto3" json:"cpuMem,omitempty"`
	// 设备状态
	DeviceStatus string `protobuf:"bytes,12,opt,name=deviceStatus,proto3" json:"deviceStatus,omitempty"`
	// 产品ID
	ProductID string `protobuf:"bytes,13,opt,name=productID,proto3" json:"productID,omitempty"`
	// 使用时间
	TimeOfUsed string `protobuf:"bytes,14,opt,name=timeOfUsed,proto3" json:"timeOfUsed,omitempty"`
	// 价格
	Price string `protobuf:"bytes,15,opt,name=price,proto3" json:"price,omitempty"`
	//客户标签
	Label string `protobuf:"bytes,16,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{53}
}

func (x *Device) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *Device) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *Device) GetMacAddr() string {
	if x != nil {
		return x.MacAddr
	}
	return ""
}

func (x *Device) GetGpuType() string {
	if x != nil {
		return x.GpuType
	}
	return ""
}

func (x *Device) GetGpuNum() string {
	if x != nil {
		return x.GpuNum
	}
	return ""
}

func (x *Device) GetGpuMem() string {
	if x != nil {
		return x.GpuMem
	}
	return ""
}

func (x *Device) GetCudaVer() string {
	if x != nil {
		return x.CudaVer
	}
	return ""
}

func (x *Device) GetCpuType() string {
	if x != nil {
		return x.CpuType
	}
	return ""
}

func (x *Device) GetCpuFreq() string {
	if x != nil {
		return x.CpuFreq
	}
	return ""
}

func (x *Device) GetCpuNum() string {
	if x != nil {
		return x.CpuNum
	}
	return ""
}

func (x *Device) GetCpuMem() string {
	if x != nil {
		return x.CpuMem
	}
	return ""
}

func (x *Device) GetDeviceStatus() string {
	if x != nil {
		return x.DeviceStatus
	}
	return ""
}

func (x *Device) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *Device) GetTimeOfUsed() string {
	if x != nil {
		return x.TimeOfUsed
	}
	return ""
}

func (x *Device) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *Device) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// 查询BmxServer请求对象
type QueryBmxServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//页号
	PageNum int64 `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	//页大小
	PageSize int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	//筛选参数
	Data *BmxServer `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryBmxServerRequest) Reset() {
	*x = QueryBmxServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBmxServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBmxServerRequest) ProtoMessage() {}

func (x *QueryBmxServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBmxServerRequest.ProtoReflect.Descriptor instead.
func (*QueryBmxServerRequest) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{54}
}

func (x *QueryBmxServerRequest) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryBmxServerRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryBmxServerRequest) GetData() *BmxServer {
	if x != nil {
		return x.Data
	}
	return nil
}

// 查询BmxServer响应对象
type QueryBmxServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//执行成功返回数据
	Data *QueryBmxServer `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryBmxServerResponse) Reset() {
	*x = QueryBmxServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBmxServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBmxServerResponse) ProtoMessage() {}

func (x *QueryBmxServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBmxServerResponse.ProtoReflect.Descriptor instead.
func (*QueryBmxServerResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{55}
}

func (x *QueryBmxServerResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryBmxServerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueryBmxServerResponse) GetData() *QueryBmxServer {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryBmxServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总的记录数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 每页显示的大小
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// 当前页
	Current int64 `protobuf:"varint,3,opt,name=current,proto3" json:"current,omitempty"`
	//执行成功返回数据
	Rows []*BmxServer `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *QueryBmxServer) Reset() {
	*x = QueryBmxServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBmxServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBmxServer) ProtoMessage() {}

func (x *QueryBmxServer) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBmxServer.ProtoReflect.Descriptor instead.
func (*QueryBmxServer) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{56}
}

func (x *QueryBmxServer) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QueryBmxServer) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *QueryBmxServer) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *QueryBmxServer) GetRows() []*BmxServer {
	if x != nil {
		return x.Rows
	}
	return nil
}

type BmxServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bmx服务器ID，主键
	ServerID string `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
	// 服务器区域
	ServerArea string `protobuf:"bytes,2,opt,name=serverArea,proto3" json:"serverArea,omitempty"`
	// 设备总数
	DeviceNum int32 `protobuf:"varint,3,opt,name=deviceNum,proto3" json:"deviceNum,omitempty"`
	// 可用设备数
	DeviceReadyNum int32 `protobuf:"varint,4,opt,name=deviceReadyNum,proto3" json:"deviceReadyNum,omitempty"`
	// Bmx服务器作为客户端的ID
	ClientID string `protobuf:"bytes,5,opt,name=clientID,proto3" json:"clientID,omitempty"`
	// 系统母盘ID
	SysdiskID string `protobuf:"bytes,6,opt,name=sysdiskID,proto3" json:"sysdiskID,omitempty"`
	// 数据母盘ID
	DatadiskID string `protobuf:"bytes,7,opt,name=datadiskID,proto3" json:"datadiskID,omitempty"`
	//标签
	Label string `protobuf:"bytes,8,opt,name=label,proto3" json:"label,omitempty"`
	//价格
	Price string `protobuf:"bytes,9,opt,name=price,proto3" json:"price,omitempty"`
	//备注
	Comment string `protobuf:"bytes,10,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *BmxServer) Reset() {
	*x = BmxServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BmxServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BmxServer) ProtoMessage() {}

func (x *BmxServer) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BmxServer.ProtoReflect.Descriptor instead.
func (*BmxServer) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{57}
}

func (x *BmxServer) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

func (x *BmxServer) GetServerArea() string {
	if x != nil {
		return x.ServerArea
	}
	return ""
}

func (x *BmxServer) GetDeviceNum() int32 {
	if x != nil {
		return x.DeviceNum
	}
	return 0
}

func (x *BmxServer) GetDeviceReadyNum() int32 {
	if x != nil {
		return x.DeviceReadyNum
	}
	return 0
}

func (x *BmxServer) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *BmxServer) GetSysdiskID() string {
	if x != nil {
		return x.SysdiskID
	}
	return ""
}

func (x *BmxServer) GetDatadiskID() string {
	if x != nil {
		return x.DatadiskID
	}
	return ""
}

func (x *BmxServer) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *BmxServer) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *BmxServer) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

// 添加镜像请求对象
type DeleteImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//镜像ID
	ImageID int32 `protobuf:"varint,1,opt,name=imageID,proto3" json:"imageID,omitempty"`
}

func (x *DeleteImageRequest) Reset() {
	*x = DeleteImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteImageRequest) ProtoMessage() {}

func (x *DeleteImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteImageRequest.ProtoReflect.Descriptor instead.
func (*DeleteImageRequest) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{58}
}

func (x *DeleteImageRequest) GetImageID() int32 {
	if x != nil {
		return x.ImageID
	}
	return 0
}

// 添加镜像响应对象
type DeleteImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteImageResponse) Reset() {
	*x = DeleteImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteImageResponse) ProtoMessage() {}

func (x *DeleteImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteImageResponse.ProtoReflect.Descriptor instead.
func (*DeleteImageResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{59}
}

func (x *DeleteImageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteImageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 添加镜像响应对象
type AddImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AddImageResponse) Reset() {
	*x = AddImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddImageResponse) ProtoMessage() {}

func (x *AddImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddImageResponse.ProtoReflect.Descriptor instead.
func (*AddImageResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{60}
}

func (x *AddImageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddImageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 更新镜像响应对象
type UpdateImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateImageResponse) Reset() {
	*x = UpdateImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateImageResponse) ProtoMessage() {}

func (x *UpdateImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateImageResponse.ProtoReflect.Descriptor instead.
func (*UpdateImageResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{61}
}

func (x *UpdateImageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateImageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 获取镜像列表请求对象
type SelectImageListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//页号
	PageNum int64 `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	//页大小
	PageSize int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	//镜像id
	ImageId string `protobuf:"bytes,3,opt,name=imageId,proto3" json:"imageId,omitempty"`
	//镜像类型
	ImageType string `protobuf:"bytes,4,opt,name=imageType,proto3" json:"imageType,omitempty"`
}

func (x *SelectImageListRequest) Reset() {
	*x = SelectImageListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectImageListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectImageListRequest) ProtoMessage() {}

func (x *SelectImageListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectImageListRequest.ProtoReflect.Descriptor instead.
func (*SelectImageListRequest) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{62}
}

func (x *SelectImageListRequest) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *SelectImageListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SelectImageListRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *SelectImageListRequest) GetImageType() string {
	if x != nil {
		return x.ImageType
	}
	return ""
}

// 获取镜像列表响应对象
type SelectImageListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//执行成功返回数据
	Data *SelectImageList `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SelectImageListResponse) Reset() {
	*x = SelectImageListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectImageListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectImageListResponse) ProtoMessage() {}

func (x *SelectImageListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectImageListResponse.ProtoReflect.Descriptor instead.
func (*SelectImageListResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{63}
}

func (x *SelectImageListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SelectImageListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SelectImageListResponse) GetData() *SelectImageList {
	if x != nil {
		return x.Data
	}
	return nil
}

type SelectImageList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总的记录数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 每页显示的大小
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// 当前页
	Current int64 `protobuf:"varint,3,opt,name=current,proto3" json:"current,omitempty"`
	//执行成功返回数据
	Rows []*Image `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *SelectImageList) Reset() {
	*x = SelectImageList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectImageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectImageList) ProtoMessage() {}

func (x *SelectImageList) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectImageList.ProtoReflect.Descriptor instead.
func (*SelectImageList) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{64}
}

func (x *SelectImageList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SelectImageList) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SelectImageList) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *SelectImageList) GetRows() []*Image {
	if x != nil {
		return x.Rows
	}
	return nil
}

// 获取容器实例信息请求对象
type GetUserInstanceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//用户id
	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *GetUserInstanceInfoRequest) Reset() {
	*x = GetUserInstanceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInstanceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInstanceInfoRequest) ProtoMessage() {}

func (x *GetUserInstanceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInstanceInfoRequest.ProtoReflect.Descriptor instead.
func (*GetUserInstanceInfoRequest) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{65}
}

func (x *GetUserInstanceInfoRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 获取容器实例信息响应对象
type GetUserInstanceInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//执行成功返回数据
	Data *InstanceInfoCountResponse `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetUserInstanceInfoResponse) Reset() {
	*x = GetUserInstanceInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInstanceInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInstanceInfoResponse) ProtoMessage() {}

func (x *GetUserInstanceInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInstanceInfoResponse.ProtoReflect.Descriptor instead.
func (*GetUserInstanceInfoResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{66}
}

func (x *GetUserInstanceInfoResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetUserInstanceInfoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetUserInstanceInfoResponse) GetData() *InstanceInfoCountResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type InstanceInfoCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//容器实例
	InstanceCount int32 `protobuf:"varint,1,opt,name=instanceCount,proto3" json:"instanceCount,omitempty"`
	//运行中
	InstanceRunCount int32 `protobuf:"varint,2,opt,name=instanceRunCount,proto3" json:"instanceRunCount,omitempty"`
	//即将到期
	ExpirationComingCount int32 `protobuf:"varint,3,opt,name=expirationComingCount,proto3" json:"expirationComingCount,omitempty"`
	//即将释放
	ComingSoonCount int32 `protobuf:"varint,4,opt,name=comingSoonCount,proto3" json:"comingSoonCount,omitempty"`
}

func (x *InstanceInfoCountResponse) Reset() {
	*x = InstanceInfoCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceInfoCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceInfoCountResponse) ProtoMessage() {}

func (x *InstanceInfoCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceInfoCountResponse.ProtoReflect.Descriptor instead.
func (*InstanceInfoCountResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{67}
}

func (x *InstanceInfoCountResponse) GetInstanceCount() int32 {
	if x != nil {
		return x.InstanceCount
	}
	return 0
}

func (x *InstanceInfoCountResponse) GetInstanceRunCount() int32 {
	if x != nil {
		return x.InstanceRunCount
	}
	return 0
}

func (x *InstanceInfoCountResponse) GetExpirationComingCount() int32 {
	if x != nil {
		return x.ExpirationComingCount
	}
	return 0
}

func (x *InstanceInfoCountResponse) GetComingSoonCount() int32 {
	if x != nil {
		return x.ComingSoonCount
	}
	return 0
}

// 获取镜像列表请求对象
type GetImageListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GetImageListRequest) Reset() {
	*x = GetImageListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImageListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageListRequest) ProtoMessage() {}

func (x *GetImageListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageListRequest.ProtoReflect.Descriptor instead.
func (*GetImageListRequest) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{68}
}

func (x *GetImageListRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// 获取镜像列表响应对象
type GetImageListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//执行成功返回数据
	Data []*Image `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetImageListResponse) Reset() {
	*x = GetImageListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImageListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageListResponse) ProtoMessage() {}

func (x *GetImageListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageListResponse.ProtoReflect.Descriptor instead.
func (*GetImageListResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{69}
}

func (x *GetImageListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetImageListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetImageListResponse) GetData() []*Image {
	if x != nil {
		return x.Data
	}
	return nil
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//镜像ID
	ImageID int32 `protobuf:"varint,1,opt,name=imageID,proto3" json:"imageID,omitempty"`
	//镜像类型
	ImageType string `protobuf:"bytes,2,opt,name=imageType,proto3" json:"imageType,omitempty"`
	//镜像名称
	ImageName string `protobuf:"bytes,3,opt,name=imageName,proto3" json:"imageName,omitempty"`
	//镜像描述
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	//镜像路径
	ImagePath string `protobuf:"bytes,5,opt,name=imagePath,proto3" json:"imagePath,omitempty"`
	//镜像社区讨论页
	DiscussPage string `protobuf:"bytes,6,opt,name=discussPage,proto3" json:"discussPage,omitempty"`
	//下载次数
	DownloadTime string `protobuf:"bytes,7,opt,name=downloadTime,proto3" json:"downloadTime,omitempty"`
	//作者
	Author string `protobuf:"bytes,8,opt,name=author,proto3" json:"author,omitempty"`
	//作者社区页
	AuthorPage string `protobuf:"bytes,9,opt,name=authorPage,proto3" json:"authorPage,omitempty"`
	//镜像大小
	ImageSize string `protobuf:"bytes,10,opt,name=imageSize,proto3" json:"imageSize,omitempty"`
	//框架
	Framework string `protobuf:"bytes,11,opt,name=framework,proto3" json:"framework,omitempty"`
	//CUDA版本
	CudaVersion string `protobuf:"bytes,12,opt,name=cudaVersion,proto3" json:"cudaVersion,omitempty"`
	//新加字段
	CmdRun string `protobuf:"bytes,13,opt,name=cmdRun,proto3" json:"cmdRun,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{70}
}

func (x *Image) GetImageID() int32 {
	if x != nil {
		return x.ImageID
	}
	return 0
}

func (x *Image) GetImageType() string {
	if x != nil {
		return x.ImageType
	}
	return ""
}

func (x *Image) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *Image) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Image) GetImagePath() string {
	if x != nil {
		return x.ImagePath
	}
	return ""
}

func (x *Image) GetDiscussPage() string {
	if x != nil {
		return x.DiscussPage
	}
	return ""
}

func (x *Image) GetDownloadTime() string {
	if x != nil {
		return x.DownloadTime
	}
	return ""
}

func (x *Image) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Image) GetAuthorPage() string {
	if x != nil {
		return x.AuthorPage
	}
	return ""
}

func (x *Image) GetImageSize() string {
	if x != nil {
		return x.ImageSize
	}
	return ""
}

func (x *Image) GetFramework() string {
	if x != nil {
		return x.Framework
	}
	return ""
}

func (x *Image) GetCudaVersion() string {
	if x != nil {
		return x.CudaVersion
	}
	return ""
}

func (x *Image) GetCmdRun() string {
	if x != nil {
		return x.CmdRun
	}
	return ""
}

// 获取用户实例信息请求对象
type SelectUserInstanceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//用户id
	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	//页号
	PageNum int64 `protobuf:"varint,2,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	//页大小
	PageSize int64 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	//实例id
	InstanceId string `protobuf:"bytes,4,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
}

func (x *SelectUserInstanceListRequest) Reset() {
	*x = SelectUserInstanceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectUserInstanceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectUserInstanceListRequest) ProtoMessage() {}

func (x *SelectUserInstanceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectUserInstanceListRequest.ProtoReflect.Descriptor instead.
func (*SelectUserInstanceListRequest) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{71}
}

func (x *SelectUserInstanceListRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SelectUserInstanceListRequest) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *SelectUserInstanceListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SelectUserInstanceListRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

// 获取用户实例信息响应对象
type SelectUserInstanceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//响应码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//实例表响应对像
	Data *SelectUserInstancePageResponse `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SelectUserInstanceListResponse) Reset() {
	*x = SelectUserInstanceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectUserInstanceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectUserInstanceListResponse) ProtoMessage() {}

func (x *SelectUserInstanceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectUserInstanceListResponse.ProtoReflect.Descriptor instead.
func (*SelectUserInstanceListResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{72}
}

func (x *SelectUserInstanceListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SelectUserInstanceListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SelectUserInstanceListResponse) GetData() *SelectUserInstancePageResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

// 获取用户实例分页对象
type SelectUserInstancePageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总的记录数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 每页显示的大小
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// 当前页
	Current int64 `protobuf:"varint,3,opt,name=current,proto3" json:"current,omitempty"`
	// 查询数据列表，使用 bytes 类型表示任意数据
	Rows []*InstanceTableResponse `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *SelectUserInstancePageResponse) Reset() {
	*x = SelectUserInstancePageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectUserInstancePageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectUserInstancePageResponse) ProtoMessage() {}

func (x *SelectUserInstancePageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectUserInstancePageResponse.ProtoReflect.Descriptor instead.
func (*SelectUserInstancePageResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{73}
}

func (x *SelectUserInstancePageResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SelectUserInstancePageResponse) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SelectUserInstancePageResponse) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *SelectUserInstancePageResponse) GetRows() []*InstanceTableResponse {
	if x != nil {
		return x.Rows
	}
	return nil
}

// 实例表响应对象
type InstanceTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户实例ID
	InstanceId string `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	// 节点ID
	NodeId string `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	// 产品ID
	ProductId string `protobuf:"bytes,3,opt,name=productId,proto3" json:"productId,omitempty"`
	// 镜像名称
	ImageName string `protobuf:"bytes,4,opt,name=imageName,proto3" json:"imageName,omitempty"`
	// 实例运行状态: On, Off, invalid, Re-Create, Fail
	InstanceStatus string `protobuf:"bytes,5,opt,name=instanceStatus,proto3" json:"instanceStatus,omitempty"`
	// 实例配置Yaml路径
	YamlPath string `protobuf:"bytes,6,opt,name=yamlPath,proto3" json:"yamlPath,omitempty"`
	// 系统盘挂载路径
	SysdiskPath string `protobuf:"bytes,7,opt,name=sysdiskPath,proto3" json:"sysdiskPath,omitempty"`
	// 数据盘挂载路径
	DatadiskPath string `protobuf:"bytes,8,opt,name=datadiskPath,proto3" json:"datadiskPath,omitempty"`
	// 系统盘大小
	SysdiskSize string `protobuf:"bytes,9,opt,name=sysdiskSize,proto3" json:"sysdiskSize,omitempty"`
	// 数据盘大小
	DatadiskSize string `protobuf:"bytes,10,opt,name=datadiskSize,proto3" json:"datadiskSize,omitempty"`
	// 系统盘ID
	SysvolumeId string `protobuf:"bytes,11,opt,name=sysvolumeId,proto3" json:"sysvolumeId,omitempty"`
	// 用户实例访问密码
	Password string `protobuf:"bytes,12,opt,name=password,proto3" json:"password,omitempty"`
	// FRP服务器
	FrpServer string `protobuf:"bytes,13,opt,name=frpServer,proto3" json:"frpServer,omitempty"`
	// FRP服务器的UUID
	FrpUuid string `protobuf:"bytes,14,opt,name=frpUuid,proto3" json:"frpUuid,omitempty"`
	// SSH访问实例的端口
	SshPort string `protobuf:"bytes,15,opt,name=sshPort,proto3" json:"sshPort,omitempty"`
	// Jupter端口号
	JupyterPort string `protobuf:"bytes,16,opt,name=jupyterPort,proto3" json:"jupyterPort,omitempty"`
	// 系统盘信息
	SysAttachment string `protobuf:"bytes,17,opt,name=sysAttachment,proto3" json:"sysAttachment,omitempty"`
	// 数据盘ID
	DatavolumeId string `protobuf:"bytes,18,opt,name=datavolumeId,proto3" json:"datavolumeId,omitempty"`
	// 数据盘信息
	DataAttachment string `protobuf:"bytes,19,opt,name=dataAttachment,proto3" json:"dataAttachment,omitempty"`
	// 用户实例访问令牌
	Token string `protobuf:"bytes,20,opt,name=token,proto3" json:"token,omitempty"`
	// 启动时间
	StartTime string `protobuf:"bytes,21,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// 停止时间
	StopTime string `protobuf:"bytes,22,opt,name=stopTime,proto3" json:"stopTime,omitempty"`
	// 原因
	Reason string `protobuf:"bytes,23,opt,name=reason,proto3" json:"reason,omitempty"`
	// 自定释放时间
	AutoReleaseTime string `protobuf:"bytes,24,opt,name=autoReleaseTime,proto3" json:"autoReleaseTime,omitempty"`
	//用户id
	UserId string `protobuf:"bytes,25,opt,name=userId,proto3" json:"userId,omitempty"`
	//Jupyter的url
	JupyterUrl string `protobuf:"bytes,26,opt,name=jupyterUrl,proto3" json:"jupyterUrl,omitempty"`
	//规格型号
	SpecificationAndModel string `protobuf:"bytes,27,opt,name=specificationAndModel,proto3" json:"specificationAndModel,omitempty"`
	//付费方式 [DAY日 WEEK 周 MONTH 月 AMOUNT 按量]
	PaymentMethod string `protobuf:"bytes,28,opt,name=paymentMethod,proto3" json:"paymentMethod,omitempty"`
	//进度条
	ProgressBar int64 `protobuf:"varint,29,opt,name=progressBar,proto3" json:"progressBar,omitempty"`
	//实例名称
	InstanceName string `protobuf:"bytes,30,opt,name=instanceName,proto3" json:"instanceName,omitempty"`
}

func (x *InstanceTableResponse) Reset() {
	*x = InstanceTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTableResponse) ProtoMessage() {}

func (x *InstanceTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTableResponse.ProtoReflect.Descriptor instead.
func (*InstanceTableResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{74}
}

func (x *InstanceTableResponse) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *InstanceTableResponse) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *InstanceTableResponse) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *InstanceTableResponse) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *InstanceTableResponse) GetInstanceStatus() string {
	if x != nil {
		return x.InstanceStatus
	}
	return ""
}

func (x *InstanceTableResponse) GetYamlPath() string {
	if x != nil {
		return x.YamlPath
	}
	return ""
}

func (x *InstanceTableResponse) GetSysdiskPath() string {
	if x != nil {
		return x.SysdiskPath
	}
	return ""
}

func (x *InstanceTableResponse) GetDatadiskPath() string {
	if x != nil {
		return x.DatadiskPath
	}
	return ""
}

func (x *InstanceTableResponse) GetSysdiskSize() string {
	if x != nil {
		return x.SysdiskSize
	}
	return ""
}

func (x *InstanceTableResponse) GetDatadiskSize() string {
	if x != nil {
		return x.DatadiskSize
	}
	return ""
}

func (x *InstanceTableResponse) GetSysvolumeId() string {
	if x != nil {
		return x.SysvolumeId
	}
	return ""
}

func (x *InstanceTableResponse) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *InstanceTableResponse) GetFrpServer() string {
	if x != nil {
		return x.FrpServer
	}
	return ""
}

func (x *InstanceTableResponse) GetFrpUuid() string {
	if x != nil {
		return x.FrpUuid
	}
	return ""
}

func (x *InstanceTableResponse) GetSshPort() string {
	if x != nil {
		return x.SshPort
	}
	return ""
}

func (x *InstanceTableResponse) GetJupyterPort() string {
	if x != nil {
		return x.JupyterPort
	}
	return ""
}

func (x *InstanceTableResponse) GetSysAttachment() string {
	if x != nil {
		return x.SysAttachment
	}
	return ""
}

func (x *InstanceTableResponse) GetDatavolumeId() string {
	if x != nil {
		return x.DatavolumeId
	}
	return ""
}

func (x *InstanceTableResponse) GetDataAttachment() string {
	if x != nil {
		return x.DataAttachment
	}
	return ""
}

func (x *InstanceTableResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *InstanceTableResponse) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *InstanceTableResponse) GetStopTime() string {
	if x != nil {
		return x.StopTime
	}
	return ""
}

func (x *InstanceTableResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *InstanceTableResponse) GetAutoReleaseTime() string {
	if x != nil {
		return x.AutoReleaseTime
	}
	return ""
}

func (x *InstanceTableResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *InstanceTableResponse) GetJupyterUrl() string {
	if x != nil {
		return x.JupyterUrl
	}
	return ""
}

func (x *InstanceTableResponse) GetSpecificationAndModel() string {
	if x != nil {
		return x.SpecificationAndModel
	}
	return ""
}

func (x *InstanceTableResponse) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *InstanceTableResponse) GetProgressBar() int64 {
	if x != nil {
		return x.ProgressBar
	}
	return 0
}

func (x *InstanceTableResponse) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

type DeviceDefaultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//执行成功返回true
	Data bool `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeviceDefaultResponse) Reset() {
	*x = DeviceDefaultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDefaultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDefaultResponse) ProtoMessage() {}

func (x *DeviceDefaultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDefaultResponse.ProtoReflect.Descriptor instead.
func (*DeviceDefaultResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{75}
}

func (x *DeviceDefaultResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeviceDefaultResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeviceDefaultResponse) GetData() bool {
	if x != nil {
		return x.Data
	}
	return false
}

// 释放实例请求对象
type ReleaseInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//实例id
	InstanceId string `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	//用户id
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *ReleaseInstanceRequest) Reset() {
	*x = ReleaseInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseInstanceRequest) ProtoMessage() {}

func (x *ReleaseInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseInstanceRequest.ProtoReflect.Descriptor instead.
func (*ReleaseInstanceRequest) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{76}
}

func (x *ReleaseInstanceRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ReleaseInstanceRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 释放实例响应对象
type ReleaseInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//执行成功返回true
	Data bool `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ReleaseInstanceResponse) Reset() {
	*x = ReleaseInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseInstanceResponse) ProtoMessage() {}

func (x *ReleaseInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseInstanceResponse.ProtoReflect.Descriptor instead.
func (*ReleaseInstanceResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{77}
}

func (x *ReleaseInstanceResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ReleaseInstanceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ReleaseInstanceResponse) GetData() bool {
	if x != nil {
		return x.Data
	}
	return false
}

// 启动实例请求对象
type StartInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//实例id
	InstanceId string `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	//用户id
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *StartInstanceRequest) Reset() {
	*x = StartInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartInstanceRequest) ProtoMessage() {}

func (x *StartInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartInstanceRequest.ProtoReflect.Descriptor instead.
func (*StartInstanceRequest) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{78}
}

func (x *StartInstanceRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *StartInstanceRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 启动实例响应对象
type StartInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartInstanceResponse) Reset() {
	*x = StartInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartInstanceResponse) ProtoMessage() {}

func (x *StartInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartInstanceResponse.ProtoReflect.Descriptor instead.
func (*StartInstanceResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{79}
}

// 关闭实例请求对象
type StopInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//实例id
	InstanceId string `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	//用户id
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *StopInstanceRequest) Reset() {
	*x = StopInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopInstanceRequest) ProtoMessage() {}

func (x *StopInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopInstanceRequest.ProtoReflect.Descriptor instead.
func (*StopInstanceRequest) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{80}
}

func (x *StopInstanceRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *StopInstanceRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 关闭实例响应对象
type StopInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//200代表正常
	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//执行成功返回true
	Data bool `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *StopInstanceResponse) Reset() {
	*x = StopInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopInstanceResponse) ProtoMessage() {}

func (x *StopInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopInstanceResponse.ProtoReflect.Descriptor instead.
func (*StopInstanceResponse) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{81}
}

func (x *StopInstanceResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *StopInstanceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StopInstanceResponse) GetData() bool {
	if x != nil {
		return x.Data
	}
	return false
}

var File_device_proto protoreflect.FileDescriptor

var file_device_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x37, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x56, 0x69,
	0x73, 0x69, 0x74, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x22, 0x70, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x73, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x56, 0x69, 0x73,
	0x69, 0x74, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x41, 0x0a, 0x0f, 0x56, 0x69, 0x73, 0x69, 0x74, 0x73, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x70, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x76, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x76, 0x44, 0x61, 0x74, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x6d, 0x78, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x70, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x42, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x42,
	0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x23, 0x0a, 0x0f, 0x42, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x50, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x42, 0x6d, 0x78, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x6a, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x42, 0x6d, 0x78, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x6d, 0x78, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf6, 0x01, 0x0a, 0x0c, 0x42, 0x6d, 0x78, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4e, 0x75, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x43, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x58, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22,
	0x60, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x42, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x42, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x6c, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x42, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x75, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0xa8, 0x07, 0x0a, 0x08, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x79, 0x61, 0x6d, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x79, 0x61, 0x6d, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x64, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x64, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x64, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x64, 0x69, 0x73,
	0x6b, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x64, 0x69, 0x73, 0x6b,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x64,
	0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x64,
	0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x61, 0x74, 0x61, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x79, 0x73, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x79, 0x73, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72,
	0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x70, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x72, 0x70, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x73, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x73, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6a,
	0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x79, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x61, 0x74, 0x61, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x25, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x69,
	0x64, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x12,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x69, 0x64, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x89, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x7b, 0x0a, 0x1e,
	0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x52, 0x65, 0x6e,
	0x65, 0x77, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x94, 0x02, 0x0a, 0x16, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x3e, 0x0a, 0x1a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x22, 0x7d, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xff, 0x03, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x64,
	0x69, 0x73, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x49,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x42, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x22, 0xec, 0x02, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x58, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x21, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6d, 0x78, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6d,
	0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x22, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x35, 0x0a,
	0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42,
	0x79, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69,
	0x73, 0x6b, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x6d, 0x78,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xdb, 0x02, 0x0a, 0x1f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x4f, 0x66, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x79, 0x73,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x7e, 0x0a, 0x20, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x4f, 0x6e, 0x4f, 0x66, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x87, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x8d, 0x07, 0x0a,
	0x13, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x79, 0x61, 0x6d, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x79, 0x61, 0x6d, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x79, 0x73, 0x64, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x64, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x64, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x64, 0x69, 0x73, 0x6b, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x64, 0x69, 0x73, 0x6b,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x64, 0x69, 0x73, 0x6b,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x79, 0x73, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x70, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x72, 0x70, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x73, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x73, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6a, 0x75, 0x70, 0x79,
	0x74, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6a,
	0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x79,
	0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61,
	0x74, 0x61, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x75, 0x74, 0x6f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x22, 0x92, 0x01, 0x0a,
	0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x79, 0x73,
	0x44, 0x69, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x79,
	0x73, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x44,
	0x69, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x4d, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6d, 0x78, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x33, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x43, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x44, 0x69, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2f, 0x0a, 0x15, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x46, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x36, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x44, 0x69, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x46, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x69, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x72, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x9a, 0x03, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x67, 0x70, 0x75, 0x44, 0x72, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x67, 0x70, 0x75, 0x44, 0x72, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x4f, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x6f, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x8c, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x22, 0xb9, 0x02, 0x0a, 0x09, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6d, 0x78, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62,
	0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x75,
	0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x67, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x65, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x76, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0xa2, 0x03, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x70, 0x75, 0x4e, 0x75, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x70, 0x75, 0x4e, 0x75, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x67, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x64, 0x61, 0x56, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x64, 0x61, 0x56, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x70,
	0x75, 0x46, 0x72, 0x65, 0x71, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x70, 0x75,
	0x46, 0x72, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x70, 0x75, 0x4e, 0x75, 0x6d, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x70, 0x75, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x70,
	0x75, 0x4d, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66,
	0x55, 0x73, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x4f, 0x66, 0x55, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0xb0, 0x03, 0x0a,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x70, 0x75,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x70, 0x75, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x70, 0x75, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x70, 0x75, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x67,
	0x70, 0x75, 0x4d, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x70, 0x75,
	0x4d, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x64, 0x61, 0x56, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x64, 0x61, 0x56, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x70, 0x75, 0x46, 0x72,
	0x65, 0x71, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x70, 0x75, 0x46, 0x72, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x70, 0x75, 0x4e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x70, 0x75, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x70, 0x75,
	0x4d, 0x65, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x70, 0x75, 0x4d, 0x65,
	0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x55, 0x73, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x55,
	0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22,
	0x6d, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x42,
	0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6b,
	0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x6d, 0x78, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x74, 0x0a, 0x0e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x42, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x42, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x22, 0xad, 0x02, 0x0a, 0x09, 0x42, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4e, 0x75,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x79, 0x73, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x79, 0x73, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x44, 0x22, 0x43, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x40, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x43, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x86, 0x01,
	0x0a, 0x16, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6d, 0x0a, 0x17, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x71, 0x0a, 0x0f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x34, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7b,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcd, 0x01, 0x0a, 0x19,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x53, 0x6f, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x29, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x60, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x91, 0x03, 0x0a, 0x05, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x63,
	0x75, 0x73, 0x73, 0x50, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x50, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x64, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x64, 0x61, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6d, 0x64, 0x52, 0x75, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6d, 0x64, 0x52, 0x75, 0x6e, 0x22, 0x8d, 0x01, 0x0a,
	0x1d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a,
	0x1e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x90, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0xeb, 0x07, 0x0a, 0x15, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x79,
	0x61, 0x6d, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x79,
	0x61, 0x6d, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x64, 0x69,
	0x73, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x79,
	0x73, 0x64, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x64, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x61, 0x74, 0x61, 0x64, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x79, 0x73, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x64, 0x69, 0x73, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x72, 0x70, 0x55, 0x75, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x72, 0x70, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x73, 0x68,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x73, 0x68, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x50, 0x6f,
	0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6a, 0x75, 0x70, 0x79, 0x74, 0x65,
	0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x79,
	0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64,
	0x61, 0x74, 0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x55, 0x72,
	0x6c, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x72, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x50,
	0x0a, 0x16, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x5b, 0x0a, 0x17, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4e, 0x0a,
	0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x17, 0x0a,
	0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x98, 0x14, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x41, 0x0a, 0x10, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x15, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x52, 0x70, 0x63, 0x53, 0x74, 0x6f, 0x70, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x52, 0x70, 0x63, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x2e, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x15,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x0c, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x2e,
	0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x2e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x59, 0x0a, 0x16, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1e, 0x2e, 0x52, 0x65, 0x6e,
	0x65, 0x77, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x52, 0x65, 0x6e,
	0x65, 0x77, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x16, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e,
	0x53, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x0f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x1a, 0x14, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x11, 0x2e, 0x41, 0x64, 0x64,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x13, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x42, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x1d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6d, 0x78, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6d, 0x78, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x13, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x10,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x18, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x44, 0x69, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x41, 0x64, 0x64, 0x44,
	0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x18, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x4f, 0x66, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x20, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x4f, 0x6e, 0x4f, 0x66, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x4f, 0x6e, 0x4f, 0x66, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x6b, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44,
	0x69, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a,
	0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42,
	0x79, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1c, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x6d, 0x78,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x6d, 0x78, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x42, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5c, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x1f, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x42, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x69, 0x64, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x12, 0x12, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x69, 0x64, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x69,
	0x64, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x11, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x09, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x16, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x09, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x1a, 0x13, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x42, 0x6d, 0x78, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x42, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x1a, 0x11, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x12, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x15, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x11, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x14, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x17, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x6d, 0x78,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x6d, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6d,
	0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x6d, 0x78, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6d,
	0x78, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6d, 0x78, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x73, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x19, 0x42, 0x0b, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x08, 0x2e, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_device_proto_rawDescOnce sync.Once
	file_device_proto_rawDescData = file_device_proto_rawDesc
)

func file_device_proto_rawDescGZIP() []byte {
	file_device_proto_rawDescOnce.Do(func() {
		file_device_proto_rawDescData = protoimpl.X.CompressGZIP(file_device_proto_rawDescData)
	})
	return file_device_proto_rawDescData
}

var file_device_proto_msgTypes = make([]protoimpl.MessageInfo, 82)
var file_device_proto_goTypes = []interface{}{
	(*GetVisitsChartDataRequest)(nil),          // 0: GetVisitsChartDataRequest
	(*GetVisitsChartDataResponse)(nil),         // 1: GetVisitsChartDataResponse
	(*VisitsChartData)(nil),                    // 2: VisitsChartData
	(*GetBmxServerIdListRequest)(nil),          // 3: GetBmxServerIdListRequest
	(*GetBmxServerIdListResponse)(nil),         // 4: GetBmxServerIdListResponse
	(*BmxServerIdList)(nil),                    // 5: BmxServerIdList
	(*GetBmxChartDataRequest)(nil),             // 6: GetBmxChartDataRequest
	(*GetBmxChartDataResponse)(nil),            // 7: GetBmxChartDataResponse
	(*BmxChartData)(nil),                       // 8: BmxChartData
	(*SetInstanceNameResp)(nil),                // 9: SetInstanceNameResp
	(*SetInstanceNameReq)(nil),                 // 10: SetInstanceNameReq
	(*AddBmxServerResp)(nil),                   // 11: AddBmxServerResp
	(*QueryInstancePageResp)(nil),              // 12: QueryInstancePageResp
	(*UpdateInstanceResp)(nil),                 // 13: UpdateInstanceResp
	(*InstancePageResp)(nil),                   // 14: InstancePageResp
	(*Instance)(nil),                           // 15: Instance
	(*QueryPidExistsReq)(nil),                  // 16: QueryPidExistsReq
	(*QueryPidExistsResp)(nil),                 // 17: QueryPidExistsResp
	(*RenewalInstanceDetailsRequest)(nil),      // 18: RenewalInstanceDetailsRequest
	(*RenewalInstanceDetailsResponse)(nil),     // 19: RenewalInstanceDetailsResponse
	(*RenewalInstanceDetails)(nil),             // 20: RenewalInstanceDetails
	(*QueryDiskHistoryBasedOnResponse)(nil),    // 21: QueryDiskHistoryBasedOnResponse
	(*QueryDiskHistoryBasedOn)(nil),            // 22: QueryDiskHistoryBasedOn
	(*DiskTableRecords)(nil),                   // 23: DiskTableRecords
	(*QueryDiskHistoryBasedOnRequest)(nil),     // 24: QueryDiskHistoryBasedOnRequest
	(*BatchUpdateBmxServerDiskIdRequest)(nil),  // 25: BatchUpdateBmxServerDiskIdRequest
	(*BatchUpdateBmxServerDiskIdResponse)(nil), // 26: BatchUpdateBmxServerDiskIdResponse
	(*QueryBmxServerByDiskRequest)(nil),        // 27: QueryBmxServerByDiskRequest
	(*QueryBmxServerByDiskResponse)(nil),       // 28: QueryBmxServerByDiskResponse
	(*InstancePowerOnOffRecordRequest)(nil),    // 29: InstancePowerOnOffRecordRequest
	(*InstancePowerOnOffRecordResponse)(nil),   // 30: InstancePowerOnOffRecordResponse
	(*InstanceTableRecordPage)(nil),            // 31: InstanceTableRecordPage
	(*InstanceTableRecord)(nil),                // 32: InstanceTableRecord
	(*UpdateBmxServerDiskIdRequest)(nil),       // 33: UpdateBmxServerDiskIdRequest
	(*UpdateBmxServerDiskIdResponse)(nil),      // 34: UpdateBmxServerDiskIdResponse
	(*AddDiskInfoRequest)(nil),                 // 35: AddDiskInfoRequest
	(*AddDiskInfoResponse)(nil),                // 36: AddDiskInfoResponse
	(*DeleteDiskInfoRequest)(nil),              // 37: DeleteDiskInfoRequest
	(*DeleteDiskInfoResponse)(nil),             // 38: DeleteDiskInfoResponse
	(*UpdateDiskInfoRequest)(nil),              // 39: UpdateDiskInfoRequest
	(*UpdateDiskInfoResponse)(nil),             // 40: UpdateDiskInfoResponse
	(*QueryDiskInfoRequest)(nil),               // 41: QueryDiskInfoRequest
	(*QueryDiskInfoResponse)(nil),              // 42: QueryDiskInfoResponse
	(*QueryDiskInfo)(nil),                      // 43: QueryDiskInfo
	(*DiskInfo)(nil),                           // 44: DiskInfo
	(*QueryClientLabelRequest)(nil),            // 45: QueryClientLabelRequest
	(*QueryClientLabelResponse)(nil),           // 46: QueryClientLabelResponse
	(*QueryClientLabel)(nil),                   // 47: QueryClientLabel
	(*LabelPage)(nil),                          // 48: LabelPage
	(*QueryDeviceRequest)(nil),                 // 49: QueryDeviceRequest
	(*QueryDeviceResponse)(nil),                // 50: QueryDeviceResponse
	(*QueryDevice)(nil),                        // 51: QueryDevice
	(*DeviceResponse)(nil),                     // 52: DeviceResponse
	(*Device)(nil),                             // 53: Device
	(*QueryBmxServerRequest)(nil),              // 54: QueryBmxServerRequest
	(*QueryBmxServerResponse)(nil),             // 55: QueryBmxServerResponse
	(*QueryBmxServer)(nil),                     // 56: QueryBmxServer
	(*BmxServer)(nil),                          // 57: BmxServer
	(*DeleteImageRequest)(nil),                 // 58: DeleteImageRequest
	(*DeleteImageResponse)(nil),                // 59: DeleteImageResponse
	(*AddImageResponse)(nil),                   // 60: AddImageResponse
	(*UpdateImageResponse)(nil),                // 61: UpdateImageResponse
	(*SelectImageListRequest)(nil),             // 62: SelectImageListRequest
	(*SelectImageListResponse)(nil),            // 63: SelectImageListResponse
	(*SelectImageList)(nil),                    // 64: SelectImageList
	(*GetUserInstanceInfoRequest)(nil),         // 65: GetUserInstanceInfoRequest
	(*GetUserInstanceInfoResponse)(nil),        // 66: GetUserInstanceInfoResponse
	(*InstanceInfoCountResponse)(nil),          // 67: InstanceInfoCountResponse
	(*GetImageListRequest)(nil),                // 68: GetImageListRequest
	(*GetImageListResponse)(nil),               // 69: GetImageListResponse
	(*Image)(nil),                              // 70: Image
	(*SelectUserInstanceListRequest)(nil),      // 71: SelectUserInstanceListRequest
	(*SelectUserInstanceListResponse)(nil),     // 72: SelectUserInstanceListResponse
	(*SelectUserInstancePageResponse)(nil),     // 73: SelectUserInstancePageResponse
	(*InstanceTableResponse)(nil),              // 74: InstanceTableResponse
	(*DeviceDefaultResponse)(nil),              // 75: DeviceDefaultResponse
	(*ReleaseInstanceRequest)(nil),             // 76: ReleaseInstanceRequest
	(*ReleaseInstanceResponse)(nil),            // 77: ReleaseInstanceResponse
	(*StartInstanceRequest)(nil),               // 78: StartInstanceRequest
	(*StartInstanceResponse)(nil),              // 79: StartInstanceResponse
	(*StopInstanceRequest)(nil),                // 80: StopInstanceRequest
	(*StopInstanceResponse)(nil),               // 81: StopInstanceResponse
}
var file_device_proto_depIdxs = []int32{
	2,  // 0: GetVisitsChartDataResponse.data:type_name -> VisitsChartData
	5,  // 1: GetBmxServerIdListResponse.data:type_name -> BmxServerIdList
	8,  // 2: GetBmxChartDataResponse.data:type_name -> BmxChartData
	57, // 3: AddBmxServerResp.data:type_name -> BmxServer
	14, // 4: QueryInstancePageResp.data:type_name -> InstancePageResp
	15, // 5: InstancePageResp.rows:type_name -> Instance
	20, // 6: RenewalInstanceDetailsResponse.data:type_name -> RenewalInstanceDetails
	22, // 7: QueryDiskHistoryBasedOnResponse.data:type_name -> QueryDiskHistoryBasedOn
	22, // 8: QueryDiskHistoryBasedOn.children:type_name -> QueryDiskHistoryBasedOn
	31, // 9: InstancePowerOnOffRecordResponse.data:type_name -> InstanceTableRecordPage
	32, // 10: InstanceTableRecordPage.rows:type_name -> InstanceTableRecord
	44, // 11: AddDiskInfoRequest.data:type_name -> DiskInfo
	44, // 12: UpdateDiskInfoRequest.data:type_name -> DiskInfo
	43, // 13: QueryDiskInfoResponse.data:type_name -> QueryDiskInfo
	44, // 14: QueryDiskInfo.rows:type_name -> DiskInfo
	47, // 15: QueryClientLabelResponse.data:type_name -> QueryClientLabel
	48, // 16: QueryClientLabel.rows:type_name -> LabelPage
	53, // 17: QueryDeviceRequest.data:type_name -> Device
	51, // 18: QueryDeviceResponse.data:type_name -> QueryDevice
	52, // 19: QueryDevice.rows:type_name -> DeviceResponse
	57, // 20: QueryBmxServerRequest.data:type_name -> BmxServer
	56, // 21: QueryBmxServerResponse.data:type_name -> QueryBmxServer
	57, // 22: QueryBmxServer.rows:type_name -> BmxServer
	64, // 23: SelectImageListResponse.data:type_name -> SelectImageList
	70, // 24: SelectImageList.rows:type_name -> Image
	67, // 25: GetUserInstanceInfoResponse.data:type_name -> InstanceInfoCountResponse
	70, // 26: GetImageListResponse.data:type_name -> Image
	73, // 27: SelectUserInstanceListResponse.data:type_name -> SelectUserInstancePageResponse
	74, // 28: SelectUserInstancePageResponse.rows:type_name -> InstanceTableResponse
	78, // 29: DeviceService.RpcStartInstance:input_type -> StartInstanceRequest
	80, // 30: DeviceService.RpcStopInstance:input_type -> StopInstanceRequest
	76, // 31: DeviceService.RpcReleaseInstance:input_type -> ReleaseInstanceRequest
	78, // 32: DeviceService.StartInstance:input_type -> StartInstanceRequest
	80, // 33: DeviceService.StopInstance:input_type -> StopInstanceRequest
	76, // 34: DeviceService.ReleaseInstance:input_type -> ReleaseInstanceRequest
	18, // 35: DeviceService.RenewalInstanceDetails:input_type -> RenewalInstanceDetailsRequest
	71, // 36: DeviceService.SelectUserInstanceList:input_type -> SelectUserInstanceListRequest
	65, // 37: DeviceService.GetUserInstanceInfo:input_type -> GetUserInstanceInfoRequest
	68, // 38: DeviceService.GetImageList:input_type -> GetImageListRequest
	10, // 39: DeviceService.SetInstanceName:input_type -> SetInstanceNameReq
	62, // 40: DeviceService.SelectImageList:input_type -> SelectImageListRequest
	70, // 41: DeviceService.UpdateImage:input_type -> Image
	70, // 42: DeviceService.AddImage:input_type -> Image
	58, // 43: DeviceService.DeleteImage:input_type -> DeleteImageRequest
	54, // 44: DeviceService.QueryBmxServer:input_type -> QueryBmxServerRequest
	33, // 45: DeviceService.UpdateBmxServerDiskId:input_type -> UpdateBmxServerDiskIdRequest
	49, // 46: DeviceService.QueryDevice:input_type -> QueryDeviceRequest
	45, // 47: DeviceService.QueryClientLabel:input_type -> QueryClientLabelRequest
	41, // 48: DeviceService.QueryDiskInfo:input_type -> QueryDiskInfoRequest
	35, // 49: DeviceService.AddDiskInfo:input_type -> AddDiskInfoRequest
	37, // 50: DeviceService.DeleteDiskInfo:input_type -> DeleteDiskInfoRequest
	39, // 51: DeviceService.UpdateDiskInfo:input_type -> UpdateDiskInfoRequest
	29, // 52: DeviceService.InstancePowerOnOffRecord:input_type -> InstancePowerOnOffRecordRequest
	25, // 53: DeviceService.BatchUpdateBmxServerDiskId:input_type -> BatchUpdateBmxServerDiskIdRequest
	27, // 54: DeviceService.QueryBmxServerByDisk:input_type -> QueryBmxServerByDiskRequest
	24, // 55: DeviceService.QueryDiskHistoryBasedOn:input_type -> QueryDiskHistoryBasedOnRequest
	16, // 56: DeviceService.QueryPidExists:input_type -> QueryPidExistsReq
	15, // 57: DeviceService.QueryInstancePage:input_type -> Instance
	15, // 58: DeviceService.UpdateInstance:input_type -> Instance
	57, // 59: DeviceService.AddBmxServer:input_type -> BmxServer
	78, // 60: DeviceService.AdminStartInstance:input_type -> StartInstanceRequest
	80, // 61: DeviceService.AdminStopInstance:input_type -> StopInstanceRequest
	76, // 62: DeviceService.AdminReleaseInstance:input_type -> ReleaseInstanceRequest
	3,  // 63: DeviceService.GetBmxServerIdList:input_type -> GetBmxServerIdListRequest
	6,  // 64: DeviceService.GetBmxChartData:input_type -> GetBmxChartDataRequest
	0,  // 65: DeviceService.GetVisitsChartData:input_type -> GetVisitsChartDataRequest
	75, // 66: DeviceService.RpcStartInstance:output_type -> DeviceDefaultResponse
	81, // 67: DeviceService.RpcStopInstance:output_type -> StopInstanceResponse
	77, // 68: DeviceService.RpcReleaseInstance:output_type -> ReleaseInstanceResponse
	75, // 69: DeviceService.StartInstance:output_type -> DeviceDefaultResponse
	81, // 70: DeviceService.StopInstance:output_type -> StopInstanceResponse
	77, // 71: DeviceService.ReleaseInstance:output_type -> ReleaseInstanceResponse
	19, // 72: DeviceService.RenewalInstanceDetails:output_type -> RenewalInstanceDetailsResponse
	72, // 73: DeviceService.SelectUserInstanceList:output_type -> SelectUserInstanceListResponse
	66, // 74: DeviceService.GetUserInstanceInfo:output_type -> GetUserInstanceInfoResponse
	69, // 75: DeviceService.GetImageList:output_type -> GetImageListResponse
	9,  // 76: DeviceService.SetInstanceName:output_type -> SetInstanceNameResp
	63, // 77: DeviceService.SelectImageList:output_type -> SelectImageListResponse
	61, // 78: DeviceService.UpdateImage:output_type -> UpdateImageResponse
	60, // 79: DeviceService.AddImage:output_type -> AddImageResponse
	59, // 80: DeviceService.DeleteImage:output_type -> DeleteImageResponse
	55, // 81: DeviceService.QueryBmxServer:output_type -> QueryBmxServerResponse
	34, // 82: DeviceService.UpdateBmxServerDiskId:output_type -> UpdateBmxServerDiskIdResponse
	50, // 83: DeviceService.QueryDevice:output_type -> QueryDeviceResponse
	46, // 84: DeviceService.QueryClientLabel:output_type -> QueryClientLabelResponse
	42, // 85: DeviceService.QueryDiskInfo:output_type -> QueryDiskInfoResponse
	36, // 86: DeviceService.AddDiskInfo:output_type -> AddDiskInfoResponse
	38, // 87: DeviceService.DeleteDiskInfo:output_type -> DeleteDiskInfoResponse
	40, // 88: DeviceService.UpdateDiskInfo:output_type -> UpdateDiskInfoResponse
	30, // 89: DeviceService.InstancePowerOnOffRecord:output_type -> InstancePowerOnOffRecordResponse
	26, // 90: DeviceService.BatchUpdateBmxServerDiskId:output_type -> BatchUpdateBmxServerDiskIdResponse
	28, // 91: DeviceService.QueryBmxServerByDisk:output_type -> QueryBmxServerByDiskResponse
	21, // 92: DeviceService.QueryDiskHistoryBasedOn:output_type -> QueryDiskHistoryBasedOnResponse
	17, // 93: DeviceService.QueryPidExists:output_type -> QueryPidExistsResp
	12, // 94: DeviceService.QueryInstancePage:output_type -> QueryInstancePageResp
	13, // 95: DeviceService.UpdateInstance:output_type -> UpdateInstanceResp
	11, // 96: DeviceService.AddBmxServer:output_type -> AddBmxServerResp
	75, // 97: DeviceService.AdminStartInstance:output_type -> DeviceDefaultResponse
	81, // 98: DeviceService.AdminStopInstance:output_type -> StopInstanceResponse
	77, // 99: DeviceService.AdminReleaseInstance:output_type -> ReleaseInstanceResponse
	4,  // 100: DeviceService.GetBmxServerIdList:output_type -> GetBmxServerIdListResponse
	7,  // 101: DeviceService.GetBmxChartData:output_type -> GetBmxChartDataResponse
	1,  // 102: DeviceService.GetVisitsChartData:output_type -> GetVisitsChartDataResponse
	66, // [66:103] is the sub-list for method output_type
	29, // [29:66] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_device_proto_init() }
func file_device_proto_init() {
	if File_device_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVisitsChartDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVisitsChartDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisitsChartData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBmxServerIdListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBmxServerIdListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BmxServerIdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBmxChartDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBmxChartDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BmxChartData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetInstanceNameResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetInstanceNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBmxServerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryInstancePageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstancePageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPidExistsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPidExistsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewalInstanceDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewalInstanceDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewalInstanceDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDiskHistoryBasedOnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDiskHistoryBasedOn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskTableRecords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDiskHistoryBasedOnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateBmxServerDiskIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateBmxServerDiskIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBmxServerByDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBmxServerByDiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstancePowerOnOffRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstancePowerOnOffRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTableRecordPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTableRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBmxServerDiskIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBmxServerDiskIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDiskInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDiskInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDiskInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDiskInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDiskInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDiskInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDiskInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDiskInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDiskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryClientLabelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryClientLabelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryClientLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBmxServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBmxServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBmxServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BmxServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectImageListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectImageListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectImageList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInstanceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInstanceInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceInfoCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImageListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImageListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectUserInstanceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectUserInstanceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectUserInstancePageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDefaultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_device_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   82,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_device_proto_goTypes,
		DependencyIndexes: file_device_proto_depIdxs,
		MessageInfos:      file_device_proto_msgTypes,
	}.Build()
	File_device_proto = out.File
	file_device_proto_rawDesc = nil
	file_device_proto_goTypes = nil
	file_device_proto_depIdxs = nil
}
