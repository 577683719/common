// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: device.proto

package device

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeviceService_RpcStartInstance_FullMethodName           = "/DeviceService/RpcStartInstance"
	DeviceService_RpcStopInstance_FullMethodName            = "/DeviceService/RpcStopInstance"
	DeviceService_RpcReleaseInstance_FullMethodName         = "/DeviceService/RpcReleaseInstance"
	DeviceService_StartInstance_FullMethodName              = "/DeviceService/StartInstance"
	DeviceService_StopInstance_FullMethodName               = "/DeviceService/StopInstance"
	DeviceService_ReleaseInstance_FullMethodName            = "/DeviceService/ReleaseInstance"
	DeviceService_RenewalInstanceDetails_FullMethodName     = "/DeviceService/RenewalInstanceDetails"
	DeviceService_SelectUserInstanceList_FullMethodName     = "/DeviceService/SelectUserInstanceList"
	DeviceService_GetUserInstanceInfo_FullMethodName        = "/DeviceService/GetUserInstanceInfo"
	DeviceService_GetImageList_FullMethodName               = "/DeviceService/GetImageList"
	DeviceService_SetInstanceName_FullMethodName            = "/DeviceService/SetInstanceName"
	DeviceService_SelectImageList_FullMethodName            = "/DeviceService/SelectImageList"
	DeviceService_UpdateImage_FullMethodName                = "/DeviceService/UpdateImage"
	DeviceService_AddImage_FullMethodName                   = "/DeviceService/AddImage"
	DeviceService_DeleteImage_FullMethodName                = "/DeviceService/DeleteImage"
	DeviceService_QueryBmxServer_FullMethodName             = "/DeviceService/QueryBmxServer"
	DeviceService_UpdateBmxServerDiskId_FullMethodName      = "/DeviceService/UpdateBmxServerDiskId"
	DeviceService_QueryDevice_FullMethodName                = "/DeviceService/QueryDevice"
	DeviceService_QueryClientLabel_FullMethodName           = "/DeviceService/QueryClientLabel"
	DeviceService_QueryDiskInfo_FullMethodName              = "/DeviceService/QueryDiskInfo"
	DeviceService_AddDiskInfo_FullMethodName                = "/DeviceService/AddDiskInfo"
	DeviceService_DeleteDiskInfo_FullMethodName             = "/DeviceService/DeleteDiskInfo"
	DeviceService_UpdateDiskInfo_FullMethodName             = "/DeviceService/UpdateDiskInfo"
	DeviceService_InstancePowerOnOffRecord_FullMethodName   = "/DeviceService/InstancePowerOnOffRecord"
	DeviceService_BatchUpdateBmxServerDiskId_FullMethodName = "/DeviceService/BatchUpdateBmxServerDiskId"
	DeviceService_QueryBmxServerByDisk_FullMethodName       = "/DeviceService/QueryBmxServerByDisk"
	DeviceService_QueryDiskHistoryBasedOn_FullMethodName    = "/DeviceService/QueryDiskHistoryBasedOn"
	DeviceService_QueryPidExists_FullMethodName             = "/DeviceService/QueryPidExists"
	DeviceService_QueryInstancePage_FullMethodName          = "/DeviceService/QueryInstancePage"
	DeviceService_UpdateInstance_FullMethodName             = "/DeviceService/UpdateInstance"
	DeviceService_AddBmxServer_FullMethodName               = "/DeviceService/AddBmxServer"
	DeviceService_AdminStartInstance_FullMethodName         = "/DeviceService/AdminStartInstance"
	DeviceService_AdminStopInstance_FullMethodName          = "/DeviceService/AdminStopInstance"
	DeviceService_AdminReleaseInstance_FullMethodName       = "/DeviceService/AdminReleaseInstance"
	DeviceService_GetBmxServerIdList_FullMethodName         = "/DeviceService/GetBmxServerIdList"
	DeviceService_GetBmxChartData_FullMethodName            = "/DeviceService/GetBmxChartData"
	DeviceService_GetVisitsChartData_FullMethodName         = "/DeviceService/GetVisitsChartData"
)

// DeviceServiceClient is the client API for DeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceServiceClient interface {
	//-----------------------------------rpc接口------------------
	//启动实例
	RpcStartInstance(ctx context.Context, in *StartInstanceRequest, opts ...grpc.CallOption) (*DeviceDefaultResponse, error)
	//关闭实例
	RpcStopInstance(ctx context.Context, in *StopInstanceRequest, opts ...grpc.CallOption) (*StopInstanceResponse, error)
	//释放实例
	RpcReleaseInstance(ctx context.Context, in *ReleaseInstanceRequest, opts ...grpc.CallOption) (*ReleaseInstanceResponse, error)
	//-----------------------------APP----------------------
	//启动实例
	StartInstance(ctx context.Context, in *StartInstanceRequest, opts ...grpc.CallOption) (*DeviceDefaultResponse, error)
	//关闭实例
	StopInstance(ctx context.Context, in *StopInstanceRequest, opts ...grpc.CallOption) (*StopInstanceResponse, error)
	//释放实例
	ReleaseInstance(ctx context.Context, in *ReleaseInstanceRequest, opts ...grpc.CallOption) (*ReleaseInstanceResponse, error)
	//续费实例详细
	RenewalInstanceDetails(ctx context.Context, in *RenewalInstanceDetailsRequest, opts ...grpc.CallOption) (*RenewalInstanceDetailsResponse, error)
	//获取用户实例列表
	SelectUserInstanceList(ctx context.Context, in *SelectUserInstanceListRequest, opts ...grpc.CallOption) (*SelectUserInstanceListResponse, error)
	//获取容器实例信息
	GetUserInstanceInfo(ctx context.Context, in *GetUserInstanceInfoRequest, opts ...grpc.CallOption) (*GetUserInstanceInfoResponse, error)
	//获取镜像列表
	GetImageList(ctx context.Context, in *GetImageListRequest, opts ...grpc.CallOption) (*GetImageListResponse, error)
	//设置名称
	SetInstanceName(ctx context.Context, in *SetInstanceNameReq, opts ...grpc.CallOption) (*SetInstanceNameResp, error)
	//管理端-获取镜像列表
	SelectImageList(ctx context.Context, in *SelectImageListRequest, opts ...grpc.CallOption) (*SelectImageListResponse, error)
	//管理端-更新镜像
	UpdateImage(ctx context.Context, in *Image, opts ...grpc.CallOption) (*UpdateImageResponse, error)
	//管理端-添加镜像
	AddImage(ctx context.Context, in *Image, opts ...grpc.CallOption) (*AddImageResponse, error)
	//管理端-删除镜像
	DeleteImage(ctx context.Context, in *DeleteImageRequest, opts ...grpc.CallOption) (*DeleteImageResponse, error)
	//管理端-查询BmxServer
	QueryBmxServer(ctx context.Context, in *QueryBmxServerRequest, opts ...grpc.CallOption) (*QueryBmxServerResponse, error)
	//管理端-更新BmxServer的磁盘id
	UpdateBmxServerDiskId(ctx context.Context, in *UpdateBmxServerDiskIdRequest, opts ...grpc.CallOption) (*UpdateBmxServerDiskIdResponse, error)
	//管理端-查询设备
	QueryDevice(ctx context.Context, in *QueryDeviceRequest, opts ...grpc.CallOption) (*QueryDeviceResponse, error)
	//管理端-查询客户标签
	QueryClientLabel(ctx context.Context, in *QueryClientLabelRequest, opts ...grpc.CallOption) (*QueryClientLabelResponse, error)
	//管理端-查询磁盘信息
	QueryDiskInfo(ctx context.Context, in *QueryDiskInfoRequest, opts ...grpc.CallOption) (*QueryDiskInfoResponse, error)
	//管理端-添加磁盘信息
	AddDiskInfo(ctx context.Context, in *AddDiskInfoRequest, opts ...grpc.CallOption) (*AddDiskInfoResponse, error)
	//管理端-删除磁盘信息
	DeleteDiskInfo(ctx context.Context, in *DeleteDiskInfoRequest, opts ...grpc.CallOption) (*DeleteDiskInfoResponse, error)
	//管理端-更新磁盘信息
	UpdateDiskInfo(ctx context.Context, in *UpdateDiskInfoRequest, opts ...grpc.CallOption) (*UpdateDiskInfoResponse, error)
	//管理端-实例开关机记录
	InstancePowerOnOffRecord(ctx context.Context, in *InstancePowerOnOffRecordRequest, opts ...grpc.CallOption) (*InstancePowerOnOffRecordResponse, error)
	//管理端-批量更新BmxServer的磁盘id
	BatchUpdateBmxServerDiskId(ctx context.Context, in *BatchUpdateBmxServerDiskIdRequest, opts ...grpc.CallOption) (*BatchUpdateBmxServerDiskIdResponse, error)
	//管理端-查询磁盘对应的bmxServer列表
	QueryBmxServerByDisk(ctx context.Context, in *QueryBmxServerByDiskRequest, opts ...grpc.CallOption) (*QueryBmxServerByDiskResponse, error)
	//管理端-查询磁盘历史记录根据
	QueryDiskHistoryBasedOn(ctx context.Context, in *QueryDiskHistoryBasedOnRequest, opts ...grpc.CallOption) (*QueryDiskHistoryBasedOnResponse, error)
	//管理端-查询pid是否存在
	QueryPidExists(ctx context.Context, in *QueryPidExistsReq, opts ...grpc.CallOption) (*QueryPidExistsResp, error)
	//管理端-查看实例列表
	QueryInstancePage(ctx context.Context, in *Instance, opts ...grpc.CallOption) (*QueryInstancePageResp, error)
	//管理端-更新实例
	UpdateInstance(ctx context.Context, in *Instance, opts ...grpc.CallOption) (*UpdateInstanceResp, error)
	//管理端-添加bmx服务器
	AddBmxServer(ctx context.Context, in *BmxServer, opts ...grpc.CallOption) (*AddBmxServerResp, error)
	//管理端-启动实例
	AdminStartInstance(ctx context.Context, in *StartInstanceRequest, opts ...grpc.CallOption) (*DeviceDefaultResponse, error)
	//管理端-关闭实例
	AdminStopInstance(ctx context.Context, in *StopInstanceRequest, opts ...grpc.CallOption) (*StopInstanceResponse, error)
	//管理端-释放实例
	AdminReleaseInstance(ctx context.Context, in *ReleaseInstanceRequest, opts ...grpc.CallOption) (*ReleaseInstanceResponse, error)
	// 管理端-获取 BmxServer ID 列表
	GetBmxServerIdList(ctx context.Context, in *GetBmxServerIdListRequest, opts ...grpc.CallOption) (*GetBmxServerIdListResponse, error)
	// 管理端-获取 BmxChart 数据
	GetBmxChartData(ctx context.Context, in *GetBmxChartDataRequest, opts ...grpc.CallOption) (*GetBmxChartDataResponse, error)
	// 新增接口 - 获取访问图表数据
	GetVisitsChartData(ctx context.Context, in *GetVisitsChartDataRequest, opts ...grpc.CallOption) (*GetVisitsChartDataResponse, error)
}

type deviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceServiceClient(cc grpc.ClientConnInterface) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) RpcStartInstance(ctx context.Context, in *StartInstanceRequest, opts ...grpc.CallOption) (*DeviceDefaultResponse, error) {
	out := new(DeviceDefaultResponse)
	err := c.cc.Invoke(ctx, DeviceService_RpcStartInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) RpcStopInstance(ctx context.Context, in *StopInstanceRequest, opts ...grpc.CallOption) (*StopInstanceResponse, error) {
	out := new(StopInstanceResponse)
	err := c.cc.Invoke(ctx, DeviceService_RpcStopInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) RpcReleaseInstance(ctx context.Context, in *ReleaseInstanceRequest, opts ...grpc.CallOption) (*ReleaseInstanceResponse, error) {
	out := new(ReleaseInstanceResponse)
	err := c.cc.Invoke(ctx, DeviceService_RpcReleaseInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) StartInstance(ctx context.Context, in *StartInstanceRequest, opts ...grpc.CallOption) (*DeviceDefaultResponse, error) {
	out := new(DeviceDefaultResponse)
	err := c.cc.Invoke(ctx, DeviceService_StartInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) StopInstance(ctx context.Context, in *StopInstanceRequest, opts ...grpc.CallOption) (*StopInstanceResponse, error) {
	out := new(StopInstanceResponse)
	err := c.cc.Invoke(ctx, DeviceService_StopInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) ReleaseInstance(ctx context.Context, in *ReleaseInstanceRequest, opts ...grpc.CallOption) (*ReleaseInstanceResponse, error) {
	out := new(ReleaseInstanceResponse)
	err := c.cc.Invoke(ctx, DeviceService_ReleaseInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) RenewalInstanceDetails(ctx context.Context, in *RenewalInstanceDetailsRequest, opts ...grpc.CallOption) (*RenewalInstanceDetailsResponse, error) {
	out := new(RenewalInstanceDetailsResponse)
	err := c.cc.Invoke(ctx, DeviceService_RenewalInstanceDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) SelectUserInstanceList(ctx context.Context, in *SelectUserInstanceListRequest, opts ...grpc.CallOption) (*SelectUserInstanceListResponse, error) {
	out := new(SelectUserInstanceListResponse)
	err := c.cc.Invoke(ctx, DeviceService_SelectUserInstanceList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetUserInstanceInfo(ctx context.Context, in *GetUserInstanceInfoRequest, opts ...grpc.CallOption) (*GetUserInstanceInfoResponse, error) {
	out := new(GetUserInstanceInfoResponse)
	err := c.cc.Invoke(ctx, DeviceService_GetUserInstanceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetImageList(ctx context.Context, in *GetImageListRequest, opts ...grpc.CallOption) (*GetImageListResponse, error) {
	out := new(GetImageListResponse)
	err := c.cc.Invoke(ctx, DeviceService_GetImageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) SetInstanceName(ctx context.Context, in *SetInstanceNameReq, opts ...grpc.CallOption) (*SetInstanceNameResp, error) {
	out := new(SetInstanceNameResp)
	err := c.cc.Invoke(ctx, DeviceService_SetInstanceName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) SelectImageList(ctx context.Context, in *SelectImageListRequest, opts ...grpc.CallOption) (*SelectImageListResponse, error) {
	out := new(SelectImageListResponse)
	err := c.cc.Invoke(ctx, DeviceService_SelectImageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) UpdateImage(ctx context.Context, in *Image, opts ...grpc.CallOption) (*UpdateImageResponse, error) {
	out := new(UpdateImageResponse)
	err := c.cc.Invoke(ctx, DeviceService_UpdateImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) AddImage(ctx context.Context, in *Image, opts ...grpc.CallOption) (*AddImageResponse, error) {
	out := new(AddImageResponse)
	err := c.cc.Invoke(ctx, DeviceService_AddImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) DeleteImage(ctx context.Context, in *DeleteImageRequest, opts ...grpc.CallOption) (*DeleteImageResponse, error) {
	out := new(DeleteImageResponse)
	err := c.cc.Invoke(ctx, DeviceService_DeleteImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) QueryBmxServer(ctx context.Context, in *QueryBmxServerRequest, opts ...grpc.CallOption) (*QueryBmxServerResponse, error) {
	out := new(QueryBmxServerResponse)
	err := c.cc.Invoke(ctx, DeviceService_QueryBmxServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) UpdateBmxServerDiskId(ctx context.Context, in *UpdateBmxServerDiskIdRequest, opts ...grpc.CallOption) (*UpdateBmxServerDiskIdResponse, error) {
	out := new(UpdateBmxServerDiskIdResponse)
	err := c.cc.Invoke(ctx, DeviceService_UpdateBmxServerDiskId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) QueryDevice(ctx context.Context, in *QueryDeviceRequest, opts ...grpc.CallOption) (*QueryDeviceResponse, error) {
	out := new(QueryDeviceResponse)
	err := c.cc.Invoke(ctx, DeviceService_QueryDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) QueryClientLabel(ctx context.Context, in *QueryClientLabelRequest, opts ...grpc.CallOption) (*QueryClientLabelResponse, error) {
	out := new(QueryClientLabelResponse)
	err := c.cc.Invoke(ctx, DeviceService_QueryClientLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) QueryDiskInfo(ctx context.Context, in *QueryDiskInfoRequest, opts ...grpc.CallOption) (*QueryDiskInfoResponse, error) {
	out := new(QueryDiskInfoResponse)
	err := c.cc.Invoke(ctx, DeviceService_QueryDiskInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) AddDiskInfo(ctx context.Context, in *AddDiskInfoRequest, opts ...grpc.CallOption) (*AddDiskInfoResponse, error) {
	out := new(AddDiskInfoResponse)
	err := c.cc.Invoke(ctx, DeviceService_AddDiskInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) DeleteDiskInfo(ctx context.Context, in *DeleteDiskInfoRequest, opts ...grpc.CallOption) (*DeleteDiskInfoResponse, error) {
	out := new(DeleteDiskInfoResponse)
	err := c.cc.Invoke(ctx, DeviceService_DeleteDiskInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) UpdateDiskInfo(ctx context.Context, in *UpdateDiskInfoRequest, opts ...grpc.CallOption) (*UpdateDiskInfoResponse, error) {
	out := new(UpdateDiskInfoResponse)
	err := c.cc.Invoke(ctx, DeviceService_UpdateDiskInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) InstancePowerOnOffRecord(ctx context.Context, in *InstancePowerOnOffRecordRequest, opts ...grpc.CallOption) (*InstancePowerOnOffRecordResponse, error) {
	out := new(InstancePowerOnOffRecordResponse)
	err := c.cc.Invoke(ctx, DeviceService_InstancePowerOnOffRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) BatchUpdateBmxServerDiskId(ctx context.Context, in *BatchUpdateBmxServerDiskIdRequest, opts ...grpc.CallOption) (*BatchUpdateBmxServerDiskIdResponse, error) {
	out := new(BatchUpdateBmxServerDiskIdResponse)
	err := c.cc.Invoke(ctx, DeviceService_BatchUpdateBmxServerDiskId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) QueryBmxServerByDisk(ctx context.Context, in *QueryBmxServerByDiskRequest, opts ...grpc.CallOption) (*QueryBmxServerByDiskResponse, error) {
	out := new(QueryBmxServerByDiskResponse)
	err := c.cc.Invoke(ctx, DeviceService_QueryBmxServerByDisk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) QueryDiskHistoryBasedOn(ctx context.Context, in *QueryDiskHistoryBasedOnRequest, opts ...grpc.CallOption) (*QueryDiskHistoryBasedOnResponse, error) {
	out := new(QueryDiskHistoryBasedOnResponse)
	err := c.cc.Invoke(ctx, DeviceService_QueryDiskHistoryBasedOn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) QueryPidExists(ctx context.Context, in *QueryPidExistsReq, opts ...grpc.CallOption) (*QueryPidExistsResp, error) {
	out := new(QueryPidExistsResp)
	err := c.cc.Invoke(ctx, DeviceService_QueryPidExists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) QueryInstancePage(ctx context.Context, in *Instance, opts ...grpc.CallOption) (*QueryInstancePageResp, error) {
	out := new(QueryInstancePageResp)
	err := c.cc.Invoke(ctx, DeviceService_QueryInstancePage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) UpdateInstance(ctx context.Context, in *Instance, opts ...grpc.CallOption) (*UpdateInstanceResp, error) {
	out := new(UpdateInstanceResp)
	err := c.cc.Invoke(ctx, DeviceService_UpdateInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) AddBmxServer(ctx context.Context, in *BmxServer, opts ...grpc.CallOption) (*AddBmxServerResp, error) {
	out := new(AddBmxServerResp)
	err := c.cc.Invoke(ctx, DeviceService_AddBmxServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) AdminStartInstance(ctx context.Context, in *StartInstanceRequest, opts ...grpc.CallOption) (*DeviceDefaultResponse, error) {
	out := new(DeviceDefaultResponse)
	err := c.cc.Invoke(ctx, DeviceService_AdminStartInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) AdminStopInstance(ctx context.Context, in *StopInstanceRequest, opts ...grpc.CallOption) (*StopInstanceResponse, error) {
	out := new(StopInstanceResponse)
	err := c.cc.Invoke(ctx, DeviceService_AdminStopInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) AdminReleaseInstance(ctx context.Context, in *ReleaseInstanceRequest, opts ...grpc.CallOption) (*ReleaseInstanceResponse, error) {
	out := new(ReleaseInstanceResponse)
	err := c.cc.Invoke(ctx, DeviceService_AdminReleaseInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetBmxServerIdList(ctx context.Context, in *GetBmxServerIdListRequest, opts ...grpc.CallOption) (*GetBmxServerIdListResponse, error) {
	out := new(GetBmxServerIdListResponse)
	err := c.cc.Invoke(ctx, DeviceService_GetBmxServerIdList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetBmxChartData(ctx context.Context, in *GetBmxChartDataRequest, opts ...grpc.CallOption) (*GetBmxChartDataResponse, error) {
	out := new(GetBmxChartDataResponse)
	err := c.cc.Invoke(ctx, DeviceService_GetBmxChartData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetVisitsChartData(ctx context.Context, in *GetVisitsChartDataRequest, opts ...grpc.CallOption) (*GetVisitsChartDataResponse, error) {
	out := new(GetVisitsChartDataResponse)
	err := c.cc.Invoke(ctx, DeviceService_GetVisitsChartData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServiceServer is the server API for DeviceService service.
// All implementations should embed UnimplementedDeviceServiceServer
// for forward compatibility
type DeviceServiceServer interface {
	//-----------------------------------rpc接口------------------
	//启动实例
	RpcStartInstance(context.Context, *StartInstanceRequest) (*DeviceDefaultResponse, error)
	//关闭实例
	RpcStopInstance(context.Context, *StopInstanceRequest) (*StopInstanceResponse, error)
	//释放实例
	RpcReleaseInstance(context.Context, *ReleaseInstanceRequest) (*ReleaseInstanceResponse, error)
	//-----------------------------APP----------------------
	//启动实例
	StartInstance(context.Context, *StartInstanceRequest) (*DeviceDefaultResponse, error)
	//关闭实例
	StopInstance(context.Context, *StopInstanceRequest) (*StopInstanceResponse, error)
	//释放实例
	ReleaseInstance(context.Context, *ReleaseInstanceRequest) (*ReleaseInstanceResponse, error)
	//续费实例详细
	RenewalInstanceDetails(context.Context, *RenewalInstanceDetailsRequest) (*RenewalInstanceDetailsResponse, error)
	//获取用户实例列表
	SelectUserInstanceList(context.Context, *SelectUserInstanceListRequest) (*SelectUserInstanceListResponse, error)
	//获取容器实例信息
	GetUserInstanceInfo(context.Context, *GetUserInstanceInfoRequest) (*GetUserInstanceInfoResponse, error)
	//获取镜像列表
	GetImageList(context.Context, *GetImageListRequest) (*GetImageListResponse, error)
	//设置名称
	SetInstanceName(context.Context, *SetInstanceNameReq) (*SetInstanceNameResp, error)
	//管理端-获取镜像列表
	SelectImageList(context.Context, *SelectImageListRequest) (*SelectImageListResponse, error)
	//管理端-更新镜像
	UpdateImage(context.Context, *Image) (*UpdateImageResponse, error)
	//管理端-添加镜像
	AddImage(context.Context, *Image) (*AddImageResponse, error)
	//管理端-删除镜像
	DeleteImage(context.Context, *DeleteImageRequest) (*DeleteImageResponse, error)
	//管理端-查询BmxServer
	QueryBmxServer(context.Context, *QueryBmxServerRequest) (*QueryBmxServerResponse, error)
	//管理端-更新BmxServer的磁盘id
	UpdateBmxServerDiskId(context.Context, *UpdateBmxServerDiskIdRequest) (*UpdateBmxServerDiskIdResponse, error)
	//管理端-查询设备
	QueryDevice(context.Context, *QueryDeviceRequest) (*QueryDeviceResponse, error)
	//管理端-查询客户标签
	QueryClientLabel(context.Context, *QueryClientLabelRequest) (*QueryClientLabelResponse, error)
	//管理端-查询磁盘信息
	QueryDiskInfo(context.Context, *QueryDiskInfoRequest) (*QueryDiskInfoResponse, error)
	//管理端-添加磁盘信息
	AddDiskInfo(context.Context, *AddDiskInfoRequest) (*AddDiskInfoResponse, error)
	//管理端-删除磁盘信息
	DeleteDiskInfo(context.Context, *DeleteDiskInfoRequest) (*DeleteDiskInfoResponse, error)
	//管理端-更新磁盘信息
	UpdateDiskInfo(context.Context, *UpdateDiskInfoRequest) (*UpdateDiskInfoResponse, error)
	//管理端-实例开关机记录
	InstancePowerOnOffRecord(context.Context, *InstancePowerOnOffRecordRequest) (*InstancePowerOnOffRecordResponse, error)
	//管理端-批量更新BmxServer的磁盘id
	BatchUpdateBmxServerDiskId(context.Context, *BatchUpdateBmxServerDiskIdRequest) (*BatchUpdateBmxServerDiskIdResponse, error)
	//管理端-查询磁盘对应的bmxServer列表
	QueryBmxServerByDisk(context.Context, *QueryBmxServerByDiskRequest) (*QueryBmxServerByDiskResponse, error)
	//管理端-查询磁盘历史记录根据
	QueryDiskHistoryBasedOn(context.Context, *QueryDiskHistoryBasedOnRequest) (*QueryDiskHistoryBasedOnResponse, error)
	//管理端-查询pid是否存在
	QueryPidExists(context.Context, *QueryPidExistsReq) (*QueryPidExistsResp, error)
	//管理端-查看实例列表
	QueryInstancePage(context.Context, *Instance) (*QueryInstancePageResp, error)
	//管理端-更新实例
	UpdateInstance(context.Context, *Instance) (*UpdateInstanceResp, error)
	//管理端-添加bmx服务器
	AddBmxServer(context.Context, *BmxServer) (*AddBmxServerResp, error)
	//管理端-启动实例
	AdminStartInstance(context.Context, *StartInstanceRequest) (*DeviceDefaultResponse, error)
	//管理端-关闭实例
	AdminStopInstance(context.Context, *StopInstanceRequest) (*StopInstanceResponse, error)
	//管理端-释放实例
	AdminReleaseInstance(context.Context, *ReleaseInstanceRequest) (*ReleaseInstanceResponse, error)
	// 管理端-获取 BmxServer ID 列表
	GetBmxServerIdList(context.Context, *GetBmxServerIdListRequest) (*GetBmxServerIdListResponse, error)
	// 管理端-获取 BmxChart 数据
	GetBmxChartData(context.Context, *GetBmxChartDataRequest) (*GetBmxChartDataResponse, error)
	// 新增接口 - 获取访问图表数据
	GetVisitsChartData(context.Context, *GetVisitsChartDataRequest) (*GetVisitsChartDataResponse, error)
}

// UnimplementedDeviceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeviceServiceServer struct {
}

func (UnimplementedDeviceServiceServer) RpcStartInstance(context.Context, *StartInstanceRequest) (*DeviceDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcStartInstance not implemented")
}
func (UnimplementedDeviceServiceServer) RpcStopInstance(context.Context, *StopInstanceRequest) (*StopInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcStopInstance not implemented")
}
func (UnimplementedDeviceServiceServer) RpcReleaseInstance(context.Context, *ReleaseInstanceRequest) (*ReleaseInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcReleaseInstance not implemented")
}
func (UnimplementedDeviceServiceServer) StartInstance(context.Context, *StartInstanceRequest) (*DeviceDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartInstance not implemented")
}
func (UnimplementedDeviceServiceServer) StopInstance(context.Context, *StopInstanceRequest) (*StopInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopInstance not implemented")
}
func (UnimplementedDeviceServiceServer) ReleaseInstance(context.Context, *ReleaseInstanceRequest) (*ReleaseInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseInstance not implemented")
}
func (UnimplementedDeviceServiceServer) RenewalInstanceDetails(context.Context, *RenewalInstanceDetailsRequest) (*RenewalInstanceDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewalInstanceDetails not implemented")
}
func (UnimplementedDeviceServiceServer) SelectUserInstanceList(context.Context, *SelectUserInstanceListRequest) (*SelectUserInstanceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectUserInstanceList not implemented")
}
func (UnimplementedDeviceServiceServer) GetUserInstanceInfo(context.Context, *GetUserInstanceInfoRequest) (*GetUserInstanceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInstanceInfo not implemented")
}
func (UnimplementedDeviceServiceServer) GetImageList(context.Context, *GetImageListRequest) (*GetImageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageList not implemented")
}
func (UnimplementedDeviceServiceServer) SetInstanceName(context.Context, *SetInstanceNameReq) (*SetInstanceNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInstanceName not implemented")
}
func (UnimplementedDeviceServiceServer) SelectImageList(context.Context, *SelectImageListRequest) (*SelectImageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectImageList not implemented")
}
func (UnimplementedDeviceServiceServer) UpdateImage(context.Context, *Image) (*UpdateImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImage not implemented")
}
func (UnimplementedDeviceServiceServer) AddImage(context.Context, *Image) (*AddImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddImage not implemented")
}
func (UnimplementedDeviceServiceServer) DeleteImage(context.Context, *DeleteImageRequest) (*DeleteImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (UnimplementedDeviceServiceServer) QueryBmxServer(context.Context, *QueryBmxServerRequest) (*QueryBmxServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBmxServer not implemented")
}
func (UnimplementedDeviceServiceServer) UpdateBmxServerDiskId(context.Context, *UpdateBmxServerDiskIdRequest) (*UpdateBmxServerDiskIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBmxServerDiskId not implemented")
}
func (UnimplementedDeviceServiceServer) QueryDevice(context.Context, *QueryDeviceRequest) (*QueryDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDevice not implemented")
}
func (UnimplementedDeviceServiceServer) QueryClientLabel(context.Context, *QueryClientLabelRequest) (*QueryClientLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryClientLabel not implemented")
}
func (UnimplementedDeviceServiceServer) QueryDiskInfo(context.Context, *QueryDiskInfoRequest) (*QueryDiskInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDiskInfo not implemented")
}
func (UnimplementedDeviceServiceServer) AddDiskInfo(context.Context, *AddDiskInfoRequest) (*AddDiskInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDiskInfo not implemented")
}
func (UnimplementedDeviceServiceServer) DeleteDiskInfo(context.Context, *DeleteDiskInfoRequest) (*DeleteDiskInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDiskInfo not implemented")
}
func (UnimplementedDeviceServiceServer) UpdateDiskInfo(context.Context, *UpdateDiskInfoRequest) (*UpdateDiskInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDiskInfo not implemented")
}
func (UnimplementedDeviceServiceServer) InstancePowerOnOffRecord(context.Context, *InstancePowerOnOffRecordRequest) (*InstancePowerOnOffRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstancePowerOnOffRecord not implemented")
}
func (UnimplementedDeviceServiceServer) BatchUpdateBmxServerDiskId(context.Context, *BatchUpdateBmxServerDiskIdRequest) (*BatchUpdateBmxServerDiskIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateBmxServerDiskId not implemented")
}
func (UnimplementedDeviceServiceServer) QueryBmxServerByDisk(context.Context, *QueryBmxServerByDiskRequest) (*QueryBmxServerByDiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBmxServerByDisk not implemented")
}
func (UnimplementedDeviceServiceServer) QueryDiskHistoryBasedOn(context.Context, *QueryDiskHistoryBasedOnRequest) (*QueryDiskHistoryBasedOnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDiskHistoryBasedOn not implemented")
}
func (UnimplementedDeviceServiceServer) QueryPidExists(context.Context, *QueryPidExistsReq) (*QueryPidExistsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPidExists not implemented")
}
func (UnimplementedDeviceServiceServer) QueryInstancePage(context.Context, *Instance) (*QueryInstancePageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryInstancePage not implemented")
}
func (UnimplementedDeviceServiceServer) UpdateInstance(context.Context, *Instance) (*UpdateInstanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstance not implemented")
}
func (UnimplementedDeviceServiceServer) AddBmxServer(context.Context, *BmxServer) (*AddBmxServerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBmxServer not implemented")
}
func (UnimplementedDeviceServiceServer) AdminStartInstance(context.Context, *StartInstanceRequest) (*DeviceDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminStartInstance not implemented")
}
func (UnimplementedDeviceServiceServer) AdminStopInstance(context.Context, *StopInstanceRequest) (*StopInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminStopInstance not implemented")
}
func (UnimplementedDeviceServiceServer) AdminReleaseInstance(context.Context, *ReleaseInstanceRequest) (*ReleaseInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminReleaseInstance not implemented")
}
func (UnimplementedDeviceServiceServer) GetBmxServerIdList(context.Context, *GetBmxServerIdListRequest) (*GetBmxServerIdListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBmxServerIdList not implemented")
}
func (UnimplementedDeviceServiceServer) GetBmxChartData(context.Context, *GetBmxChartDataRequest) (*GetBmxChartDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBmxChartData not implemented")
}
func (UnimplementedDeviceServiceServer) GetVisitsChartData(context.Context, *GetVisitsChartDataRequest) (*GetVisitsChartDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVisitsChartData not implemented")
}

// UnsafeDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceServiceServer will
// result in compilation errors.
type UnsafeDeviceServiceServer interface {
	mustEmbedUnimplementedDeviceServiceServer()
}

func RegisterDeviceServiceServer(s grpc.ServiceRegistrar, srv DeviceServiceServer) {
	s.RegisterService(&DeviceService_ServiceDesc, srv)
}

func _DeviceService_RpcStartInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).RpcStartInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_RpcStartInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).RpcStartInstance(ctx, req.(*StartInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_RpcStopInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).RpcStopInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_RpcStopInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).RpcStopInstance(ctx, req.(*StopInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_RpcReleaseInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).RpcReleaseInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_RpcReleaseInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).RpcReleaseInstance(ctx, req.(*ReleaseInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_StartInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).StartInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_StartInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).StartInstance(ctx, req.(*StartInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_StopInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).StopInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_StopInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).StopInstance(ctx, req.(*StopInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_ReleaseInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).ReleaseInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_ReleaseInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).ReleaseInstance(ctx, req.(*ReleaseInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_RenewalInstanceDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewalInstanceDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).RenewalInstanceDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_RenewalInstanceDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).RenewalInstanceDetails(ctx, req.(*RenewalInstanceDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_SelectUserInstanceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectUserInstanceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).SelectUserInstanceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_SelectUserInstanceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).SelectUserInstanceList(ctx, req.(*SelectUserInstanceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetUserInstanceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInstanceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetUserInstanceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_GetUserInstanceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetUserInstanceInfo(ctx, req.(*GetUserInstanceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetImageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetImageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_GetImageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetImageList(ctx, req.(*GetImageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_SetInstanceName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInstanceNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).SetInstanceName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_SetInstanceName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).SetInstanceName(ctx, req.(*SetInstanceNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_SelectImageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectImageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).SelectImageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_SelectImageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).SelectImageList(ctx, req.(*SelectImageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_UpdateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Image)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).UpdateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_UpdateImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).UpdateImage(ctx, req.(*Image))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_AddImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Image)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).AddImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_AddImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).AddImage(ctx, req.(*Image))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_DeleteImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).DeleteImage(ctx, req.(*DeleteImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_QueryBmxServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBmxServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).QueryBmxServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_QueryBmxServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).QueryBmxServer(ctx, req.(*QueryBmxServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_UpdateBmxServerDiskId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBmxServerDiskIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).UpdateBmxServerDiskId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_UpdateBmxServerDiskId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).UpdateBmxServerDiskId(ctx, req.(*UpdateBmxServerDiskIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_QueryDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).QueryDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_QueryDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).QueryDevice(ctx, req.(*QueryDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_QueryClientLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClientLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).QueryClientLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_QueryClientLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).QueryClientLabel(ctx, req.(*QueryClientLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_QueryDiskInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDiskInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).QueryDiskInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_QueryDiskInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).QueryDiskInfo(ctx, req.(*QueryDiskInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_AddDiskInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDiskInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).AddDiskInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_AddDiskInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).AddDiskInfo(ctx, req.(*AddDiskInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_DeleteDiskInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDiskInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).DeleteDiskInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_DeleteDiskInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).DeleteDiskInfo(ctx, req.(*DeleteDiskInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_UpdateDiskInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDiskInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).UpdateDiskInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_UpdateDiskInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).UpdateDiskInfo(ctx, req.(*UpdateDiskInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_InstancePowerOnOffRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstancePowerOnOffRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).InstancePowerOnOffRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_InstancePowerOnOffRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).InstancePowerOnOffRecord(ctx, req.(*InstancePowerOnOffRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_BatchUpdateBmxServerDiskId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateBmxServerDiskIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).BatchUpdateBmxServerDiskId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_BatchUpdateBmxServerDiskId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).BatchUpdateBmxServerDiskId(ctx, req.(*BatchUpdateBmxServerDiskIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_QueryBmxServerByDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBmxServerByDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).QueryBmxServerByDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_QueryBmxServerByDisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).QueryBmxServerByDisk(ctx, req.(*QueryBmxServerByDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_QueryDiskHistoryBasedOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDiskHistoryBasedOnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).QueryDiskHistoryBasedOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_QueryDiskHistoryBasedOn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).QueryDiskHistoryBasedOn(ctx, req.(*QueryDiskHistoryBasedOnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_QueryPidExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPidExistsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).QueryPidExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_QueryPidExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).QueryPidExists(ctx, req.(*QueryPidExistsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_QueryInstancePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Instance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).QueryInstancePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_QueryInstancePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).QueryInstancePage(ctx, req.(*Instance))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_UpdateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Instance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).UpdateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_UpdateInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).UpdateInstance(ctx, req.(*Instance))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_AddBmxServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BmxServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).AddBmxServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_AddBmxServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).AddBmxServer(ctx, req.(*BmxServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_AdminStartInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).AdminStartInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_AdminStartInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).AdminStartInstance(ctx, req.(*StartInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_AdminStopInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).AdminStopInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_AdminStopInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).AdminStopInstance(ctx, req.(*StopInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_AdminReleaseInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).AdminReleaseInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_AdminReleaseInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).AdminReleaseInstance(ctx, req.(*ReleaseInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetBmxServerIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBmxServerIdListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetBmxServerIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_GetBmxServerIdList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetBmxServerIdList(ctx, req.(*GetBmxServerIdListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetBmxChartData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBmxChartDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetBmxChartData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_GetBmxChartData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetBmxChartData(ctx, req.(*GetBmxChartDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetVisitsChartData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVisitsChartDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetVisitsChartData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_GetVisitsChartData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetVisitsChartData(ctx, req.(*GetVisitsChartDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceService_ServiceDesc is the grpc.ServiceDesc for DeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RpcStartInstance",
			Handler:    _DeviceService_RpcStartInstance_Handler,
		},
		{
			MethodName: "RpcStopInstance",
			Handler:    _DeviceService_RpcStopInstance_Handler,
		},
		{
			MethodName: "RpcReleaseInstance",
			Handler:    _DeviceService_RpcReleaseInstance_Handler,
		},
		{
			MethodName: "StartInstance",
			Handler:    _DeviceService_StartInstance_Handler,
		},
		{
			MethodName: "StopInstance",
			Handler:    _DeviceService_StopInstance_Handler,
		},
		{
			MethodName: "ReleaseInstance",
			Handler:    _DeviceService_ReleaseInstance_Handler,
		},
		{
			MethodName: "RenewalInstanceDetails",
			Handler:    _DeviceService_RenewalInstanceDetails_Handler,
		},
		{
			MethodName: "SelectUserInstanceList",
			Handler:    _DeviceService_SelectUserInstanceList_Handler,
		},
		{
			MethodName: "GetUserInstanceInfo",
			Handler:    _DeviceService_GetUserInstanceInfo_Handler,
		},
		{
			MethodName: "GetImageList",
			Handler:    _DeviceService_GetImageList_Handler,
		},
		{
			MethodName: "SetInstanceName",
			Handler:    _DeviceService_SetInstanceName_Handler,
		},
		{
			MethodName: "SelectImageList",
			Handler:    _DeviceService_SelectImageList_Handler,
		},
		{
			MethodName: "UpdateImage",
			Handler:    _DeviceService_UpdateImage_Handler,
		},
		{
			MethodName: "AddImage",
			Handler:    _DeviceService_AddImage_Handler,
		},
		{
			MethodName: "DeleteImage",
			Handler:    _DeviceService_DeleteImage_Handler,
		},
		{
			MethodName: "QueryBmxServer",
			Handler:    _DeviceService_QueryBmxServer_Handler,
		},
		{
			MethodName: "UpdateBmxServerDiskId",
			Handler:    _DeviceService_UpdateBmxServerDiskId_Handler,
		},
		{
			MethodName: "QueryDevice",
			Handler:    _DeviceService_QueryDevice_Handler,
		},
		{
			MethodName: "QueryClientLabel",
			Handler:    _DeviceService_QueryClientLabel_Handler,
		},
		{
			MethodName: "QueryDiskInfo",
			Handler:    _DeviceService_QueryDiskInfo_Handler,
		},
		{
			MethodName: "AddDiskInfo",
			Handler:    _DeviceService_AddDiskInfo_Handler,
		},
		{
			MethodName: "DeleteDiskInfo",
			Handler:    _DeviceService_DeleteDiskInfo_Handler,
		},
		{
			MethodName: "UpdateDiskInfo",
			Handler:    _DeviceService_UpdateDiskInfo_Handler,
		},
		{
			MethodName: "InstancePowerOnOffRecord",
			Handler:    _DeviceService_InstancePowerOnOffRecord_Handler,
		},
		{
			MethodName: "BatchUpdateBmxServerDiskId",
			Handler:    _DeviceService_BatchUpdateBmxServerDiskId_Handler,
		},
		{
			MethodName: "QueryBmxServerByDisk",
			Handler:    _DeviceService_QueryBmxServerByDisk_Handler,
		},
		{
			MethodName: "QueryDiskHistoryBasedOn",
			Handler:    _DeviceService_QueryDiskHistoryBasedOn_Handler,
		},
		{
			MethodName: "QueryPidExists",
			Handler:    _DeviceService_QueryPidExists_Handler,
		},
		{
			MethodName: "QueryInstancePage",
			Handler:    _DeviceService_QueryInstancePage_Handler,
		},
		{
			MethodName: "UpdateInstance",
			Handler:    _DeviceService_UpdateInstance_Handler,
		},
		{
			MethodName: "AddBmxServer",
			Handler:    _DeviceService_AddBmxServer_Handler,
		},
		{
			MethodName: "AdminStartInstance",
			Handler:    _DeviceService_AdminStartInstance_Handler,
		},
		{
			MethodName: "AdminStopInstance",
			Handler:    _DeviceService_AdminStopInstance_Handler,
		},
		{
			MethodName: "AdminReleaseInstance",
			Handler:    _DeviceService_AdminReleaseInstance_Handler,
		},
		{
			MethodName: "GetBmxServerIdList",
			Handler:    _DeviceService_GetBmxServerIdList_Handler,
		},
		{
			MethodName: "GetBmxChartData",
			Handler:    _DeviceService_GetBmxChartData_Handler,
		},
		{
			MethodName: "GetVisitsChartData",
			Handler:    _DeviceService_GetVisitsChartData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device.proto",
}
