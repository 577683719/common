// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: device.proto

package device

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetVisitsChartDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVisitsChartDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVisitsChartDataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVisitsChartDataRequestMultiError, or nil if none found.
func (m *GetVisitsChartDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVisitsChartDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Interval

	if len(errors) > 0 {
		return GetVisitsChartDataRequestMultiError(errors)
	}

	return nil
}

// GetVisitsChartDataRequestMultiError is an error wrapping multiple validation
// errors returned by GetVisitsChartDataRequest.ValidateAll() if the
// designated constraints aren't met.
type GetVisitsChartDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVisitsChartDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVisitsChartDataRequestMultiError) AllErrors() []error { return m }

// GetVisitsChartDataRequestValidationError is the validation error returned by
// GetVisitsChartDataRequest.Validate if the designated constraints aren't met.
type GetVisitsChartDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVisitsChartDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVisitsChartDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVisitsChartDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVisitsChartDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVisitsChartDataRequestValidationError) ErrorName() string {
	return "GetVisitsChartDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVisitsChartDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVisitsChartDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVisitsChartDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVisitsChartDataRequestValidationError{}

// Validate checks the field values on GetVisitsChartDataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVisitsChartDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVisitsChartDataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVisitsChartDataResponseMultiError, or nil if none found.
func (m *GetVisitsChartDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVisitsChartDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVisitsChartDataResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVisitsChartDataResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVisitsChartDataResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVisitsChartDataResponseMultiError(errors)
	}

	return nil
}

// GetVisitsChartDataResponseMultiError is an error wrapping multiple
// validation errors returned by GetVisitsChartDataResponse.ValidateAll() if
// the designated constraints aren't met.
type GetVisitsChartDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVisitsChartDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVisitsChartDataResponseMultiError) AllErrors() []error { return m }

// GetVisitsChartDataResponseValidationError is the validation error returned
// by GetVisitsChartDataResponse.Validate if the designated constraints aren't met.
type GetVisitsChartDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVisitsChartDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVisitsChartDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVisitsChartDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVisitsChartDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVisitsChartDataResponseValidationError) ErrorName() string {
	return "GetVisitsChartDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVisitsChartDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVisitsChartDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVisitsChartDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVisitsChartDataResponseValidationError{}

// Validate checks the field values on VisitsChartData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VisitsChartData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VisitsChartData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VisitsChartDataMultiError, or nil if none found.
func (m *VisitsChartData) ValidateAll() error {
	return m.validate(true)
}

func (m *VisitsChartData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VisitsChartDataMultiError(errors)
	}

	return nil
}

// VisitsChartDataMultiError is an error wrapping multiple validation errors
// returned by VisitsChartData.ValidateAll() if the designated constraints
// aren't met.
type VisitsChartDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VisitsChartDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VisitsChartDataMultiError) AllErrors() []error { return m }

// VisitsChartDataValidationError is the validation error returned by
// VisitsChartData.Validate if the designated constraints aren't met.
type VisitsChartDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VisitsChartDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VisitsChartDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VisitsChartDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VisitsChartDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VisitsChartDataValidationError) ErrorName() string { return "VisitsChartDataValidationError" }

// Error satisfies the builtin error interface
func (e VisitsChartDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVisitsChartData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VisitsChartDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VisitsChartDataValidationError{}

// Validate checks the field values on GetBmxServerIdListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBmxServerIdListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBmxServerIdListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBmxServerIdListRequestMultiError, or nil if none found.
func (m *GetBmxServerIdListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBmxServerIdListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetBmxServerIdListRequestMultiError(errors)
	}

	return nil
}

// GetBmxServerIdListRequestMultiError is an error wrapping multiple validation
// errors returned by GetBmxServerIdListRequest.ValidateAll() if the
// designated constraints aren't met.
type GetBmxServerIdListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBmxServerIdListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBmxServerIdListRequestMultiError) AllErrors() []error { return m }

// GetBmxServerIdListRequestValidationError is the validation error returned by
// GetBmxServerIdListRequest.Validate if the designated constraints aren't met.
type GetBmxServerIdListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBmxServerIdListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBmxServerIdListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBmxServerIdListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBmxServerIdListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBmxServerIdListRequestValidationError) ErrorName() string {
	return "GetBmxServerIdListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBmxServerIdListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBmxServerIdListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBmxServerIdListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBmxServerIdListRequestValidationError{}

// Validate checks the field values on GetBmxServerIdListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBmxServerIdListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBmxServerIdListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBmxServerIdListResponseMultiError, or nil if none found.
func (m *GetBmxServerIdListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBmxServerIdListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBmxServerIdListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBmxServerIdListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBmxServerIdListResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBmxServerIdListResponseMultiError(errors)
	}

	return nil
}

// GetBmxServerIdListResponseMultiError is an error wrapping multiple
// validation errors returned by GetBmxServerIdListResponse.ValidateAll() if
// the designated constraints aren't met.
type GetBmxServerIdListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBmxServerIdListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBmxServerIdListResponseMultiError) AllErrors() []error { return m }

// GetBmxServerIdListResponseValidationError is the validation error returned
// by GetBmxServerIdListResponse.Validate if the designated constraints aren't met.
type GetBmxServerIdListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBmxServerIdListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBmxServerIdListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBmxServerIdListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBmxServerIdListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBmxServerIdListResponseValidationError) ErrorName() string {
	return "GetBmxServerIdListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBmxServerIdListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBmxServerIdListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBmxServerIdListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBmxServerIdListResponseValidationError{}

// Validate checks the field values on BmxServerIdList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BmxServerIdList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BmxServerIdList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BmxServerIdListMultiError, or nil if none found.
func (m *BmxServerIdList) ValidateAll() error {
	return m.validate(true)
}

func (m *BmxServerIdList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BmxServerIdListMultiError(errors)
	}

	return nil
}

// BmxServerIdListMultiError is an error wrapping multiple validation errors
// returned by BmxServerIdList.ValidateAll() if the designated constraints
// aren't met.
type BmxServerIdListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BmxServerIdListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BmxServerIdListMultiError) AllErrors() []error { return m }

// BmxServerIdListValidationError is the validation error returned by
// BmxServerIdList.Validate if the designated constraints aren't met.
type BmxServerIdListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BmxServerIdListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BmxServerIdListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BmxServerIdListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BmxServerIdListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BmxServerIdListValidationError) ErrorName() string { return "BmxServerIdListValidationError" }

// Error satisfies the builtin error interface
func (e BmxServerIdListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBmxServerIdList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BmxServerIdListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BmxServerIdListValidationError{}

// Validate checks the field values on GetBmxChartDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBmxChartDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBmxChartDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBmxChartDataRequestMultiError, or nil if none found.
func (m *GetBmxChartDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBmxChartDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerId

	// no validation rules for Interval

	if len(errors) > 0 {
		return GetBmxChartDataRequestMultiError(errors)
	}

	return nil
}

// GetBmxChartDataRequestMultiError is an error wrapping multiple validation
// errors returned by GetBmxChartDataRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBmxChartDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBmxChartDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBmxChartDataRequestMultiError) AllErrors() []error { return m }

// GetBmxChartDataRequestValidationError is the validation error returned by
// GetBmxChartDataRequest.Validate if the designated constraints aren't met.
type GetBmxChartDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBmxChartDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBmxChartDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBmxChartDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBmxChartDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBmxChartDataRequestValidationError) ErrorName() string {
	return "GetBmxChartDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBmxChartDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBmxChartDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBmxChartDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBmxChartDataRequestValidationError{}

// Validate checks the field values on GetBmxChartDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBmxChartDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBmxChartDataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBmxChartDataResponseMultiError, or nil if none found.
func (m *GetBmxChartDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBmxChartDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBmxChartDataResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBmxChartDataResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBmxChartDataResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBmxChartDataResponseMultiError(errors)
	}

	return nil
}

// GetBmxChartDataResponseMultiError is an error wrapping multiple validation
// errors returned by GetBmxChartDataResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBmxChartDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBmxChartDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBmxChartDataResponseMultiError) AllErrors() []error { return m }

// GetBmxChartDataResponseValidationError is the validation error returned by
// GetBmxChartDataResponse.Validate if the designated constraints aren't met.
type GetBmxChartDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBmxChartDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBmxChartDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBmxChartDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBmxChartDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBmxChartDataResponseValidationError) ErrorName() string {
	return "GetBmxChartDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBmxChartDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBmxChartDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBmxChartDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBmxChartDataResponseValidationError{}

// Validate checks the field values on BmxChartData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BmxChartData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BmxChartData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BmxChartDataMultiError, or
// nil if none found.
func (m *BmxChartData) ValidateAll() error {
	return m.validate(true)
}

func (m *BmxChartData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BmxChartDataMultiError(errors)
	}

	return nil
}

// BmxChartDataMultiError is an error wrapping multiple validation errors
// returned by BmxChartData.ValidateAll() if the designated constraints aren't met.
type BmxChartDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BmxChartDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BmxChartDataMultiError) AllErrors() []error { return m }

// BmxChartDataValidationError is the validation error returned by
// BmxChartData.Validate if the designated constraints aren't met.
type BmxChartDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BmxChartDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BmxChartDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BmxChartDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BmxChartDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BmxChartDataValidationError) ErrorName() string { return "BmxChartDataValidationError" }

// Error satisfies the builtin error interface
func (e BmxChartDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBmxChartData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BmxChartDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BmxChartDataValidationError{}

// Validate checks the field values on SetInstanceNameResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetInstanceNameResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetInstanceNameResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetInstanceNameRespMultiError, or nil if none found.
func (m *SetInstanceNameResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetInstanceNameResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return SetInstanceNameRespMultiError(errors)
	}

	return nil
}

// SetInstanceNameRespMultiError is an error wrapping multiple validation
// errors returned by SetInstanceNameResp.ValidateAll() if the designated
// constraints aren't met.
type SetInstanceNameRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetInstanceNameRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetInstanceNameRespMultiError) AllErrors() []error { return m }

// SetInstanceNameRespValidationError is the validation error returned by
// SetInstanceNameResp.Validate if the designated constraints aren't met.
type SetInstanceNameRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetInstanceNameRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetInstanceNameRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetInstanceNameRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetInstanceNameRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetInstanceNameRespValidationError) ErrorName() string {
	return "SetInstanceNameRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetInstanceNameRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetInstanceNameResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetInstanceNameRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetInstanceNameRespValidationError{}

// Validate checks the field values on SetInstanceNameReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetInstanceNameReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetInstanceNameReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetInstanceNameReqMultiError, or nil if none found.
func (m *SetInstanceNameReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetInstanceNameReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceName

	// no validation rules for InstanceId

	if len(errors) > 0 {
		return SetInstanceNameReqMultiError(errors)
	}

	return nil
}

// SetInstanceNameReqMultiError is an error wrapping multiple validation errors
// returned by SetInstanceNameReq.ValidateAll() if the designated constraints
// aren't met.
type SetInstanceNameReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetInstanceNameReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetInstanceNameReqMultiError) AllErrors() []error { return m }

// SetInstanceNameReqValidationError is the validation error returned by
// SetInstanceNameReq.Validate if the designated constraints aren't met.
type SetInstanceNameReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetInstanceNameReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetInstanceNameReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetInstanceNameReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetInstanceNameReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetInstanceNameReqValidationError) ErrorName() string {
	return "SetInstanceNameReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetInstanceNameReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetInstanceNameReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetInstanceNameReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetInstanceNameReqValidationError{}

// Validate checks the field values on AddBmxServerResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddBmxServerResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBmxServerResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddBmxServerRespMultiError, or nil if none found.
func (m *AddBmxServerResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBmxServerResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddBmxServerRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddBmxServerRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddBmxServerRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddBmxServerRespMultiError(errors)
	}

	return nil
}

// AddBmxServerRespMultiError is an error wrapping multiple validation errors
// returned by AddBmxServerResp.ValidateAll() if the designated constraints
// aren't met.
type AddBmxServerRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBmxServerRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBmxServerRespMultiError) AllErrors() []error { return m }

// AddBmxServerRespValidationError is the validation error returned by
// AddBmxServerResp.Validate if the designated constraints aren't met.
type AddBmxServerRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBmxServerRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBmxServerRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBmxServerRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBmxServerRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBmxServerRespValidationError) ErrorName() string { return "AddBmxServerRespValidationError" }

// Error satisfies the builtin error interface
func (e AddBmxServerRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBmxServerResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBmxServerRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBmxServerRespValidationError{}

// Validate checks the field values on QueryInstancePageResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryInstancePageResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryInstancePageResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryInstancePageRespMultiError, or nil if none found.
func (m *QueryInstancePageResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryInstancePageResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryInstancePageRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryInstancePageRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryInstancePageRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryInstancePageRespMultiError(errors)
	}

	return nil
}

// QueryInstancePageRespMultiError is an error wrapping multiple validation
// errors returned by QueryInstancePageResp.ValidateAll() if the designated
// constraints aren't met.
type QueryInstancePageRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryInstancePageRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryInstancePageRespMultiError) AllErrors() []error { return m }

// QueryInstancePageRespValidationError is the validation error returned by
// QueryInstancePageResp.Validate if the designated constraints aren't met.
type QueryInstancePageRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryInstancePageRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryInstancePageRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryInstancePageRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryInstancePageRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryInstancePageRespValidationError) ErrorName() string {
	return "QueryInstancePageRespValidationError"
}

// Error satisfies the builtin error interface
func (e QueryInstancePageRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryInstancePageResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryInstancePageRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryInstancePageRespValidationError{}

// Validate checks the field values on UpdateInstanceResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateInstanceResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateInstanceResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateInstanceRespMultiError, or nil if none found.
func (m *UpdateInstanceResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInstanceResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateInstanceRespMultiError(errors)
	}

	return nil
}

// UpdateInstanceRespMultiError is an error wrapping multiple validation errors
// returned by UpdateInstanceResp.ValidateAll() if the designated constraints
// aren't met.
type UpdateInstanceRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInstanceRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInstanceRespMultiError) AllErrors() []error { return m }

// UpdateInstanceRespValidationError is the validation error returned by
// UpdateInstanceResp.Validate if the designated constraints aren't met.
type UpdateInstanceRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInstanceRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInstanceRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInstanceRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInstanceRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInstanceRespValidationError) ErrorName() string {
	return "UpdateInstanceRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInstanceRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInstanceResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInstanceRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInstanceRespValidationError{}

// Validate checks the field values on InstancePageResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InstancePageResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstancePageResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstancePageRespMultiError, or nil if none found.
func (m *InstancePageResp) ValidateAll() error {
	return m.validate(true)
}

func (m *InstancePageResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Size

	// no validation rules for Current

	for idx, item := range m.GetRows() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstancePageRespValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstancePageRespValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstancePageRespValidationError{
					field:  fmt.Sprintf("Rows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InstancePageRespMultiError(errors)
	}

	return nil
}

// InstancePageRespMultiError is an error wrapping multiple validation errors
// returned by InstancePageResp.ValidateAll() if the designated constraints
// aren't met.
type InstancePageRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstancePageRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstancePageRespMultiError) AllErrors() []error { return m }

// InstancePageRespValidationError is the validation error returned by
// InstancePageResp.Validate if the designated constraints aren't met.
type InstancePageRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstancePageRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstancePageRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstancePageRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstancePageRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstancePageRespValidationError) ErrorName() string { return "InstancePageRespValidationError" }

// Error satisfies the builtin error interface
func (e InstancePageRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstancePageResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstancePageRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstancePageRespValidationError{}

// Validate checks the field values on Instance with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Instance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Instance with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InstanceMultiError, or nil
// if none found.
func (m *Instance) ValidateAll() error {
	return m.validate(true)
}

func (m *Instance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for NodeId

	// no validation rules for ProductId

	// no validation rules for ImageName

	// no validation rules for InstanceStatus

	// no validation rules for YamlPath

	// no validation rules for SysdiskPath

	// no validation rules for DatadiskPath

	// no validation rules for SysdiskSize

	// no validation rules for DatadiskSize

	// no validation rules for SysvolumeId

	// no validation rules for Password

	// no validation rules for FrpServer

	// no validation rules for FrpUuid

	// no validation rules for SshPort

	// no validation rules for JupyterPort

	// no validation rules for SysAttachment

	// no validation rules for DatavolumeId

	// no validation rules for DataAttachment

	// no validation rules for Token

	// no validation rules for StartTime

	// no validation rules for StopTime

	// no validation rules for Reason

	// no validation rules for AutoReleaseTime

	// no validation rules for UserId

	// no validation rules for UseTime

	// no validation rules for ProductName

	// no validation rules for MacAddr

	// no validation rules for PageNum

	// no validation rules for PageSize

	if len(errors) > 0 {
		return InstanceMultiError(errors)
	}

	return nil
}

// InstanceMultiError is an error wrapping multiple validation errors returned
// by Instance.ValidateAll() if the designated constraints aren't met.
type InstanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceMultiError) AllErrors() []error { return m }

// InstanceValidationError is the validation error returned by
// Instance.Validate if the designated constraints aren't met.
type InstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceValidationError) ErrorName() string { return "InstanceValidationError" }

// Error satisfies the builtin error interface
func (e InstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceValidationError{}

// Validate checks the field values on QueryPidExistsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryPidExistsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryPidExistsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryPidExistsReqMultiError, or nil if none found.
func (m *QueryPidExistsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryPidExistsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pid

	if len(errors) > 0 {
		return QueryPidExistsReqMultiError(errors)
	}

	return nil
}

// QueryPidExistsReqMultiError is an error wrapping multiple validation errors
// returned by QueryPidExistsReq.ValidateAll() if the designated constraints
// aren't met.
type QueryPidExistsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryPidExistsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryPidExistsReqMultiError) AllErrors() []error { return m }

// QueryPidExistsReqValidationError is the validation error returned by
// QueryPidExistsReq.Validate if the designated constraints aren't met.
type QueryPidExistsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryPidExistsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryPidExistsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryPidExistsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryPidExistsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryPidExistsReqValidationError) ErrorName() string {
	return "QueryPidExistsReqValidationError"
}

// Error satisfies the builtin error interface
func (e QueryPidExistsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryPidExistsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryPidExistsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryPidExistsReqValidationError{}

// Validate checks the field values on QueryPidExistsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryPidExistsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryPidExistsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryPidExistsRespMultiError, or nil if none found.
func (m *QueryPidExistsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryPidExistsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return QueryPidExistsRespMultiError(errors)
	}

	return nil
}

// QueryPidExistsRespMultiError is an error wrapping multiple validation errors
// returned by QueryPidExistsResp.ValidateAll() if the designated constraints
// aren't met.
type QueryPidExistsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryPidExistsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryPidExistsRespMultiError) AllErrors() []error { return m }

// QueryPidExistsRespValidationError is the validation error returned by
// QueryPidExistsResp.Validate if the designated constraints aren't met.
type QueryPidExistsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryPidExistsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryPidExistsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryPidExistsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryPidExistsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryPidExistsRespValidationError) ErrorName() string {
	return "QueryPidExistsRespValidationError"
}

// Error satisfies the builtin error interface
func (e QueryPidExistsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryPidExistsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryPidExistsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryPidExistsRespValidationError{}

// Validate checks the field values on RenewalInstanceDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenewalInstanceDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenewalInstanceDetailsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RenewalInstanceDetailsRequestMultiError, or nil if none found.
func (m *RenewalInstanceDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenewalInstanceDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for BillingType

	// no validation rules for ExpirationDate

	if len(errors) > 0 {
		return RenewalInstanceDetailsRequestMultiError(errors)
	}

	return nil
}

// RenewalInstanceDetailsRequestMultiError is an error wrapping multiple
// validation errors returned by RenewalInstanceDetailsRequest.ValidateAll()
// if the designated constraints aren't met.
type RenewalInstanceDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenewalInstanceDetailsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenewalInstanceDetailsRequestMultiError) AllErrors() []error { return m }

// RenewalInstanceDetailsRequestValidationError is the validation error
// returned by RenewalInstanceDetailsRequest.Validate if the designated
// constraints aren't met.
type RenewalInstanceDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenewalInstanceDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenewalInstanceDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenewalInstanceDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenewalInstanceDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenewalInstanceDetailsRequestValidationError) ErrorName() string {
	return "RenewalInstanceDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenewalInstanceDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenewalInstanceDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenewalInstanceDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenewalInstanceDetailsRequestValidationError{}

// Validate checks the field values on RenewalInstanceDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenewalInstanceDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenewalInstanceDetailsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RenewalInstanceDetailsResponseMultiError, or nil if none found.
func (m *RenewalInstanceDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenewalInstanceDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RenewalInstanceDetailsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RenewalInstanceDetailsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RenewalInstanceDetailsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RenewalInstanceDetailsResponseMultiError(errors)
	}

	return nil
}

// RenewalInstanceDetailsResponseMultiError is an error wrapping multiple
// validation errors returned by RenewalInstanceDetailsResponse.ValidateAll()
// if the designated constraints aren't met.
type RenewalInstanceDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenewalInstanceDetailsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenewalInstanceDetailsResponseMultiError) AllErrors() []error { return m }

// RenewalInstanceDetailsResponseValidationError is the validation error
// returned by RenewalInstanceDetailsResponse.Validate if the designated
// constraints aren't met.
type RenewalInstanceDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenewalInstanceDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenewalInstanceDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenewalInstanceDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenewalInstanceDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenewalInstanceDetailsResponseValidationError) ErrorName() string {
	return "RenewalInstanceDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenewalInstanceDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenewalInstanceDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenewalInstanceDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenewalInstanceDetailsResponseValidationError{}

// Validate checks the field values on RenewalInstanceDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenewalInstanceDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenewalInstanceDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenewalInstanceDetailsMultiError, or nil if none found.
func (m *RenewalInstanceDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *RenewalInstanceDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for SpecificationDetails

	// no validation rules for ExpirationDate

	// no validation rules for ExpirationDateAfterRenewal

	// no validation rules for AmountMoney

	// no validation rules for ProductId

	if len(errors) > 0 {
		return RenewalInstanceDetailsMultiError(errors)
	}

	return nil
}

// RenewalInstanceDetailsMultiError is an error wrapping multiple validation
// errors returned by RenewalInstanceDetails.ValidateAll() if the designated
// constraints aren't met.
type RenewalInstanceDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenewalInstanceDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenewalInstanceDetailsMultiError) AllErrors() []error { return m }

// RenewalInstanceDetailsValidationError is the validation error returned by
// RenewalInstanceDetails.Validate if the designated constraints aren't met.
type RenewalInstanceDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenewalInstanceDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenewalInstanceDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenewalInstanceDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenewalInstanceDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenewalInstanceDetailsValidationError) ErrorName() string {
	return "RenewalInstanceDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e RenewalInstanceDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenewalInstanceDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenewalInstanceDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenewalInstanceDetailsValidationError{}

// Validate checks the field values on QueryDiskHistoryBasedOnResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryDiskHistoryBasedOnResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryDiskHistoryBasedOnResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryDiskHistoryBasedOnResponseMultiError, or nil if none found.
func (m *QueryDiskHistoryBasedOnResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryDiskHistoryBasedOnResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryDiskHistoryBasedOnResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryDiskHistoryBasedOnResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryDiskHistoryBasedOnResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryDiskHistoryBasedOnResponseMultiError(errors)
	}

	return nil
}

// QueryDiskHistoryBasedOnResponseMultiError is an error wrapping multiple
// validation errors returned by QueryDiskHistoryBasedOnResponse.ValidateAll()
// if the designated constraints aren't met.
type QueryDiskHistoryBasedOnResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryDiskHistoryBasedOnResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryDiskHistoryBasedOnResponseMultiError) AllErrors() []error { return m }

// QueryDiskHistoryBasedOnResponseValidationError is the validation error
// returned by QueryDiskHistoryBasedOnResponse.Validate if the designated
// constraints aren't met.
type QueryDiskHistoryBasedOnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryDiskHistoryBasedOnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryDiskHistoryBasedOnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryDiskHistoryBasedOnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryDiskHistoryBasedOnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryDiskHistoryBasedOnResponseValidationError) ErrorName() string {
	return "QueryDiskHistoryBasedOnResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryDiskHistoryBasedOnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryDiskHistoryBasedOnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryDiskHistoryBasedOnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryDiskHistoryBasedOnResponseValidationError{}

// Validate checks the field values on QueryDiskHistoryBasedOn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryDiskHistoryBasedOn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryDiskHistoryBasedOn with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryDiskHistoryBasedOnMultiError, or nil if none found.
func (m *QueryDiskHistoryBasedOn) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryDiskHistoryBasedOn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Id

	// no validation rules for Pid

	// no validation rules for DiskID

	// no validation rules for Type

	// no validation rules for SnapshotID

	// no validation rules for Version

	// no validation rules for MachineType

	// no validation rules for Initiator

	// no validation rules for UpdateContent

	// no validation rules for ParentID

	// no validation rules for Description

	// no validation rules for UpdateTime

	// no validation rules for CreateTime

	// no validation rules for DiskTableRecordsId

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryDiskHistoryBasedOnValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryDiskHistoryBasedOnValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryDiskHistoryBasedOnValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryDiskHistoryBasedOnMultiError(errors)
	}

	return nil
}

// QueryDiskHistoryBasedOnMultiError is an error wrapping multiple validation
// errors returned by QueryDiskHistoryBasedOn.ValidateAll() if the designated
// constraints aren't met.
type QueryDiskHistoryBasedOnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryDiskHistoryBasedOnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryDiskHistoryBasedOnMultiError) AllErrors() []error { return m }

// QueryDiskHistoryBasedOnValidationError is the validation error returned by
// QueryDiskHistoryBasedOn.Validate if the designated constraints aren't met.
type QueryDiskHistoryBasedOnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryDiskHistoryBasedOnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryDiskHistoryBasedOnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryDiskHistoryBasedOnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryDiskHistoryBasedOnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryDiskHistoryBasedOnValidationError) ErrorName() string {
	return "QueryDiskHistoryBasedOnValidationError"
}

// Error satisfies the builtin error interface
func (e QueryDiskHistoryBasedOnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryDiskHistoryBasedOn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryDiskHistoryBasedOnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryDiskHistoryBasedOnValidationError{}

// Validate checks the field values on DiskTableRecords with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DiskTableRecords) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiskTableRecords with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiskTableRecordsMultiError, or nil if none found.
func (m *DiskTableRecords) ValidateAll() error {
	return m.validate(true)
}

func (m *DiskTableRecords) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiskID

	// no validation rules for Type

	// no validation rules for SnapshotID

	// no validation rules for Version

	// no validation rules for MachineType

	// no validation rules for Initiator

	// no validation rules for UpdateContent

	// no validation rules for ParentID

	// no validation rules for Description

	// no validation rules for UpdateTime

	// no validation rules for CreateTime

	// no validation rules for Id

	if len(errors) > 0 {
		return DiskTableRecordsMultiError(errors)
	}

	return nil
}

// DiskTableRecordsMultiError is an error wrapping multiple validation errors
// returned by DiskTableRecords.ValidateAll() if the designated constraints
// aren't met.
type DiskTableRecordsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiskTableRecordsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiskTableRecordsMultiError) AllErrors() []error { return m }

// DiskTableRecordsValidationError is the validation error returned by
// DiskTableRecords.Validate if the designated constraints aren't met.
type DiskTableRecordsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiskTableRecordsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiskTableRecordsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiskTableRecordsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiskTableRecordsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiskTableRecordsValidationError) ErrorName() string { return "DiskTableRecordsValidationError" }

// Error satisfies the builtin error interface
func (e DiskTableRecordsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiskTableRecords.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiskTableRecordsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiskTableRecordsValidationError{}

// Validate checks the field values on QueryDiskHistoryBasedOnRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryDiskHistoryBasedOnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryDiskHistoryBasedOnRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryDiskHistoryBasedOnRequestMultiError, or nil if none found.
func (m *QueryDiskHistoryBasedOnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryDiskHistoryBasedOnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiskId

	// no validation rules for SnapshotId

	if len(errors) > 0 {
		return QueryDiskHistoryBasedOnRequestMultiError(errors)
	}

	return nil
}

// QueryDiskHistoryBasedOnRequestMultiError is an error wrapping multiple
// validation errors returned by QueryDiskHistoryBasedOnRequest.ValidateAll()
// if the designated constraints aren't met.
type QueryDiskHistoryBasedOnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryDiskHistoryBasedOnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryDiskHistoryBasedOnRequestMultiError) AllErrors() []error { return m }

// QueryDiskHistoryBasedOnRequestValidationError is the validation error
// returned by QueryDiskHistoryBasedOnRequest.Validate if the designated
// constraints aren't met.
type QueryDiskHistoryBasedOnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryDiskHistoryBasedOnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryDiskHistoryBasedOnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryDiskHistoryBasedOnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryDiskHistoryBasedOnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryDiskHistoryBasedOnRequestValidationError) ErrorName() string {
	return "QueryDiskHistoryBasedOnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryDiskHistoryBasedOnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryDiskHistoryBasedOnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryDiskHistoryBasedOnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryDiskHistoryBasedOnRequestValidationError{}

// Validate checks the field values on BatchUpdateBmxServerDiskIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BatchUpdateBmxServerDiskIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchUpdateBmxServerDiskIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BatchUpdateBmxServerDiskIdRequestMultiError, or nil if none found.
func (m *BatchUpdateBmxServerDiskIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchUpdateBmxServerDiskIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiskId

	if len(errors) > 0 {
		return BatchUpdateBmxServerDiskIdRequestMultiError(errors)
	}

	return nil
}

// BatchUpdateBmxServerDiskIdRequestMultiError is an error wrapping multiple
// validation errors returned by
// BatchUpdateBmxServerDiskIdRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchUpdateBmxServerDiskIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchUpdateBmxServerDiskIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchUpdateBmxServerDiskIdRequestMultiError) AllErrors() []error { return m }

// BatchUpdateBmxServerDiskIdRequestValidationError is the validation error
// returned by BatchUpdateBmxServerDiskIdRequest.Validate if the designated
// constraints aren't met.
type BatchUpdateBmxServerDiskIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchUpdateBmxServerDiskIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchUpdateBmxServerDiskIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchUpdateBmxServerDiskIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchUpdateBmxServerDiskIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchUpdateBmxServerDiskIdRequestValidationError) ErrorName() string {
	return "BatchUpdateBmxServerDiskIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchUpdateBmxServerDiskIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchUpdateBmxServerDiskIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchUpdateBmxServerDiskIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchUpdateBmxServerDiskIdRequestValidationError{}

// Validate checks the field values on BatchUpdateBmxServerDiskIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BatchUpdateBmxServerDiskIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchUpdateBmxServerDiskIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BatchUpdateBmxServerDiskIdResponseMultiError, or nil if none found.
func (m *BatchUpdateBmxServerDiskIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchUpdateBmxServerDiskIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return BatchUpdateBmxServerDiskIdResponseMultiError(errors)
	}

	return nil
}

// BatchUpdateBmxServerDiskIdResponseMultiError is an error wrapping multiple
// validation errors returned by
// BatchUpdateBmxServerDiskIdResponse.ValidateAll() if the designated
// constraints aren't met.
type BatchUpdateBmxServerDiskIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchUpdateBmxServerDiskIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchUpdateBmxServerDiskIdResponseMultiError) AllErrors() []error { return m }

// BatchUpdateBmxServerDiskIdResponseValidationError is the validation error
// returned by BatchUpdateBmxServerDiskIdResponse.Validate if the designated
// constraints aren't met.
type BatchUpdateBmxServerDiskIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchUpdateBmxServerDiskIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchUpdateBmxServerDiskIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchUpdateBmxServerDiskIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchUpdateBmxServerDiskIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchUpdateBmxServerDiskIdResponseValidationError) ErrorName() string {
	return "BatchUpdateBmxServerDiskIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchUpdateBmxServerDiskIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchUpdateBmxServerDiskIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchUpdateBmxServerDiskIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchUpdateBmxServerDiskIdResponseValidationError{}

// Validate checks the field values on QueryBmxServerByDiskRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryBmxServerByDiskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryBmxServerByDiskRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryBmxServerByDiskRequestMultiError, or nil if none found.
func (m *QueryBmxServerByDiskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryBmxServerByDiskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiskId

	if len(errors) > 0 {
		return QueryBmxServerByDiskRequestMultiError(errors)
	}

	return nil
}

// QueryBmxServerByDiskRequestMultiError is an error wrapping multiple
// validation errors returned by QueryBmxServerByDiskRequest.ValidateAll() if
// the designated constraints aren't met.
type QueryBmxServerByDiskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryBmxServerByDiskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryBmxServerByDiskRequestMultiError) AllErrors() []error { return m }

// QueryBmxServerByDiskRequestValidationError is the validation error returned
// by QueryBmxServerByDiskRequest.Validate if the designated constraints
// aren't met.
type QueryBmxServerByDiskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryBmxServerByDiskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryBmxServerByDiskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryBmxServerByDiskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryBmxServerByDiskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryBmxServerByDiskRequestValidationError) ErrorName() string {
	return "QueryBmxServerByDiskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryBmxServerByDiskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryBmxServerByDiskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryBmxServerByDiskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryBmxServerByDiskRequestValidationError{}

// Validate checks the field values on QueryBmxServerByDiskResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryBmxServerByDiskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryBmxServerByDiskResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryBmxServerByDiskResponseMultiError, or nil if none found.
func (m *QueryBmxServerByDiskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryBmxServerByDiskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return QueryBmxServerByDiskResponseMultiError(errors)
	}

	return nil
}

// QueryBmxServerByDiskResponseMultiError is an error wrapping multiple
// validation errors returned by QueryBmxServerByDiskResponse.ValidateAll() if
// the designated constraints aren't met.
type QueryBmxServerByDiskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryBmxServerByDiskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryBmxServerByDiskResponseMultiError) AllErrors() []error { return m }

// QueryBmxServerByDiskResponseValidationError is the validation error returned
// by QueryBmxServerByDiskResponse.Validate if the designated constraints
// aren't met.
type QueryBmxServerByDiskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryBmxServerByDiskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryBmxServerByDiskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryBmxServerByDiskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryBmxServerByDiskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryBmxServerByDiskResponseValidationError) ErrorName() string {
	return "QueryBmxServerByDiskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryBmxServerByDiskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryBmxServerByDiskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryBmxServerByDiskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryBmxServerByDiskResponseValidationError{}

// Validate checks the field values on InstancePowerOnOffRecordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstancePowerOnOffRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstancePowerOnOffRecordRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// InstancePowerOnOffRecordRequestMultiError, or nil if none found.
func (m *InstancePowerOnOffRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstancePowerOnOffRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for InstanceId

	// no validation rules for NodeId

	// no validation rules for ProductId

	// no validation rules for InstanceStatus

	// no validation rules for SysvolumeId

	// no validation rules for UserId

	// no validation rules for UseTime

	// no validation rules for ProductName

	// no validation rules for PageNum

	// no validation rules for PageSize

	if len(errors) > 0 {
		return InstancePowerOnOffRecordRequestMultiError(errors)
	}

	return nil
}

// InstancePowerOnOffRecordRequestMultiError is an error wrapping multiple
// validation errors returned by InstancePowerOnOffRecordRequest.ValidateAll()
// if the designated constraints aren't met.
type InstancePowerOnOffRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstancePowerOnOffRecordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstancePowerOnOffRecordRequestMultiError) AllErrors() []error { return m }

// InstancePowerOnOffRecordRequestValidationError is the validation error
// returned by InstancePowerOnOffRecordRequest.Validate if the designated
// constraints aren't met.
type InstancePowerOnOffRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstancePowerOnOffRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstancePowerOnOffRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstancePowerOnOffRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstancePowerOnOffRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstancePowerOnOffRecordRequestValidationError) ErrorName() string {
	return "InstancePowerOnOffRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstancePowerOnOffRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstancePowerOnOffRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstancePowerOnOffRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstancePowerOnOffRecordRequestValidationError{}

// Validate checks the field values on InstancePowerOnOffRecordResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *InstancePowerOnOffRecordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstancePowerOnOffRecordResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// InstancePowerOnOffRecordResponseMultiError, or nil if none found.
func (m *InstancePowerOnOffRecordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InstancePowerOnOffRecordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstancePowerOnOffRecordResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstancePowerOnOffRecordResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstancePowerOnOffRecordResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstancePowerOnOffRecordResponseMultiError(errors)
	}

	return nil
}

// InstancePowerOnOffRecordResponseMultiError is an error wrapping multiple
// validation errors returned by
// InstancePowerOnOffRecordResponse.ValidateAll() if the designated
// constraints aren't met.
type InstancePowerOnOffRecordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstancePowerOnOffRecordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstancePowerOnOffRecordResponseMultiError) AllErrors() []error { return m }

// InstancePowerOnOffRecordResponseValidationError is the validation error
// returned by InstancePowerOnOffRecordResponse.Validate if the designated
// constraints aren't met.
type InstancePowerOnOffRecordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstancePowerOnOffRecordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstancePowerOnOffRecordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstancePowerOnOffRecordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstancePowerOnOffRecordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstancePowerOnOffRecordResponseValidationError) ErrorName() string {
	return "InstancePowerOnOffRecordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InstancePowerOnOffRecordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstancePowerOnOffRecordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstancePowerOnOffRecordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstancePowerOnOffRecordResponseValidationError{}

// Validate checks the field values on InstanceTableRecordPage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceTableRecordPage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceTableRecordPage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceTableRecordPageMultiError, or nil if none found.
func (m *InstanceTableRecordPage) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceTableRecordPage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Size

	// no validation rules for Current

	for idx, item := range m.GetRows() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstanceTableRecordPageValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstanceTableRecordPageValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceTableRecordPageValidationError{
					field:  fmt.Sprintf("Rows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InstanceTableRecordPageMultiError(errors)
	}

	return nil
}

// InstanceTableRecordPageMultiError is an error wrapping multiple validation
// errors returned by InstanceTableRecordPage.ValidateAll() if the designated
// constraints aren't met.
type InstanceTableRecordPageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceTableRecordPageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceTableRecordPageMultiError) AllErrors() []error { return m }

// InstanceTableRecordPageValidationError is the validation error returned by
// InstanceTableRecordPage.Validate if the designated constraints aren't met.
type InstanceTableRecordPageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceTableRecordPageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceTableRecordPageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceTableRecordPageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceTableRecordPageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceTableRecordPageValidationError) ErrorName() string {
	return "InstanceTableRecordPageValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceTableRecordPageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceTableRecordPage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceTableRecordPageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceTableRecordPageValidationError{}

// Validate checks the field values on InstanceTableRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceTableRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceTableRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceTableRecordMultiError, or nil if none found.
func (m *InstanceTableRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceTableRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for InstanceId

	// no validation rules for NodeId

	// no validation rules for ProductId

	// no validation rules for ImageName

	// no validation rules for InstanceStatus

	// no validation rules for YamlPath

	// no validation rules for SysdiskPath

	// no validation rules for DatadiskPath

	// no validation rules for SysdiskSize

	// no validation rules for DatadiskSize

	// no validation rules for SysvolumeId

	// no validation rules for Password

	// no validation rules for FrpServer

	// no validation rules for FrpUuid

	// no validation rules for SshPort

	// no validation rules for JupyterPort

	// no validation rules for SysAttachment

	// no validation rules for DatavolumeId

	// no validation rules for DataAttachment

	// no validation rules for Token

	// no validation rules for StartTime

	// no validation rules for StopTime

	// no validation rules for Reason

	// no validation rules for AutoReleaseTime

	// no validation rules for UserId

	// no validation rules for UseTime

	// no validation rules for ProductName

	// no validation rules for MacAddr

	if len(errors) > 0 {
		return InstanceTableRecordMultiError(errors)
	}

	return nil
}

// InstanceTableRecordMultiError is an error wrapping multiple validation
// errors returned by InstanceTableRecord.ValidateAll() if the designated
// constraints aren't met.
type InstanceTableRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceTableRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceTableRecordMultiError) AllErrors() []error { return m }

// InstanceTableRecordValidationError is the validation error returned by
// InstanceTableRecord.Validate if the designated constraints aren't met.
type InstanceTableRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceTableRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceTableRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceTableRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceTableRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceTableRecordValidationError) ErrorName() string {
	return "InstanceTableRecordValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceTableRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceTableRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceTableRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceTableRecordValidationError{}

// Validate checks the field values on UpdateBmxServerDiskIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBmxServerDiskIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBmxServerDiskIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBmxServerDiskIdRequestMultiError, or nil if none found.
func (m *UpdateBmxServerDiskIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBmxServerDiskIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerID

	// no validation rules for SysDiskID

	// no validation rules for DataDiskID

	// no validation rules for Comment

	if len(errors) > 0 {
		return UpdateBmxServerDiskIdRequestMultiError(errors)
	}

	return nil
}

// UpdateBmxServerDiskIdRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateBmxServerDiskIdRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateBmxServerDiskIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBmxServerDiskIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBmxServerDiskIdRequestMultiError) AllErrors() []error { return m }

// UpdateBmxServerDiskIdRequestValidationError is the validation error returned
// by UpdateBmxServerDiskIdRequest.Validate if the designated constraints
// aren't met.
type UpdateBmxServerDiskIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBmxServerDiskIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBmxServerDiskIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBmxServerDiskIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBmxServerDiskIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBmxServerDiskIdRequestValidationError) ErrorName() string {
	return "UpdateBmxServerDiskIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBmxServerDiskIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBmxServerDiskIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBmxServerDiskIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBmxServerDiskIdRequestValidationError{}

// Validate checks the field values on UpdateBmxServerDiskIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBmxServerDiskIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBmxServerDiskIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateBmxServerDiskIdResponseMultiError, or nil if none found.
func (m *UpdateBmxServerDiskIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBmxServerDiskIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateBmxServerDiskIdResponseMultiError(errors)
	}

	return nil
}

// UpdateBmxServerDiskIdResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateBmxServerDiskIdResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateBmxServerDiskIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBmxServerDiskIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBmxServerDiskIdResponseMultiError) AllErrors() []error { return m }

// UpdateBmxServerDiskIdResponseValidationError is the validation error
// returned by UpdateBmxServerDiskIdResponse.Validate if the designated
// constraints aren't met.
type UpdateBmxServerDiskIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBmxServerDiskIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBmxServerDiskIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBmxServerDiskIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBmxServerDiskIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBmxServerDiskIdResponseValidationError) ErrorName() string {
	return "UpdateBmxServerDiskIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBmxServerDiskIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBmxServerDiskIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBmxServerDiskIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBmxServerDiskIdResponseValidationError{}

// Validate checks the field values on AddDiskInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDiskInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDiskInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDiskInfoRequestMultiError, or nil if none found.
func (m *AddDiskInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDiskInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddDiskInfoRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddDiskInfoRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddDiskInfoRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddDiskInfoRequestMultiError(errors)
	}

	return nil
}

// AddDiskInfoRequestMultiError is an error wrapping multiple validation errors
// returned by AddDiskInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type AddDiskInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDiskInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDiskInfoRequestMultiError) AllErrors() []error { return m }

// AddDiskInfoRequestValidationError is the validation error returned by
// AddDiskInfoRequest.Validate if the designated constraints aren't met.
type AddDiskInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDiskInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDiskInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDiskInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDiskInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDiskInfoRequestValidationError) ErrorName() string {
	return "AddDiskInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddDiskInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDiskInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDiskInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDiskInfoRequestValidationError{}

// Validate checks the field values on AddDiskInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDiskInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDiskInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDiskInfoResponseMultiError, or nil if none found.
func (m *AddDiskInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDiskInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return AddDiskInfoResponseMultiError(errors)
	}

	return nil
}

// AddDiskInfoResponseMultiError is an error wrapping multiple validation
// errors returned by AddDiskInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type AddDiskInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDiskInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDiskInfoResponseMultiError) AllErrors() []error { return m }

// AddDiskInfoResponseValidationError is the validation error returned by
// AddDiskInfoResponse.Validate if the designated constraints aren't met.
type AddDiskInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDiskInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDiskInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDiskInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDiskInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDiskInfoResponseValidationError) ErrorName() string {
	return "AddDiskInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddDiskInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDiskInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDiskInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDiskInfoResponseValidationError{}

// Validate checks the field values on DeleteDiskInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDiskInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDiskInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDiskInfoRequestMultiError, or nil if none found.
func (m *DeleteDiskInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDiskInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiskID

	if len(errors) > 0 {
		return DeleteDiskInfoRequestMultiError(errors)
	}

	return nil
}

// DeleteDiskInfoRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDiskInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDiskInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDiskInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDiskInfoRequestMultiError) AllErrors() []error { return m }

// DeleteDiskInfoRequestValidationError is the validation error returned by
// DeleteDiskInfoRequest.Validate if the designated constraints aren't met.
type DeleteDiskInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDiskInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDiskInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDiskInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDiskInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDiskInfoRequestValidationError) ErrorName() string {
	return "DeleteDiskInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDiskInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDiskInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDiskInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDiskInfoRequestValidationError{}

// Validate checks the field values on DeleteDiskInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDiskInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDiskInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDiskInfoResponseMultiError, or nil if none found.
func (m *DeleteDiskInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDiskInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteDiskInfoResponseMultiError(errors)
	}

	return nil
}

// DeleteDiskInfoResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteDiskInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteDiskInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDiskInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDiskInfoResponseMultiError) AllErrors() []error { return m }

// DeleteDiskInfoResponseValidationError is the validation error returned by
// DeleteDiskInfoResponse.Validate if the designated constraints aren't met.
type DeleteDiskInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDiskInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDiskInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDiskInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDiskInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDiskInfoResponseValidationError) ErrorName() string {
	return "DeleteDiskInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDiskInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDiskInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDiskInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDiskInfoResponseValidationError{}

// Validate checks the field values on UpdateDiskInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDiskInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDiskInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDiskInfoRequestMultiError, or nil if none found.
func (m *UpdateDiskInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDiskInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDiskInfoRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDiskInfoRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDiskInfoRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDiskInfoRequestMultiError(errors)
	}

	return nil
}

// UpdateDiskInfoRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDiskInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDiskInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDiskInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDiskInfoRequestMultiError) AllErrors() []error { return m }

// UpdateDiskInfoRequestValidationError is the validation error returned by
// UpdateDiskInfoRequest.Validate if the designated constraints aren't met.
type UpdateDiskInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDiskInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDiskInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDiskInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDiskInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDiskInfoRequestValidationError) ErrorName() string {
	return "UpdateDiskInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDiskInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDiskInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDiskInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDiskInfoRequestValidationError{}

// Validate checks the field values on UpdateDiskInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDiskInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDiskInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDiskInfoResponseMultiError, or nil if none found.
func (m *UpdateDiskInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDiskInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateDiskInfoResponseMultiError(errors)
	}

	return nil
}

// UpdateDiskInfoResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateDiskInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateDiskInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDiskInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDiskInfoResponseMultiError) AllErrors() []error { return m }

// UpdateDiskInfoResponseValidationError is the validation error returned by
// UpdateDiskInfoResponse.Validate if the designated constraints aren't met.
type UpdateDiskInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDiskInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDiskInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDiskInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDiskInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDiskInfoResponseValidationError) ErrorName() string {
	return "UpdateDiskInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDiskInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDiskInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDiskInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDiskInfoResponseValidationError{}

// Validate checks the field values on QueryDiskInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryDiskInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryDiskInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryDiskInfoRequestMultiError, or nil if none found.
func (m *QueryDiskInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryDiskInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNum

	// no validation rules for PageSize

	// no validation rules for DiskId

	// no validation rules for DiskType

	if len(errors) > 0 {
		return QueryDiskInfoRequestMultiError(errors)
	}

	return nil
}

// QueryDiskInfoRequestMultiError is an error wrapping multiple validation
// errors returned by QueryDiskInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryDiskInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryDiskInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryDiskInfoRequestMultiError) AllErrors() []error { return m }

// QueryDiskInfoRequestValidationError is the validation error returned by
// QueryDiskInfoRequest.Validate if the designated constraints aren't met.
type QueryDiskInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryDiskInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryDiskInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryDiskInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryDiskInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryDiskInfoRequestValidationError) ErrorName() string {
	return "QueryDiskInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryDiskInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryDiskInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryDiskInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryDiskInfoRequestValidationError{}

// Validate checks the field values on QueryDiskInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryDiskInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryDiskInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryDiskInfoResponseMultiError, or nil if none found.
func (m *QueryDiskInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryDiskInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryDiskInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryDiskInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryDiskInfoResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryDiskInfoResponseMultiError(errors)
	}

	return nil
}

// QueryDiskInfoResponseMultiError is an error wrapping multiple validation
// errors returned by QueryDiskInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryDiskInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryDiskInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryDiskInfoResponseMultiError) AllErrors() []error { return m }

// QueryDiskInfoResponseValidationError is the validation error returned by
// QueryDiskInfoResponse.Validate if the designated constraints aren't met.
type QueryDiskInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryDiskInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryDiskInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryDiskInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryDiskInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryDiskInfoResponseValidationError) ErrorName() string {
	return "QueryDiskInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryDiskInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryDiskInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryDiskInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryDiskInfoResponseValidationError{}

// Validate checks the field values on QueryDiskInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryDiskInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryDiskInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryDiskInfoMultiError, or
// nil if none found.
func (m *QueryDiskInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryDiskInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Size

	// no validation rules for Current

	for idx, item := range m.GetRows() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryDiskInfoValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryDiskInfoValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryDiskInfoValidationError{
					field:  fmt.Sprintf("Rows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryDiskInfoMultiError(errors)
	}

	return nil
}

// QueryDiskInfoMultiError is an error wrapping multiple validation errors
// returned by QueryDiskInfo.ValidateAll() if the designated constraints
// aren't met.
type QueryDiskInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryDiskInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryDiskInfoMultiError) AllErrors() []error { return m }

// QueryDiskInfoValidationError is the validation error returned by
// QueryDiskInfo.Validate if the designated constraints aren't met.
type QueryDiskInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryDiskInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryDiskInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryDiskInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryDiskInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryDiskInfoValidationError) ErrorName() string { return "QueryDiskInfoValidationError" }

// Error satisfies the builtin error interface
func (e QueryDiskInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryDiskInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryDiskInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryDiskInfoValidationError{}

// Validate checks the field values on DiskInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DiskInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiskInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DiskInfoMultiError, or nil
// if none found.
func (m *DiskInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *DiskInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiskID

	// no validation rules for Type

	// no validation rules for SnapshotID

	// no validation rules for Version

	// no validation rules for MachineType

	// no validation rules for Initiator

	// no validation rules for UpdateContent

	// no validation rules for ParentID

	// no validation rules for Description

	// no validation rules for UpdateTime

	// no validation rules for CreateTime

	// no validation rules for GpuDriveVer

	// no validation rules for DatadiskSize

	if len(errors) > 0 {
		return DiskInfoMultiError(errors)
	}

	return nil
}

// DiskInfoMultiError is an error wrapping multiple validation errors returned
// by DiskInfo.ValidateAll() if the designated constraints aren't met.
type DiskInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiskInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiskInfoMultiError) AllErrors() []error { return m }

// DiskInfoValidationError is the validation error returned by
// DiskInfo.Validate if the designated constraints aren't met.
type DiskInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiskInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiskInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiskInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiskInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiskInfoValidationError) ErrorName() string { return "DiskInfoValidationError" }

// Error satisfies the builtin error interface
func (e DiskInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiskInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiskInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiskInfoValidationError{}

// Validate checks the field values on QueryClientLabelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryClientLabelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryClientLabelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryClientLabelRequestMultiError, or nil if none found.
func (m *QueryClientLabelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryClientLabelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNum

	// no validation rules for PageSize

	if len(errors) > 0 {
		return QueryClientLabelRequestMultiError(errors)
	}

	return nil
}

// QueryClientLabelRequestMultiError is an error wrapping multiple validation
// errors returned by QueryClientLabelRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryClientLabelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryClientLabelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryClientLabelRequestMultiError) AllErrors() []error { return m }

// QueryClientLabelRequestValidationError is the validation error returned by
// QueryClientLabelRequest.Validate if the designated constraints aren't met.
type QueryClientLabelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryClientLabelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryClientLabelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryClientLabelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryClientLabelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryClientLabelRequestValidationError) ErrorName() string {
	return "QueryClientLabelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryClientLabelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryClientLabelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryClientLabelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryClientLabelRequestValidationError{}

// Validate checks the field values on QueryClientLabelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryClientLabelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryClientLabelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryClientLabelResponseMultiError, or nil if none found.
func (m *QueryClientLabelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryClientLabelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryClientLabelResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryClientLabelResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryClientLabelResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryClientLabelResponseMultiError(errors)
	}

	return nil
}

// QueryClientLabelResponseMultiError is an error wrapping multiple validation
// errors returned by QueryClientLabelResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryClientLabelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryClientLabelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryClientLabelResponseMultiError) AllErrors() []error { return m }

// QueryClientLabelResponseValidationError is the validation error returned by
// QueryClientLabelResponse.Validate if the designated constraints aren't met.
type QueryClientLabelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryClientLabelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryClientLabelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryClientLabelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryClientLabelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryClientLabelResponseValidationError) ErrorName() string {
	return "QueryClientLabelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryClientLabelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryClientLabelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryClientLabelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryClientLabelResponseValidationError{}

// Validate checks the field values on QueryClientLabel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryClientLabel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryClientLabel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryClientLabelMultiError, or nil if none found.
func (m *QueryClientLabel) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryClientLabel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Size

	// no validation rules for Current

	for idx, item := range m.GetRows() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryClientLabelValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryClientLabelValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryClientLabelValidationError{
					field:  fmt.Sprintf("Rows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Label

	if len(errors) > 0 {
		return QueryClientLabelMultiError(errors)
	}

	return nil
}

// QueryClientLabelMultiError is an error wrapping multiple validation errors
// returned by QueryClientLabel.ValidateAll() if the designated constraints
// aren't met.
type QueryClientLabelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryClientLabelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryClientLabelMultiError) AllErrors() []error { return m }

// QueryClientLabelValidationError is the validation error returned by
// QueryClientLabel.Validate if the designated constraints aren't met.
type QueryClientLabelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryClientLabelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryClientLabelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryClientLabelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryClientLabelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryClientLabelValidationError) ErrorName() string { return "QueryClientLabelValidationError" }

// Error satisfies the builtin error interface
func (e QueryClientLabelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryClientLabel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryClientLabelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryClientLabelValidationError{}

// Validate checks the field values on LabelPage with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LabelPage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LabelPage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LabelPageMultiError, or nil
// if none found.
func (m *LabelPage) ValidateAll() error {
	return m.validate(true)
}

func (m *LabelPage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Label

	// no validation rules for BmxServerNum

	// no validation rules for DeviceNum

	// no validation rules for TotalPrice

	// no validation rules for SharingRatio

	// no validation rules for Profit

	// no validation rules for SettledAmount

	// no validation rules for UnsettledAmount

	// no validation rules for SettlementCount

	if len(errors) > 0 {
		return LabelPageMultiError(errors)
	}

	return nil
}

// LabelPageMultiError is an error wrapping multiple validation errors returned
// by LabelPage.ValidateAll() if the designated constraints aren't met.
type LabelPageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LabelPageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LabelPageMultiError) AllErrors() []error { return m }

// LabelPageValidationError is the validation error returned by
// LabelPage.Validate if the designated constraints aren't met.
type LabelPageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabelPageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabelPageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabelPageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabelPageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabelPageValidationError) ErrorName() string { return "LabelPageValidationError" }

// Error satisfies the builtin error interface
func (e LabelPageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabelPage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabelPageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabelPageValidationError{}

// Validate checks the field values on QueryDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryDeviceRequestMultiError, or nil if none found.
func (m *QueryDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNum

	// no validation rules for PageSize

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryDeviceRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryDeviceRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryDeviceRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryDeviceRequestMultiError(errors)
	}

	return nil
}

// QueryDeviceRequestMultiError is an error wrapping multiple validation errors
// returned by QueryDeviceRequest.ValidateAll() if the designated constraints
// aren't met.
type QueryDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryDeviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryDeviceRequestMultiError) AllErrors() []error { return m }

// QueryDeviceRequestValidationError is the validation error returned by
// QueryDeviceRequest.Validate if the designated constraints aren't met.
type QueryDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryDeviceRequestValidationError) ErrorName() string {
	return "QueryDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryDeviceRequestValidationError{}

// Validate checks the field values on QueryDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryDeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryDeviceResponseMultiError, or nil if none found.
func (m *QueryDeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryDeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryDeviceResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryDeviceResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryDeviceResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryDeviceResponseMultiError(errors)
	}

	return nil
}

// QueryDeviceResponseMultiError is an error wrapping multiple validation
// errors returned by QueryDeviceResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryDeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryDeviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryDeviceResponseMultiError) AllErrors() []error { return m }

// QueryDeviceResponseValidationError is the validation error returned by
// QueryDeviceResponse.Validate if the designated constraints aren't met.
type QueryDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryDeviceResponseValidationError) ErrorName() string {
	return "QueryDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryDeviceResponseValidationError{}

// Validate checks the field values on QueryDevice with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryDevice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryDevice with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryDeviceMultiError, or
// nil if none found.
func (m *QueryDevice) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryDevice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Size

	// no validation rules for Current

	for idx, item := range m.GetRows() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryDeviceValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryDeviceValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryDeviceValidationError{
					field:  fmt.Sprintf("Rows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryDeviceMultiError(errors)
	}

	return nil
}

// QueryDeviceMultiError is an error wrapping multiple validation errors
// returned by QueryDevice.ValidateAll() if the designated constraints aren't met.
type QueryDeviceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryDeviceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryDeviceMultiError) AllErrors() []error { return m }

// QueryDeviceValidationError is the validation error returned by
// QueryDevice.Validate if the designated constraints aren't met.
type QueryDeviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryDeviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryDeviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryDeviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryDeviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryDeviceValidationError) ErrorName() string { return "QueryDeviceValidationError" }

// Error satisfies the builtin error interface
func (e QueryDeviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryDevice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryDeviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryDeviceValidationError{}

// Validate checks the field values on DeviceResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceResponseMultiError,
// or nil if none found.
func (m *DeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceID

	// no validation rules for ServerID

	// no validation rules for MacAddr

	// no validation rules for GpuType

	// no validation rules for GpuNum

	// no validation rules for GpuMem

	// no validation rules for CudaVer

	// no validation rules for CpuType

	// no validation rules for CpuFreq

	// no validation rules for CpuNum

	// no validation rules for CpuMem

	// no validation rules for DeviceStatus

	// no validation rules for ProductID

	// no validation rules for TimeOfUsed

	// no validation rules for Price

	if len(errors) > 0 {
		return DeviceResponseMultiError(errors)
	}

	return nil
}

// DeviceResponseMultiError is an error wrapping multiple validation errors
// returned by DeviceResponse.ValidateAll() if the designated constraints
// aren't met.
type DeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceResponseMultiError) AllErrors() []error { return m }

// DeviceResponseValidationError is the validation error returned by
// DeviceResponse.Validate if the designated constraints aren't met.
type DeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceResponseValidationError) ErrorName() string { return "DeviceResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceResponseValidationError{}

// Validate checks the field values on Device with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Device) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Device with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DeviceMultiError, or nil if none found.
func (m *Device) ValidateAll() error {
	return m.validate(true)
}

func (m *Device) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceID

	// no validation rules for ServerID

	// no validation rules for MacAddr

	// no validation rules for GpuType

	// no validation rules for GpuNum

	// no validation rules for GpuMem

	// no validation rules for CudaVer

	// no validation rules for CpuType

	// no validation rules for CpuFreq

	// no validation rules for CpuNum

	// no validation rules for CpuMem

	// no validation rules for DeviceStatus

	// no validation rules for ProductID

	// no validation rules for TimeOfUsed

	// no validation rules for Price

	// no validation rules for Label

	if len(errors) > 0 {
		return DeviceMultiError(errors)
	}

	return nil
}

// DeviceMultiError is an error wrapping multiple validation errors returned by
// Device.ValidateAll() if the designated constraints aren't met.
type DeviceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceMultiError) AllErrors() []error { return m }

// DeviceValidationError is the validation error returned by Device.Validate if
// the designated constraints aren't met.
type DeviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceValidationError) ErrorName() string { return "DeviceValidationError" }

// Error satisfies the builtin error interface
func (e DeviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDevice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceValidationError{}

// Validate checks the field values on QueryBmxServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryBmxServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryBmxServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryBmxServerRequestMultiError, or nil if none found.
func (m *QueryBmxServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryBmxServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNum

	// no validation rules for PageSize

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryBmxServerRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryBmxServerRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryBmxServerRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryBmxServerRequestMultiError(errors)
	}

	return nil
}

// QueryBmxServerRequestMultiError is an error wrapping multiple validation
// errors returned by QueryBmxServerRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryBmxServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryBmxServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryBmxServerRequestMultiError) AllErrors() []error { return m }

// QueryBmxServerRequestValidationError is the validation error returned by
// QueryBmxServerRequest.Validate if the designated constraints aren't met.
type QueryBmxServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryBmxServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryBmxServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryBmxServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryBmxServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryBmxServerRequestValidationError) ErrorName() string {
	return "QueryBmxServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryBmxServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryBmxServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryBmxServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryBmxServerRequestValidationError{}

// Validate checks the field values on QueryBmxServerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryBmxServerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryBmxServerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryBmxServerResponseMultiError, or nil if none found.
func (m *QueryBmxServerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryBmxServerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryBmxServerResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryBmxServerResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryBmxServerResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryBmxServerResponseMultiError(errors)
	}

	return nil
}

// QueryBmxServerResponseMultiError is an error wrapping multiple validation
// errors returned by QueryBmxServerResponse.ValidateAll() if the designated
// constraints aren't met.
type QueryBmxServerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryBmxServerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryBmxServerResponseMultiError) AllErrors() []error { return m }

// QueryBmxServerResponseValidationError is the validation error returned by
// QueryBmxServerResponse.Validate if the designated constraints aren't met.
type QueryBmxServerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryBmxServerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryBmxServerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryBmxServerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryBmxServerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryBmxServerResponseValidationError) ErrorName() string {
	return "QueryBmxServerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryBmxServerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryBmxServerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryBmxServerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryBmxServerResponseValidationError{}

// Validate checks the field values on QueryBmxServer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryBmxServer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryBmxServer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryBmxServerMultiError,
// or nil if none found.
func (m *QueryBmxServer) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryBmxServer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Size

	// no validation rules for Current

	for idx, item := range m.GetRows() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryBmxServerValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryBmxServerValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryBmxServerValidationError{
					field:  fmt.Sprintf("Rows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryBmxServerMultiError(errors)
	}

	return nil
}

// QueryBmxServerMultiError is an error wrapping multiple validation errors
// returned by QueryBmxServer.ValidateAll() if the designated constraints
// aren't met.
type QueryBmxServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryBmxServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryBmxServerMultiError) AllErrors() []error { return m }

// QueryBmxServerValidationError is the validation error returned by
// QueryBmxServer.Validate if the designated constraints aren't met.
type QueryBmxServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryBmxServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryBmxServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryBmxServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryBmxServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryBmxServerValidationError) ErrorName() string { return "QueryBmxServerValidationError" }

// Error satisfies the builtin error interface
func (e QueryBmxServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryBmxServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryBmxServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryBmxServerValidationError{}

// Validate checks the field values on BmxServer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BmxServer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BmxServer with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BmxServerMultiError, or nil
// if none found.
func (m *BmxServer) ValidateAll() error {
	return m.validate(true)
}

func (m *BmxServer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerID

	// no validation rules for ServerArea

	// no validation rules for DeviceNum

	// no validation rules for DeviceReadyNum

	// no validation rules for ClientID

	// no validation rules for SysdiskID

	// no validation rules for DatadiskID

	// no validation rules for Label

	// no validation rules for Price

	// no validation rules for Comment

	if len(errors) > 0 {
		return BmxServerMultiError(errors)
	}

	return nil
}

// BmxServerMultiError is an error wrapping multiple validation errors returned
// by BmxServer.ValidateAll() if the designated constraints aren't met.
type BmxServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BmxServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BmxServerMultiError) AllErrors() []error { return m }

// BmxServerValidationError is the validation error returned by
// BmxServer.Validate if the designated constraints aren't met.
type BmxServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BmxServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BmxServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BmxServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BmxServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BmxServerValidationError) ErrorName() string { return "BmxServerValidationError" }

// Error satisfies the builtin error interface
func (e BmxServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBmxServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BmxServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BmxServerValidationError{}

// Validate checks the field values on DeleteImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteImageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteImageRequestMultiError, or nil if none found.
func (m *DeleteImageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteImageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ImageID

	if len(errors) > 0 {
		return DeleteImageRequestMultiError(errors)
	}

	return nil
}

// DeleteImageRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteImageRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteImageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteImageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteImageRequestMultiError) AllErrors() []error { return m }

// DeleteImageRequestValidationError is the validation error returned by
// DeleteImageRequest.Validate if the designated constraints aren't met.
type DeleteImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteImageRequestValidationError) ErrorName() string {
	return "DeleteImageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteImageRequestValidationError{}

// Validate checks the field values on DeleteImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteImageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteImageResponseMultiError, or nil if none found.
func (m *DeleteImageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteImageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteImageResponseMultiError(errors)
	}

	return nil
}

// DeleteImageResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteImageResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteImageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteImageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteImageResponseMultiError) AllErrors() []error { return m }

// DeleteImageResponseValidationError is the validation error returned by
// DeleteImageResponse.Validate if the designated constraints aren't met.
type DeleteImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteImageResponseValidationError) ErrorName() string {
	return "DeleteImageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteImageResponseValidationError{}

// Validate checks the field values on AddImageResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddImageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddImageResponseMultiError, or nil if none found.
func (m *AddImageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddImageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return AddImageResponseMultiError(errors)
	}

	return nil
}

// AddImageResponseMultiError is an error wrapping multiple validation errors
// returned by AddImageResponse.ValidateAll() if the designated constraints
// aren't met.
type AddImageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddImageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddImageResponseMultiError) AllErrors() []error { return m }

// AddImageResponseValidationError is the validation error returned by
// AddImageResponse.Validate if the designated constraints aren't met.
type AddImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddImageResponseValidationError) ErrorName() string { return "AddImageResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddImageResponseValidationError{}

// Validate checks the field values on UpdateImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateImageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateImageResponseMultiError, or nil if none found.
func (m *UpdateImageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateImageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateImageResponseMultiError(errors)
	}

	return nil
}

// UpdateImageResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateImageResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateImageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateImageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateImageResponseMultiError) AllErrors() []error { return m }

// UpdateImageResponseValidationError is the validation error returned by
// UpdateImageResponse.Validate if the designated constraints aren't met.
type UpdateImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateImageResponseValidationError) ErrorName() string {
	return "UpdateImageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateImageResponseValidationError{}

// Validate checks the field values on SelectImageListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SelectImageListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelectImageListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SelectImageListRequestMultiError, or nil if none found.
func (m *SelectImageListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SelectImageListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNum

	// no validation rules for PageSize

	// no validation rules for ImageId

	// no validation rules for ImageType

	if len(errors) > 0 {
		return SelectImageListRequestMultiError(errors)
	}

	return nil
}

// SelectImageListRequestMultiError is an error wrapping multiple validation
// errors returned by SelectImageListRequest.ValidateAll() if the designated
// constraints aren't met.
type SelectImageListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelectImageListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelectImageListRequestMultiError) AllErrors() []error { return m }

// SelectImageListRequestValidationError is the validation error returned by
// SelectImageListRequest.Validate if the designated constraints aren't met.
type SelectImageListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelectImageListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelectImageListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelectImageListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelectImageListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelectImageListRequestValidationError) ErrorName() string {
	return "SelectImageListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SelectImageListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelectImageListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelectImageListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelectImageListRequestValidationError{}

// Validate checks the field values on SelectImageListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SelectImageListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelectImageListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SelectImageListResponseMultiError, or nil if none found.
func (m *SelectImageListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SelectImageListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SelectImageListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SelectImageListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SelectImageListResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SelectImageListResponseMultiError(errors)
	}

	return nil
}

// SelectImageListResponseMultiError is an error wrapping multiple validation
// errors returned by SelectImageListResponse.ValidateAll() if the designated
// constraints aren't met.
type SelectImageListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelectImageListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelectImageListResponseMultiError) AllErrors() []error { return m }

// SelectImageListResponseValidationError is the validation error returned by
// SelectImageListResponse.Validate if the designated constraints aren't met.
type SelectImageListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelectImageListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelectImageListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelectImageListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelectImageListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelectImageListResponseValidationError) ErrorName() string {
	return "SelectImageListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SelectImageListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelectImageListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelectImageListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelectImageListResponseValidationError{}

// Validate checks the field values on SelectImageList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SelectImageList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelectImageList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SelectImageListMultiError, or nil if none found.
func (m *SelectImageList) ValidateAll() error {
	return m.validate(true)
}

func (m *SelectImageList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Size

	// no validation rules for Current

	for idx, item := range m.GetRows() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SelectImageListValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SelectImageListValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SelectImageListValidationError{
					field:  fmt.Sprintf("Rows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SelectImageListMultiError(errors)
	}

	return nil
}

// SelectImageListMultiError is an error wrapping multiple validation errors
// returned by SelectImageList.ValidateAll() if the designated constraints
// aren't met.
type SelectImageListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelectImageListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelectImageListMultiError) AllErrors() []error { return m }

// SelectImageListValidationError is the validation error returned by
// SelectImageList.Validate if the designated constraints aren't met.
type SelectImageListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelectImageListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelectImageListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelectImageListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelectImageListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelectImageListValidationError) ErrorName() string { return "SelectImageListValidationError" }

// Error satisfies the builtin error interface
func (e SelectImageListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelectImageList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelectImageListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelectImageListValidationError{}

// Validate checks the field values on GetUserInstanceInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserInstanceInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInstanceInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserInstanceInfoRequestMultiError, or nil if none found.
func (m *GetUserInstanceInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInstanceInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserInstanceInfoRequestMultiError(errors)
	}

	return nil
}

// GetUserInstanceInfoRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserInstanceInfoRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUserInstanceInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInstanceInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInstanceInfoRequestMultiError) AllErrors() []error { return m }

// GetUserInstanceInfoRequestValidationError is the validation error returned
// by GetUserInstanceInfoRequest.Validate if the designated constraints aren't met.
type GetUserInstanceInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInstanceInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInstanceInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInstanceInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInstanceInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInstanceInfoRequestValidationError) ErrorName() string {
	return "GetUserInstanceInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserInstanceInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInstanceInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInstanceInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInstanceInfoRequestValidationError{}

// Validate checks the field values on GetUserInstanceInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserInstanceInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInstanceInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserInstanceInfoResponseMultiError, or nil if none found.
func (m *GetUserInstanceInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInstanceInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserInstanceInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserInstanceInfoResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserInstanceInfoResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserInstanceInfoResponseMultiError(errors)
	}

	return nil
}

// GetUserInstanceInfoResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserInstanceInfoResponse.ValidateAll() if
// the designated constraints aren't met.
type GetUserInstanceInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInstanceInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInstanceInfoResponseMultiError) AllErrors() []error { return m }

// GetUserInstanceInfoResponseValidationError is the validation error returned
// by GetUserInstanceInfoResponse.Validate if the designated constraints
// aren't met.
type GetUserInstanceInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInstanceInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInstanceInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInstanceInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInstanceInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInstanceInfoResponseValidationError) ErrorName() string {
	return "GetUserInstanceInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserInstanceInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInstanceInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInstanceInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInstanceInfoResponseValidationError{}

// Validate checks the field values on InstanceInfoCountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceInfoCountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceInfoCountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceInfoCountResponseMultiError, or nil if none found.
func (m *InstanceInfoCountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceInfoCountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceCount

	// no validation rules for InstanceRunCount

	// no validation rules for ExpirationComingCount

	// no validation rules for ComingSoonCount

	if len(errors) > 0 {
		return InstanceInfoCountResponseMultiError(errors)
	}

	return nil
}

// InstanceInfoCountResponseMultiError is an error wrapping multiple validation
// errors returned by InstanceInfoCountResponse.ValidateAll() if the
// designated constraints aren't met.
type InstanceInfoCountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceInfoCountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceInfoCountResponseMultiError) AllErrors() []error { return m }

// InstanceInfoCountResponseValidationError is the validation error returned by
// InstanceInfoCountResponse.Validate if the designated constraints aren't met.
type InstanceInfoCountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceInfoCountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceInfoCountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceInfoCountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceInfoCountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceInfoCountResponseValidationError) ErrorName() string {
	return "InstanceInfoCountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceInfoCountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceInfoCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceInfoCountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceInfoCountResponseValidationError{}

// Validate checks the field values on GetImageListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetImageListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetImageListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetImageListRequestMultiError, or nil if none found.
func (m *GetImageListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetImageListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return GetImageListRequestMultiError(errors)
	}

	return nil
}

// GetImageListRequestMultiError is an error wrapping multiple validation
// errors returned by GetImageListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetImageListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetImageListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetImageListRequestMultiError) AllErrors() []error { return m }

// GetImageListRequestValidationError is the validation error returned by
// GetImageListRequest.Validate if the designated constraints aren't met.
type GetImageListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetImageListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetImageListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetImageListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetImageListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetImageListRequestValidationError) ErrorName() string {
	return "GetImageListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetImageListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetImageListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetImageListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetImageListRequestValidationError{}

// Validate checks the field values on GetImageListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetImageListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetImageListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetImageListResponseMultiError, or nil if none found.
func (m *GetImageListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetImageListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetImageListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetImageListResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetImageListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetImageListResponseMultiError(errors)
	}

	return nil
}

// GetImageListResponseMultiError is an error wrapping multiple validation
// errors returned by GetImageListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetImageListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetImageListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetImageListResponseMultiError) AllErrors() []error { return m }

// GetImageListResponseValidationError is the validation error returned by
// GetImageListResponse.Validate if the designated constraints aren't met.
type GetImageListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetImageListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetImageListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetImageListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetImageListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetImageListResponseValidationError) ErrorName() string {
	return "GetImageListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetImageListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetImageListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetImageListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetImageListResponseValidationError{}

// Validate checks the field values on Image with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Image) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Image with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ImageMultiError, or nil if none found.
func (m *Image) ValidateAll() error {
	return m.validate(true)
}

func (m *Image) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ImageID

	// no validation rules for ImageType

	// no validation rules for ImageName

	// no validation rules for Description

	// no validation rules for ImagePath

	// no validation rules for DiscussPage

	// no validation rules for DownloadTime

	// no validation rules for Author

	// no validation rules for AuthorPage

	// no validation rules for ImageSize

	// no validation rules for Framework

	// no validation rules for CudaVersion

	// no validation rules for CmdRun

	if len(errors) > 0 {
		return ImageMultiError(errors)
	}

	return nil
}

// ImageMultiError is an error wrapping multiple validation errors returned by
// Image.ValidateAll() if the designated constraints aren't met.
type ImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageMultiError) AllErrors() []error { return m }

// ImageValidationError is the validation error returned by Image.Validate if
// the designated constraints aren't met.
type ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageValidationError) ErrorName() string { return "ImageValidationError" }

// Error satisfies the builtin error interface
func (e ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageValidationError{}

// Validate checks the field values on SelectUserInstanceListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SelectUserInstanceListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelectUserInstanceListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SelectUserInstanceListRequestMultiError, or nil if none found.
func (m *SelectUserInstanceListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SelectUserInstanceListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for PageNum

	// no validation rules for PageSize

	// no validation rules for InstanceId

	if len(errors) > 0 {
		return SelectUserInstanceListRequestMultiError(errors)
	}

	return nil
}

// SelectUserInstanceListRequestMultiError is an error wrapping multiple
// validation errors returned by SelectUserInstanceListRequest.ValidateAll()
// if the designated constraints aren't met.
type SelectUserInstanceListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelectUserInstanceListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelectUserInstanceListRequestMultiError) AllErrors() []error { return m }

// SelectUserInstanceListRequestValidationError is the validation error
// returned by SelectUserInstanceListRequest.Validate if the designated
// constraints aren't met.
type SelectUserInstanceListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelectUserInstanceListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelectUserInstanceListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelectUserInstanceListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelectUserInstanceListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelectUserInstanceListRequestValidationError) ErrorName() string {
	return "SelectUserInstanceListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SelectUserInstanceListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelectUserInstanceListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelectUserInstanceListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelectUserInstanceListRequestValidationError{}

// Validate checks the field values on SelectUserInstanceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SelectUserInstanceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelectUserInstanceListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SelectUserInstanceListResponseMultiError, or nil if none found.
func (m *SelectUserInstanceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SelectUserInstanceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SelectUserInstanceListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SelectUserInstanceListResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SelectUserInstanceListResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SelectUserInstanceListResponseMultiError(errors)
	}

	return nil
}

// SelectUserInstanceListResponseMultiError is an error wrapping multiple
// validation errors returned by SelectUserInstanceListResponse.ValidateAll()
// if the designated constraints aren't met.
type SelectUserInstanceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelectUserInstanceListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelectUserInstanceListResponseMultiError) AllErrors() []error { return m }

// SelectUserInstanceListResponseValidationError is the validation error
// returned by SelectUserInstanceListResponse.Validate if the designated
// constraints aren't met.
type SelectUserInstanceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelectUserInstanceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelectUserInstanceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelectUserInstanceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelectUserInstanceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelectUserInstanceListResponseValidationError) ErrorName() string {
	return "SelectUserInstanceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SelectUserInstanceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelectUserInstanceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelectUserInstanceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelectUserInstanceListResponseValidationError{}

// Validate checks the field values on SelectUserInstancePageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SelectUserInstancePageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelectUserInstancePageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SelectUserInstancePageResponseMultiError, or nil if none found.
func (m *SelectUserInstancePageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SelectUserInstancePageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Size

	// no validation rules for Current

	for idx, item := range m.GetRows() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SelectUserInstancePageResponseValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SelectUserInstancePageResponseValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SelectUserInstancePageResponseValidationError{
					field:  fmt.Sprintf("Rows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SelectUserInstancePageResponseMultiError(errors)
	}

	return nil
}

// SelectUserInstancePageResponseMultiError is an error wrapping multiple
// validation errors returned by SelectUserInstancePageResponse.ValidateAll()
// if the designated constraints aren't met.
type SelectUserInstancePageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelectUserInstancePageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelectUserInstancePageResponseMultiError) AllErrors() []error { return m }

// SelectUserInstancePageResponseValidationError is the validation error
// returned by SelectUserInstancePageResponse.Validate if the designated
// constraints aren't met.
type SelectUserInstancePageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelectUserInstancePageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelectUserInstancePageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelectUserInstancePageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelectUserInstancePageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelectUserInstancePageResponseValidationError) ErrorName() string {
	return "SelectUserInstancePageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SelectUserInstancePageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelectUserInstancePageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelectUserInstancePageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelectUserInstancePageResponseValidationError{}

// Validate checks the field values on InstanceTableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceTableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceTableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceTableResponseMultiError, or nil if none found.
func (m *InstanceTableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceTableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for NodeId

	// no validation rules for ProductId

	// no validation rules for ImageName

	// no validation rules for InstanceStatus

	// no validation rules for YamlPath

	// no validation rules for SysdiskPath

	// no validation rules for DatadiskPath

	// no validation rules for SysdiskSize

	// no validation rules for DatadiskSize

	// no validation rules for SysvolumeId

	// no validation rules for Password

	// no validation rules for FrpServer

	// no validation rules for FrpUuid

	// no validation rules for SshPort

	// no validation rules for JupyterPort

	// no validation rules for SysAttachment

	// no validation rules for DatavolumeId

	// no validation rules for DataAttachment

	// no validation rules for Token

	// no validation rules for StartTime

	// no validation rules for StopTime

	// no validation rules for Reason

	// no validation rules for AutoReleaseTime

	// no validation rules for UserId

	// no validation rules for JupyterUrl

	// no validation rules for SpecificationAndModel

	// no validation rules for PaymentMethod

	// no validation rules for ProgressBar

	// no validation rules for InstanceName

	if len(errors) > 0 {
		return InstanceTableResponseMultiError(errors)
	}

	return nil
}

// InstanceTableResponseMultiError is an error wrapping multiple validation
// errors returned by InstanceTableResponse.ValidateAll() if the designated
// constraints aren't met.
type InstanceTableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceTableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceTableResponseMultiError) AllErrors() []error { return m }

// InstanceTableResponseValidationError is the validation error returned by
// InstanceTableResponse.Validate if the designated constraints aren't met.
type InstanceTableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceTableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceTableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceTableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceTableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceTableResponseValidationError) ErrorName() string {
	return "InstanceTableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceTableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceTableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceTableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceTableResponseValidationError{}

// Validate checks the field values on DeviceDefaultResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeviceDefaultResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceDefaultResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceDefaultResponseMultiError, or nil if none found.
func (m *DeviceDefaultResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceDefaultResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Data

	if len(errors) > 0 {
		return DeviceDefaultResponseMultiError(errors)
	}

	return nil
}

// DeviceDefaultResponseMultiError is an error wrapping multiple validation
// errors returned by DeviceDefaultResponse.ValidateAll() if the designated
// constraints aren't met.
type DeviceDefaultResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceDefaultResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceDefaultResponseMultiError) AllErrors() []error { return m }

// DeviceDefaultResponseValidationError is the validation error returned by
// DeviceDefaultResponse.Validate if the designated constraints aren't met.
type DeviceDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceDefaultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceDefaultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceDefaultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceDefaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceDefaultResponseValidationError) ErrorName() string {
	return "DeviceDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceDefaultResponseValidationError{}

// Validate checks the field values on ReleaseInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseInstanceRequestMultiError, or nil if none found.
func (m *ReleaseInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for UserId

	if len(errors) > 0 {
		return ReleaseInstanceRequestMultiError(errors)
	}

	return nil
}

// ReleaseInstanceRequestMultiError is an error wrapping multiple validation
// errors returned by ReleaseInstanceRequest.ValidateAll() if the designated
// constraints aren't met.
type ReleaseInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseInstanceRequestMultiError) AllErrors() []error { return m }

// ReleaseInstanceRequestValidationError is the validation error returned by
// ReleaseInstanceRequest.Validate if the designated constraints aren't met.
type ReleaseInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseInstanceRequestValidationError) ErrorName() string {
	return "ReleaseInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseInstanceRequestValidationError{}

// Validate checks the field values on ReleaseInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseInstanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseInstanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseInstanceResponseMultiError, or nil if none found.
func (m *ReleaseInstanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseInstanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Data

	if len(errors) > 0 {
		return ReleaseInstanceResponseMultiError(errors)
	}

	return nil
}

// ReleaseInstanceResponseMultiError is an error wrapping multiple validation
// errors returned by ReleaseInstanceResponse.ValidateAll() if the designated
// constraints aren't met.
type ReleaseInstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseInstanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseInstanceResponseMultiError) AllErrors() []error { return m }

// ReleaseInstanceResponseValidationError is the validation error returned by
// ReleaseInstanceResponse.Validate if the designated constraints aren't met.
type ReleaseInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseInstanceResponseValidationError) ErrorName() string {
	return "ReleaseInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseInstanceResponseValidationError{}

// Validate checks the field values on StartInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartInstanceRequestMultiError, or nil if none found.
func (m *StartInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for UserId

	if len(errors) > 0 {
		return StartInstanceRequestMultiError(errors)
	}

	return nil
}

// StartInstanceRequestMultiError is an error wrapping multiple validation
// errors returned by StartInstanceRequest.ValidateAll() if the designated
// constraints aren't met.
type StartInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartInstanceRequestMultiError) AllErrors() []error { return m }

// StartInstanceRequestValidationError is the validation error returned by
// StartInstanceRequest.Validate if the designated constraints aren't met.
type StartInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartInstanceRequestValidationError) ErrorName() string {
	return "StartInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartInstanceRequestValidationError{}

// Validate checks the field values on StartInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartInstanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartInstanceResponseMultiError, or nil if none found.
func (m *StartInstanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartInstanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StartInstanceResponseMultiError(errors)
	}

	return nil
}

// StartInstanceResponseMultiError is an error wrapping multiple validation
// errors returned by StartInstanceResponse.ValidateAll() if the designated
// constraints aren't met.
type StartInstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartInstanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartInstanceResponseMultiError) AllErrors() []error { return m }

// StartInstanceResponseValidationError is the validation error returned by
// StartInstanceResponse.Validate if the designated constraints aren't met.
type StartInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartInstanceResponseValidationError) ErrorName() string {
	return "StartInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartInstanceResponseValidationError{}

// Validate checks the field values on StopInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopInstanceRequestMultiError, or nil if none found.
func (m *StopInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StopInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for UserId

	if len(errors) > 0 {
		return StopInstanceRequestMultiError(errors)
	}

	return nil
}

// StopInstanceRequestMultiError is an error wrapping multiple validation
// errors returned by StopInstanceRequest.ValidateAll() if the designated
// constraints aren't met.
type StopInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopInstanceRequestMultiError) AllErrors() []error { return m }

// StopInstanceRequestValidationError is the validation error returned by
// StopInstanceRequest.Validate if the designated constraints aren't met.
type StopInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopInstanceRequestValidationError) ErrorName() string {
	return "StopInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StopInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopInstanceRequestValidationError{}

// Validate checks the field values on StopInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopInstanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopInstanceResponseMultiError, or nil if none found.
func (m *StopInstanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StopInstanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Data

	if len(errors) > 0 {
		return StopInstanceResponseMultiError(errors)
	}

	return nil
}

// StopInstanceResponseMultiError is an error wrapping multiple validation
// errors returned by StopInstanceResponse.ValidateAll() if the designated
// constraints aren't met.
type StopInstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopInstanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopInstanceResponseMultiError) AllErrors() []error { return m }

// StopInstanceResponseValidationError is the validation error returned by
// StopInstanceResponse.Validate if the designated constraints aren't met.
type StopInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopInstanceResponseValidationError) ErrorName() string {
	return "StopInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StopInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopInstanceResponseValidationError{}
