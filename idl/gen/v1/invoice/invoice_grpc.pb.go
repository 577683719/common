// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: invoice.proto

package invoice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InvoiceService_EditInvoiceReceiveEmail_FullMethodName            = "/InvoiceService/EditInvoiceReceiveEmail"
	InvoiceService_EditInvoiceReceiveAddr_FullMethodName             = "/InvoiceService/EditInvoiceReceiveAddr"
	InvoiceService_EditInvoiceInfo_FullMethodName                    = "/InvoiceService/EditInvoiceInfo"
	InvoiceService_QueryInvoiceInfo_FullMethodName                   = "/InvoiceService/QueryInvoiceInfo"
	InvoiceService_QueryInvoiceReceiveAddr_FullMethodName            = "/InvoiceService/QueryInvoiceReceiveAddr"
	InvoiceService_QueryInvoiceReceiveEmail_FullMethodName           = "/InvoiceService/QueryInvoiceReceiveEmail"
	InvoiceService_AddInvoiceInfo_FullMethodName                     = "/InvoiceService/AddInvoiceInfo"
	InvoiceService_GetInvoicableAmount_FullMethodName                = "/InvoiceService/GetInvoicableAmount"
	InvoiceService_GetInvoicableTransactionDetailList_FullMethodName = "/InvoiceService/GetInvoicableTransactionDetailList"
	InvoiceService_BillInvoicingApplication_FullMethodName           = "/InvoiceService/BillInvoicingApplication"
	InvoiceService_GetInvoiceApplicationRecord_FullMethodName        = "/InvoiceService/GetInvoiceApplicationRecord"
	InvoiceService_SelectInvoiceApplicationPage_FullMethodName       = "/InvoiceService/SelectInvoiceApplicationPage"
	InvoiceService_RefuseIssueInvoice_FullMethodName                 = "/InvoiceService/RefuseIssueInvoice"
)

// InvoiceServiceClient is the client API for InvoiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvoiceServiceClient interface {
	//编辑发票接收邮箱
	EditInvoiceReceiveEmail(ctx context.Context, in *EditInvoiceReceiveEmailRequest, opts ...grpc.CallOption) (*EditInvoiceReceiveEmailResponse, error)
	//编辑发票接收地址
	EditInvoiceReceiveAddr(ctx context.Context, in *EditInvoiceReceiveAddrRequest, opts ...grpc.CallOption) (*EditInvoiceReceiveAddrResponse, error)
	//编辑发票信息
	EditInvoiceInfo(ctx context.Context, in *EditInvoiceInfoRequest, opts ...grpc.CallOption) (*EditInvoiceInfoResponse, error)
	//查询发票信息
	QueryInvoiceInfo(ctx context.Context, in *QueryInvoiceInfoRequest, opts ...grpc.CallOption) (*QueryInvoiceInfoResponse, error)
	//查询发票接收地址
	QueryInvoiceReceiveAddr(ctx context.Context, in *QueryInvoiceReceiveAddrRequest, opts ...grpc.CallOption) (*QueryInvoiceReceiveAddrResponse, error)
	//查询发票接收邮箱
	QueryInvoiceReceiveEmail(ctx context.Context, in *QueryInvoiceReceiveEmailRequest, opts ...grpc.CallOption) (*QueryInvoiceReceiveEmailResponse, error)
	// 添加发票信息
	AddInvoiceInfo(ctx context.Context, in *InvoiceInfo, opts ...grpc.CallOption) (*InvoiceDefault, error)
	//获取可开票金额
	GetInvoicableAmount(ctx context.Context, in *GetInvoicedAmountReqeust, opts ...grpc.CallOption) (*GetInvoicedAmountResponse, error)
	//获取可开票流水记录
	GetInvoicableTransactionDetailList(ctx context.Context, in *GetInvoicableTransactionDetailListReqeust, opts ...grpc.CallOption) (*GetInvoicableTransactionDetailListResponse, error)
	//交易流水开票申请
	BillInvoicingApplication(ctx context.Context, in *BillInvoicingApplicationReqeust, opts ...grpc.CallOption) (*BillInvoicingApplicationResponse, error)
	//查询开票申请记录
	GetInvoiceApplicationRecord(ctx context.Context, in *InvoiceApplicationRecordReq, opts ...grpc.CallOption) (*InvoiceApplicationRecordResponse, error)
	//管理端-查看开票申请列表
	SelectInvoiceApplicationPage(ctx context.Context, in *SelectInvoiceApplicationPageReq, opts ...grpc.CallOption) (*SelectInvoiceApplicationPageResp, error)
	//管理端-拒绝开票
	RefuseIssueInvoice(ctx context.Context, in *RefuseIssueInvoiceReq, opts ...grpc.CallOption) (*RefuseIssueInvoiceResp, error)
}

type invoiceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvoiceServiceClient(cc grpc.ClientConnInterface) InvoiceServiceClient {
	return &invoiceServiceClient{cc}
}

func (c *invoiceServiceClient) EditInvoiceReceiveEmail(ctx context.Context, in *EditInvoiceReceiveEmailRequest, opts ...grpc.CallOption) (*EditInvoiceReceiveEmailResponse, error) {
	out := new(EditInvoiceReceiveEmailResponse)
	err := c.cc.Invoke(ctx, InvoiceService_EditInvoiceReceiveEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) EditInvoiceReceiveAddr(ctx context.Context, in *EditInvoiceReceiveAddrRequest, opts ...grpc.CallOption) (*EditInvoiceReceiveAddrResponse, error) {
	out := new(EditInvoiceReceiveAddrResponse)
	err := c.cc.Invoke(ctx, InvoiceService_EditInvoiceReceiveAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) EditInvoiceInfo(ctx context.Context, in *EditInvoiceInfoRequest, opts ...grpc.CallOption) (*EditInvoiceInfoResponse, error) {
	out := new(EditInvoiceInfoResponse)
	err := c.cc.Invoke(ctx, InvoiceService_EditInvoiceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) QueryInvoiceInfo(ctx context.Context, in *QueryInvoiceInfoRequest, opts ...grpc.CallOption) (*QueryInvoiceInfoResponse, error) {
	out := new(QueryInvoiceInfoResponse)
	err := c.cc.Invoke(ctx, InvoiceService_QueryInvoiceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) QueryInvoiceReceiveAddr(ctx context.Context, in *QueryInvoiceReceiveAddrRequest, opts ...grpc.CallOption) (*QueryInvoiceReceiveAddrResponse, error) {
	out := new(QueryInvoiceReceiveAddrResponse)
	err := c.cc.Invoke(ctx, InvoiceService_QueryInvoiceReceiveAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) QueryInvoiceReceiveEmail(ctx context.Context, in *QueryInvoiceReceiveEmailRequest, opts ...grpc.CallOption) (*QueryInvoiceReceiveEmailResponse, error) {
	out := new(QueryInvoiceReceiveEmailResponse)
	err := c.cc.Invoke(ctx, InvoiceService_QueryInvoiceReceiveEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) AddInvoiceInfo(ctx context.Context, in *InvoiceInfo, opts ...grpc.CallOption) (*InvoiceDefault, error) {
	out := new(InvoiceDefault)
	err := c.cc.Invoke(ctx, InvoiceService_AddInvoiceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) GetInvoicableAmount(ctx context.Context, in *GetInvoicedAmountReqeust, opts ...grpc.CallOption) (*GetInvoicedAmountResponse, error) {
	out := new(GetInvoicedAmountResponse)
	err := c.cc.Invoke(ctx, InvoiceService_GetInvoicableAmount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) GetInvoicableTransactionDetailList(ctx context.Context, in *GetInvoicableTransactionDetailListReqeust, opts ...grpc.CallOption) (*GetInvoicableTransactionDetailListResponse, error) {
	out := new(GetInvoicableTransactionDetailListResponse)
	err := c.cc.Invoke(ctx, InvoiceService_GetInvoicableTransactionDetailList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) BillInvoicingApplication(ctx context.Context, in *BillInvoicingApplicationReqeust, opts ...grpc.CallOption) (*BillInvoicingApplicationResponse, error) {
	out := new(BillInvoicingApplicationResponse)
	err := c.cc.Invoke(ctx, InvoiceService_BillInvoicingApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) GetInvoiceApplicationRecord(ctx context.Context, in *InvoiceApplicationRecordReq, opts ...grpc.CallOption) (*InvoiceApplicationRecordResponse, error) {
	out := new(InvoiceApplicationRecordResponse)
	err := c.cc.Invoke(ctx, InvoiceService_GetInvoiceApplicationRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) SelectInvoiceApplicationPage(ctx context.Context, in *SelectInvoiceApplicationPageReq, opts ...grpc.CallOption) (*SelectInvoiceApplicationPageResp, error) {
	out := new(SelectInvoiceApplicationPageResp)
	err := c.cc.Invoke(ctx, InvoiceService_SelectInvoiceApplicationPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) RefuseIssueInvoice(ctx context.Context, in *RefuseIssueInvoiceReq, opts ...grpc.CallOption) (*RefuseIssueInvoiceResp, error) {
	out := new(RefuseIssueInvoiceResp)
	err := c.cc.Invoke(ctx, InvoiceService_RefuseIssueInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvoiceServiceServer is the server API for InvoiceService service.
// All implementations should embed UnimplementedInvoiceServiceServer
// for forward compatibility
type InvoiceServiceServer interface {
	//编辑发票接收邮箱
	EditInvoiceReceiveEmail(context.Context, *EditInvoiceReceiveEmailRequest) (*EditInvoiceReceiveEmailResponse, error)
	//编辑发票接收地址
	EditInvoiceReceiveAddr(context.Context, *EditInvoiceReceiveAddrRequest) (*EditInvoiceReceiveAddrResponse, error)
	//编辑发票信息
	EditInvoiceInfo(context.Context, *EditInvoiceInfoRequest) (*EditInvoiceInfoResponse, error)
	//查询发票信息
	QueryInvoiceInfo(context.Context, *QueryInvoiceInfoRequest) (*QueryInvoiceInfoResponse, error)
	//查询发票接收地址
	QueryInvoiceReceiveAddr(context.Context, *QueryInvoiceReceiveAddrRequest) (*QueryInvoiceReceiveAddrResponse, error)
	//查询发票接收邮箱
	QueryInvoiceReceiveEmail(context.Context, *QueryInvoiceReceiveEmailRequest) (*QueryInvoiceReceiveEmailResponse, error)
	// 添加发票信息
	AddInvoiceInfo(context.Context, *InvoiceInfo) (*InvoiceDefault, error)
	//获取可开票金额
	GetInvoicableAmount(context.Context, *GetInvoicedAmountReqeust) (*GetInvoicedAmountResponse, error)
	//获取可开票流水记录
	GetInvoicableTransactionDetailList(context.Context, *GetInvoicableTransactionDetailListReqeust) (*GetInvoicableTransactionDetailListResponse, error)
	//交易流水开票申请
	BillInvoicingApplication(context.Context, *BillInvoicingApplicationReqeust) (*BillInvoicingApplicationResponse, error)
	//查询开票申请记录
	GetInvoiceApplicationRecord(context.Context, *InvoiceApplicationRecordReq) (*InvoiceApplicationRecordResponse, error)
	//管理端-查看开票申请列表
	SelectInvoiceApplicationPage(context.Context, *SelectInvoiceApplicationPageReq) (*SelectInvoiceApplicationPageResp, error)
	//管理端-拒绝开票
	RefuseIssueInvoice(context.Context, *RefuseIssueInvoiceReq) (*RefuseIssueInvoiceResp, error)
}

// UnimplementedInvoiceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInvoiceServiceServer struct {
}

func (UnimplementedInvoiceServiceServer) EditInvoiceReceiveEmail(context.Context, *EditInvoiceReceiveEmailRequest) (*EditInvoiceReceiveEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditInvoiceReceiveEmail not implemented")
}
func (UnimplementedInvoiceServiceServer) EditInvoiceReceiveAddr(context.Context, *EditInvoiceReceiveAddrRequest) (*EditInvoiceReceiveAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditInvoiceReceiveAddr not implemented")
}
func (UnimplementedInvoiceServiceServer) EditInvoiceInfo(context.Context, *EditInvoiceInfoRequest) (*EditInvoiceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditInvoiceInfo not implemented")
}
func (UnimplementedInvoiceServiceServer) QueryInvoiceInfo(context.Context, *QueryInvoiceInfoRequest) (*QueryInvoiceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryInvoiceInfo not implemented")
}
func (UnimplementedInvoiceServiceServer) QueryInvoiceReceiveAddr(context.Context, *QueryInvoiceReceiveAddrRequest) (*QueryInvoiceReceiveAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryInvoiceReceiveAddr not implemented")
}
func (UnimplementedInvoiceServiceServer) QueryInvoiceReceiveEmail(context.Context, *QueryInvoiceReceiveEmailRequest) (*QueryInvoiceReceiveEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryInvoiceReceiveEmail not implemented")
}
func (UnimplementedInvoiceServiceServer) AddInvoiceInfo(context.Context, *InvoiceInfo) (*InvoiceDefault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInvoiceInfo not implemented")
}
func (UnimplementedInvoiceServiceServer) GetInvoicableAmount(context.Context, *GetInvoicedAmountReqeust) (*GetInvoicedAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoicableAmount not implemented")
}
func (UnimplementedInvoiceServiceServer) GetInvoicableTransactionDetailList(context.Context, *GetInvoicableTransactionDetailListReqeust) (*GetInvoicableTransactionDetailListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoicableTransactionDetailList not implemented")
}
func (UnimplementedInvoiceServiceServer) BillInvoicingApplication(context.Context, *BillInvoicingApplicationReqeust) (*BillInvoicingApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BillInvoicingApplication not implemented")
}
func (UnimplementedInvoiceServiceServer) GetInvoiceApplicationRecord(context.Context, *InvoiceApplicationRecordReq) (*InvoiceApplicationRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceApplicationRecord not implemented")
}
func (UnimplementedInvoiceServiceServer) SelectInvoiceApplicationPage(context.Context, *SelectInvoiceApplicationPageReq) (*SelectInvoiceApplicationPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectInvoiceApplicationPage not implemented")
}
func (UnimplementedInvoiceServiceServer) RefuseIssueInvoice(context.Context, *RefuseIssueInvoiceReq) (*RefuseIssueInvoiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefuseIssueInvoice not implemented")
}

// UnsafeInvoiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvoiceServiceServer will
// result in compilation errors.
type UnsafeInvoiceServiceServer interface {
	mustEmbedUnimplementedInvoiceServiceServer()
}

func RegisterInvoiceServiceServer(s grpc.ServiceRegistrar, srv InvoiceServiceServer) {
	s.RegisterService(&InvoiceService_ServiceDesc, srv)
}

func _InvoiceService_EditInvoiceReceiveEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditInvoiceReceiveEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).EditInvoiceReceiveEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_EditInvoiceReceiveEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).EditInvoiceReceiveEmail(ctx, req.(*EditInvoiceReceiveEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_EditInvoiceReceiveAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditInvoiceReceiveAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).EditInvoiceReceiveAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_EditInvoiceReceiveAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).EditInvoiceReceiveAddr(ctx, req.(*EditInvoiceReceiveAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_EditInvoiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditInvoiceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).EditInvoiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_EditInvoiceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).EditInvoiceInfo(ctx, req.(*EditInvoiceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_QueryInvoiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInvoiceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).QueryInvoiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_QueryInvoiceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).QueryInvoiceInfo(ctx, req.(*QueryInvoiceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_QueryInvoiceReceiveAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInvoiceReceiveAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).QueryInvoiceReceiveAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_QueryInvoiceReceiveAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).QueryInvoiceReceiveAddr(ctx, req.(*QueryInvoiceReceiveAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_QueryInvoiceReceiveEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInvoiceReceiveEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).QueryInvoiceReceiveEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_QueryInvoiceReceiveEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).QueryInvoiceReceiveEmail(ctx, req.(*QueryInvoiceReceiveEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_AddInvoiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).AddInvoiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_AddInvoiceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).AddInvoiceInfo(ctx, req.(*InvoiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_GetInvoicableAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoicedAmountReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GetInvoicableAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_GetInvoicableAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GetInvoicableAmount(ctx, req.(*GetInvoicedAmountReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_GetInvoicableTransactionDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoicableTransactionDetailListReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GetInvoicableTransactionDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_GetInvoicableTransactionDetailList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GetInvoicableTransactionDetailList(ctx, req.(*GetInvoicableTransactionDetailListReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_BillInvoicingApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillInvoicingApplicationReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).BillInvoicingApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_BillInvoicingApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).BillInvoicingApplication(ctx, req.(*BillInvoicingApplicationReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_GetInvoiceApplicationRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceApplicationRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GetInvoiceApplicationRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_GetInvoiceApplicationRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GetInvoiceApplicationRecord(ctx, req.(*InvoiceApplicationRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_SelectInvoiceApplicationPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectInvoiceApplicationPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).SelectInvoiceApplicationPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_SelectInvoiceApplicationPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).SelectInvoiceApplicationPage(ctx, req.(*SelectInvoiceApplicationPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_RefuseIssueInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefuseIssueInvoiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).RefuseIssueInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_RefuseIssueInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).RefuseIssueInvoice(ctx, req.(*RefuseIssueInvoiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// InvoiceService_ServiceDesc is the grpc.ServiceDesc for InvoiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvoiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InvoiceService",
	HandlerType: (*InvoiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EditInvoiceReceiveEmail",
			Handler:    _InvoiceService_EditInvoiceReceiveEmail_Handler,
		},
		{
			MethodName: "EditInvoiceReceiveAddr",
			Handler:    _InvoiceService_EditInvoiceReceiveAddr_Handler,
		},
		{
			MethodName: "EditInvoiceInfo",
			Handler:    _InvoiceService_EditInvoiceInfo_Handler,
		},
		{
			MethodName: "QueryInvoiceInfo",
			Handler:    _InvoiceService_QueryInvoiceInfo_Handler,
		},
		{
			MethodName: "QueryInvoiceReceiveAddr",
			Handler:    _InvoiceService_QueryInvoiceReceiveAddr_Handler,
		},
		{
			MethodName: "QueryInvoiceReceiveEmail",
			Handler:    _InvoiceService_QueryInvoiceReceiveEmail_Handler,
		},
		{
			MethodName: "AddInvoiceInfo",
			Handler:    _InvoiceService_AddInvoiceInfo_Handler,
		},
		{
			MethodName: "GetInvoicableAmount",
			Handler:    _InvoiceService_GetInvoicableAmount_Handler,
		},
		{
			MethodName: "GetInvoicableTransactionDetailList",
			Handler:    _InvoiceService_GetInvoicableTransactionDetailList_Handler,
		},
		{
			MethodName: "BillInvoicingApplication",
			Handler:    _InvoiceService_BillInvoicingApplication_Handler,
		},
		{
			MethodName: "GetInvoiceApplicationRecord",
			Handler:    _InvoiceService_GetInvoiceApplicationRecord_Handler,
		},
		{
			MethodName: "SelectInvoiceApplicationPage",
			Handler:    _InvoiceService_SelectInvoiceApplicationPage_Handler,
		},
		{
			MethodName: "RefuseIssueInvoice",
			Handler:    _InvoiceService_RefuseIssueInvoice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "invoice.proto",
}
