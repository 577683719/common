// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: account.proto

package account

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_BindPhone_FullMethodName                  = "/UserService/BindPhone"
	UserService_UnbindWeChat_FullMethodName               = "/UserService/UnbindWeChat"
	UserService_GetWeChatBindingQRCode_FullMethodName     = "/UserService/GetWeChatBindingQRCode"
	UserService_WeChatBindingCallback_FullMethodName      = "/UserService/WeChatBindingCallback"
	UserService_UserLogin_FullMethodName                  = "/UserService/UserLogin"
	UserService_UserRegister_FullMethodName               = "/UserService/UserRegister"
	UserService_LoginOut_FullMethodName                   = "/UserService/LoginOut"
	UserService_EditPassword_FullMethodName               = "/UserService/EditPassword"
	UserService_GetUserInfo_FullMethodName                = "/UserService/GetUserInfo"
	UserService_UpdateWarnOpen_FullMethodName             = "/UserService/UpdateWarnOpen"
	UserService_UpdateReleaseWarn_FullMethodName          = "/UserService/UpdateReleaseWarn"
	UserService_GetSlidingVerificationCode_FullMethodName = "/UserService/GetSlidingVerificationCode"
	UserService_WechatLoginCallback_FullMethodName        = "/UserService/WechatLoginCallback"
	UserService_GetWeChatLoginQRCode_FullMethodName       = "/UserService/GetWeChatLoginQRCode"
	UserService_UpdatePhone_FullMethodName                = "/UserService/UpdatePhone"
	UserService_GetWebsiteTraffic_FullMethodName          = "/UserService/GetWebsiteTraffic"
	UserService_GetUserList_FullMethodName                = "/UserService/GetUserList"
	UserService_GetRecommendedPersonList_FullMethodName   = "/UserService/GetRecommendedPersonList"
	UserService_UpdateUser_FullMethodName                 = "/UserService/UpdateUser"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	//绑定手机号
	BindPhone(ctx context.Context, in *BindPhoneRequest, opts ...grpc.CallOption) (*BindPhoneResponse, error)
	//微信解绑
	UnbindWeChat(ctx context.Context, in *UnbindWeChatReqeust, opts ...grpc.CallOption) (*UnbindWeChatResponse, error)
	//获取微信绑定二维码
	GetWeChatBindingQRCode(ctx context.Context, in *GetWeChatBindingQRCodeRequest, opts ...grpc.CallOption) (*GetWeChatBindingQRCodeResponse, error)
	//微信绑定回调通知
	WeChatBindingCallback(ctx context.Context, in *WeChatBindingCallbackRequest, opts ...grpc.CallOption) (*WeChatBindingCallbackResponse, error)
	//用户登录
	UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	//用户注册
	UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error)
	//退出登录
	LoginOut(ctx context.Context, in *LoginOutRequest, opts ...grpc.CallOption) (*LoginOutResponse, error)
	//忘记密码
	EditPassword(ctx context.Context, in *EditPasswordRequest, opts ...grpc.CallOption) (*EditPasswordResponse, error)
	//用户详细
	GetUserInfo(ctx context.Context, in *UserEmptyRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	//修改到期预警
	UpdateWarnOpen(ctx context.Context, in *UpdateWarnOpenReqeust, opts ...grpc.CallOption) (*UserDefaultResponse, error)
	//修改到期释放预警
	UpdateReleaseWarn(ctx context.Context, in *UpdateReleaseWarnReqeust, opts ...grpc.CallOption) (*UserDefaultResponse, error)
	//获取滑动式验证码
	GetSlidingVerificationCode(ctx context.Context, in *GetSlidingVerificationCodeReq, opts ...grpc.CallOption) (*GetSlidingVerificationCodeResp, error)
	//微信登录回调
	WechatLoginCallback(ctx context.Context, in *WechatLoginCallbackRequest, opts ...grpc.CallOption) (*WechatLoginCallbackResponse, error)
	//获取微信登录二维码
	GetWeChatLoginQRCode(ctx context.Context, in *GetWeChatLoginQRCodeRequest, opts ...grpc.CallOption) (*GetWeChatLoginQRCodeResponse, error)
	// 修改手机号
	UpdatePhone(ctx context.Context, in *UpdatePhoneRequest, opts ...grpc.CallOption) (*UpdatePhoneResponse, error)
	//管理端_查看网站访问量
	GetWebsiteTraffic(ctx context.Context, in *GetWebsiteTrafficRequest, opts ...grpc.CallOption) (*GetWebsiteTrafficResponse, error)
	//获取用户列表
	GetUserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserListResponse, error)
	//管理端_获取被推荐人列表
	GetRecommendedPersonList(ctx context.Context, in *GetRecommendedPersonListReq, opts ...grpc.CallOption) (*GetRecommendedPersonListResp, error)
	//管理端-修改用户信息
	UpdateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UpdateUserResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) BindPhone(ctx context.Context, in *BindPhoneRequest, opts ...grpc.CallOption) (*BindPhoneResponse, error) {
	out := new(BindPhoneResponse)
	err := c.cc.Invoke(ctx, UserService_BindPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UnbindWeChat(ctx context.Context, in *UnbindWeChatReqeust, opts ...grpc.CallOption) (*UnbindWeChatResponse, error) {
	out := new(UnbindWeChatResponse)
	err := c.cc.Invoke(ctx, UserService_UnbindWeChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetWeChatBindingQRCode(ctx context.Context, in *GetWeChatBindingQRCodeRequest, opts ...grpc.CallOption) (*GetWeChatBindingQRCodeResponse, error) {
	out := new(GetWeChatBindingQRCodeResponse)
	err := c.cc.Invoke(ctx, UserService_GetWeChatBindingQRCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) WeChatBindingCallback(ctx context.Context, in *WeChatBindingCallbackRequest, opts ...grpc.CallOption) (*WeChatBindingCallbackResponse, error) {
	out := new(WeChatBindingCallbackResponse)
	err := c.cc.Invoke(ctx, UserService_WeChatBindingCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, UserService_UserLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error) {
	out := new(UserRegisterResponse)
	err := c.cc.Invoke(ctx, UserService_UserRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LoginOut(ctx context.Context, in *LoginOutRequest, opts ...grpc.CallOption) (*LoginOutResponse, error) {
	out := new(LoginOutResponse)
	err := c.cc.Invoke(ctx, UserService_LoginOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) EditPassword(ctx context.Context, in *EditPasswordRequest, opts ...grpc.CallOption) (*EditPasswordResponse, error) {
	out := new(EditPasswordResponse)
	err := c.cc.Invoke(ctx, UserService_EditPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserInfo(ctx context.Context, in *UserEmptyRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateWarnOpen(ctx context.Context, in *UpdateWarnOpenReqeust, opts ...grpc.CallOption) (*UserDefaultResponse, error) {
	out := new(UserDefaultResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateWarnOpen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateReleaseWarn(ctx context.Context, in *UpdateReleaseWarnReqeust, opts ...grpc.CallOption) (*UserDefaultResponse, error) {
	out := new(UserDefaultResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateReleaseWarn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetSlidingVerificationCode(ctx context.Context, in *GetSlidingVerificationCodeReq, opts ...grpc.CallOption) (*GetSlidingVerificationCodeResp, error) {
	out := new(GetSlidingVerificationCodeResp)
	err := c.cc.Invoke(ctx, UserService_GetSlidingVerificationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) WechatLoginCallback(ctx context.Context, in *WechatLoginCallbackRequest, opts ...grpc.CallOption) (*WechatLoginCallbackResponse, error) {
	out := new(WechatLoginCallbackResponse)
	err := c.cc.Invoke(ctx, UserService_WechatLoginCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetWeChatLoginQRCode(ctx context.Context, in *GetWeChatLoginQRCodeRequest, opts ...grpc.CallOption) (*GetWeChatLoginQRCodeResponse, error) {
	out := new(GetWeChatLoginQRCodeResponse)
	err := c.cc.Invoke(ctx, UserService_GetWeChatLoginQRCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdatePhone(ctx context.Context, in *UpdatePhoneRequest, opts ...grpc.CallOption) (*UpdatePhoneResponse, error) {
	out := new(UpdatePhoneResponse)
	err := c.cc.Invoke(ctx, UserService_UpdatePhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetWebsiteTraffic(ctx context.Context, in *GetWebsiteTrafficRequest, opts ...grpc.CallOption) (*GetWebsiteTrafficResponse, error) {
	out := new(GetWebsiteTrafficResponse)
	err := c.cc.Invoke(ctx, UserService_GetWebsiteTraffic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserListResponse, error) {
	out := new(GetUserListResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetRecommendedPersonList(ctx context.Context, in *GetRecommendedPersonListReq, opts ...grpc.CallOption) (*GetRecommendedPersonListResp, error) {
	out := new(GetRecommendedPersonListResp)
	err := c.cc.Invoke(ctx, UserService_GetRecommendedPersonList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations should embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	//绑定手机号
	BindPhone(context.Context, *BindPhoneRequest) (*BindPhoneResponse, error)
	//微信解绑
	UnbindWeChat(context.Context, *UnbindWeChatReqeust) (*UnbindWeChatResponse, error)
	//获取微信绑定二维码
	GetWeChatBindingQRCode(context.Context, *GetWeChatBindingQRCodeRequest) (*GetWeChatBindingQRCodeResponse, error)
	//微信绑定回调通知
	WeChatBindingCallback(context.Context, *WeChatBindingCallbackRequest) (*WeChatBindingCallbackResponse, error)
	//用户登录
	UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	//用户注册
	UserRegister(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)
	//退出登录
	LoginOut(context.Context, *LoginOutRequest) (*LoginOutResponse, error)
	//忘记密码
	EditPassword(context.Context, *EditPasswordRequest) (*EditPasswordResponse, error)
	//用户详细
	GetUserInfo(context.Context, *UserEmptyRequest) (*UserInfoResponse, error)
	//修改到期预警
	UpdateWarnOpen(context.Context, *UpdateWarnOpenReqeust) (*UserDefaultResponse, error)
	//修改到期释放预警
	UpdateReleaseWarn(context.Context, *UpdateReleaseWarnReqeust) (*UserDefaultResponse, error)
	//获取滑动式验证码
	GetSlidingVerificationCode(context.Context, *GetSlidingVerificationCodeReq) (*GetSlidingVerificationCodeResp, error)
	//微信登录回调
	WechatLoginCallback(context.Context, *WechatLoginCallbackRequest) (*WechatLoginCallbackResponse, error)
	//获取微信登录二维码
	GetWeChatLoginQRCode(context.Context, *GetWeChatLoginQRCodeRequest) (*GetWeChatLoginQRCodeResponse, error)
	// 修改手机号
	UpdatePhone(context.Context, *UpdatePhoneRequest) (*UpdatePhoneResponse, error)
	//管理端_查看网站访问量
	GetWebsiteTraffic(context.Context, *GetWebsiteTrafficRequest) (*GetWebsiteTrafficResponse, error)
	//获取用户列表
	GetUserList(context.Context, *GetUserListRequest) (*GetUserListResponse, error)
	//管理端_获取被推荐人列表
	GetRecommendedPersonList(context.Context, *GetRecommendedPersonListReq) (*GetRecommendedPersonListResp, error)
	//管理端-修改用户信息
	UpdateUser(context.Context, *UserInfo) (*UpdateUserResponse, error)
}

// UnimplementedUserServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) BindPhone(context.Context, *BindPhoneRequest) (*BindPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindPhone not implemented")
}
func (UnimplementedUserServiceServer) UnbindWeChat(context.Context, *UnbindWeChatReqeust) (*UnbindWeChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindWeChat not implemented")
}
func (UnimplementedUserServiceServer) GetWeChatBindingQRCode(context.Context, *GetWeChatBindingQRCodeRequest) (*GetWeChatBindingQRCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeChatBindingQRCode not implemented")
}
func (UnimplementedUserServiceServer) WeChatBindingCallback(context.Context, *WeChatBindingCallbackRequest) (*WeChatBindingCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WeChatBindingCallback not implemented")
}
func (UnimplementedUserServiceServer) UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedUserServiceServer) UserRegister(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedUserServiceServer) LoginOut(context.Context, *LoginOutRequest) (*LoginOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginOut not implemented")
}
func (UnimplementedUserServiceServer) EditPassword(context.Context, *EditPasswordRequest) (*EditPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditPassword not implemented")
}
func (UnimplementedUserServiceServer) GetUserInfo(context.Context, *UserEmptyRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserServiceServer) UpdateWarnOpen(context.Context, *UpdateWarnOpenReqeust) (*UserDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWarnOpen not implemented")
}
func (UnimplementedUserServiceServer) UpdateReleaseWarn(context.Context, *UpdateReleaseWarnReqeust) (*UserDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReleaseWarn not implemented")
}
func (UnimplementedUserServiceServer) GetSlidingVerificationCode(context.Context, *GetSlidingVerificationCodeReq) (*GetSlidingVerificationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlidingVerificationCode not implemented")
}
func (UnimplementedUserServiceServer) WechatLoginCallback(context.Context, *WechatLoginCallbackRequest) (*WechatLoginCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatLoginCallback not implemented")
}
func (UnimplementedUserServiceServer) GetWeChatLoginQRCode(context.Context, *GetWeChatLoginQRCodeRequest) (*GetWeChatLoginQRCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeChatLoginQRCode not implemented")
}
func (UnimplementedUserServiceServer) UpdatePhone(context.Context, *UpdatePhoneRequest) (*UpdatePhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhone not implemented")
}
func (UnimplementedUserServiceServer) GetWebsiteTraffic(context.Context, *GetWebsiteTrafficRequest) (*GetWebsiteTrafficResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebsiteTraffic not implemented")
}
func (UnimplementedUserServiceServer) GetUserList(context.Context, *GetUserListRequest) (*GetUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedUserServiceServer) GetRecommendedPersonList(context.Context, *GetRecommendedPersonListReq) (*GetRecommendedPersonListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendedPersonList not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(context.Context, *UserInfo) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_BindPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BindPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_BindPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BindPhone(ctx, req.(*BindPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UnbindWeChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindWeChatReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UnbindWeChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UnbindWeChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UnbindWeChat(ctx, req.(*UnbindWeChatReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetWeChatBindingQRCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeChatBindingQRCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetWeChatBindingQRCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetWeChatBindingQRCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetWeChatBindingQRCode(ctx, req.(*GetWeChatBindingQRCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_WeChatBindingCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeChatBindingCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).WeChatBindingCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_WeChatBindingCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).WeChatBindingCallback(ctx, req.(*WeChatBindingCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserLogin(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserRegister(ctx, req.(*UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LoginOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LoginOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_LoginOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LoginOut(ctx, req.(*LoginOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_EditPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).EditPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_EditPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).EditPassword(ctx, req.(*EditPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserInfo(ctx, req.(*UserEmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateWarnOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWarnOpenReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateWarnOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateWarnOpen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateWarnOpen(ctx, req.(*UpdateWarnOpenReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateReleaseWarn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReleaseWarnReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateReleaseWarn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateReleaseWarn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateReleaseWarn(ctx, req.(*UpdateReleaseWarnReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetSlidingVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlidingVerificationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetSlidingVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetSlidingVerificationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetSlidingVerificationCode(ctx, req.(*GetSlidingVerificationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_WechatLoginCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatLoginCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).WechatLoginCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_WechatLoginCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).WechatLoginCallback(ctx, req.(*WechatLoginCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetWeChatLoginQRCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeChatLoginQRCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetWeChatLoginQRCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetWeChatLoginQRCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetWeChatLoginQRCode(ctx, req.(*GetWeChatLoginQRCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdatePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdatePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdatePhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdatePhone(ctx, req.(*UpdatePhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetWebsiteTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWebsiteTrafficRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetWebsiteTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetWebsiteTraffic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetWebsiteTraffic(ctx, req.(*GetWebsiteTrafficRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserList(ctx, req.(*GetUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetRecommendedPersonList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendedPersonListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetRecommendedPersonList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetRecommendedPersonList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetRecommendedPersonList(ctx, req.(*GetRecommendedPersonListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BindPhone",
			Handler:    _UserService_BindPhone_Handler,
		},
		{
			MethodName: "UnbindWeChat",
			Handler:    _UserService_UnbindWeChat_Handler,
		},
		{
			MethodName: "GetWeChatBindingQRCode",
			Handler:    _UserService_GetWeChatBindingQRCode_Handler,
		},
		{
			MethodName: "WeChatBindingCallback",
			Handler:    _UserService_WeChatBindingCallback_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _UserService_UserLogin_Handler,
		},
		{
			MethodName: "UserRegister",
			Handler:    _UserService_UserRegister_Handler,
		},
		{
			MethodName: "LoginOut",
			Handler:    _UserService_LoginOut_Handler,
		},
		{
			MethodName: "EditPassword",
			Handler:    _UserService_EditPassword_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _UserService_GetUserInfo_Handler,
		},
		{
			MethodName: "UpdateWarnOpen",
			Handler:    _UserService_UpdateWarnOpen_Handler,
		},
		{
			MethodName: "UpdateReleaseWarn",
			Handler:    _UserService_UpdateReleaseWarn_Handler,
		},
		{
			MethodName: "GetSlidingVerificationCode",
			Handler:    _UserService_GetSlidingVerificationCode_Handler,
		},
		{
			MethodName: "WechatLoginCallback",
			Handler:    _UserService_WechatLoginCallback_Handler,
		},
		{
			MethodName: "GetWeChatLoginQRCode",
			Handler:    _UserService_GetWeChatLoginQRCode_Handler,
		},
		{
			MethodName: "UpdatePhone",
			Handler:    _UserService_UpdatePhone_Handler,
		},
		{
			MethodName: "GetWebsiteTraffic",
			Handler:    _UserService_GetWebsiteTraffic_Handler,
		},
		{
			MethodName: "GetUserList",
			Handler:    _UserService_GetUserList_Handler,
		},
		{
			MethodName: "GetRecommendedPersonList",
			Handler:    _UserService_GetRecommendedPersonList_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}
